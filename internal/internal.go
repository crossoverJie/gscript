package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\x1c\x45\x10\xbd\xef\xaf\x28\x2c\x11\xcd\xca\xd6\x2e\xb9\xc0\xc1\x9a\x03\x84\x24\x56\xe4\x24\x60\x47\x5c\xac\x3d\x74\x76\x6a\x77\x3a\x3b\xdb\x33\xee\xee\x19\xbc\x5e\xad\x84\xe0\xc4\x29\x12\x88\x1f\x80\xc4\x01\x2e\x5c\xe0\xc2\x85\x7f\x63\x2b\xfc\x0b\x54\xd5\x3d\x3b\x3d\x1f\x96\x95\x5b\x7c\xb0\x76\xba\x5f\xbd\x7a\xfd\xfa\x75\xcf\x4c\xa7\xa0\xd1\x96\x5a\x81\xd0\x5a\x6c\x20\x43\xb5\xb4\xe9\x48\x2a\x4b\x3f\x23\xa1\x36\x17\x33\x10\xe3\xed\x6e\x34\x6a\xa0\xa9\x30\xe9\x3c\x4f\x90\x61\xf4\x40\x38\x30\x8c\x2a\xb4\x54\x36\x53\x11\x3d\x08\x63\x50\xdb\xc7\x97\xa5\xc8\xdc\x73\x51\xa0\x4a\xa2\x9a\xed\x4b\x61\x71\x64\xac\x96\x6a\x09\x4b\xb4\x8f\x4a\xad\x51\xd9\x57\x72\x8d\x91\x1f\xb5\xd7\x47\xe0\x7f\x66\x62\x93\x97\xb6\x2e\x7d\x8a\x16\x72\x03\x42\x2f\xcd\xc4\x53\x5c\xcc\x88\xe4\xe5\xf9\xe7\x7a\x69\xa2\x8e\xe0\x67\xe7\x2f\x5f\x78\xa2\xba\x21\x0d\xb1\x6c\x5e\xdc\x74\xea\x30\x97\x25\xea\x0d\x7c\x2b\x6d\x0a\x85\xb0\xe9\x88\x00\x34\xf1\x14\x6d\xad\xe9\x8d\xc9\xd5\x5e\x15\x81\xb8\x17\x31\xa4\xd6\x16\x90\xc9\xd7\xf4\xfb\x0c\x4d\x91\x2b\x83\x0c\x1f\x3d\x61\x57\x16\xdc\x93\x3c\x23\xf3\x5a\x1c\xfb\x07\x82\x7b\x41\x67\x68\x98\x21\xb5\xeb\xac\x66\x38\x79\xf5\xfc\xf4\x1e\x06\x82\xd7\xcb\xa7\x09\x88\x34\x66\xc2\xca\x0a\xf9\xd1\xc0\x5a\x6c\x20\x5f\x4b\xda\x60\x91\x50\x85\xc9\x84\x49\xc7\xb5\x31\x5f\x93\x05\x5f\x09\x9b\x46\xdd\x35\xfa\xe7\x27\xb9\x5e\x7f\x23\xb2\x12\xa3\xa1\xf6\x2b\xdc\x10\x78\x9e\x09\x63\xe0\xc4\xda\xe2\x51\xae\x2c\x5e\xd9\xed\x08\x00\x42\xc1\xc7\x3c\xd0\xb1\x84\xfc\xae\xc6\x0e\x1b\xe0\xc9\x15\x88\x1d\xb8\x1a\x1f\xef\xa7\x43\x5f\x1d\x81\xd3\xc2\x2e\x3a\xd8\x8e\xff\x77\x7c\x73\x6d\xa0\xd7\x87\xbc\x83\x18\xaa\x5e\x07\xae\x0f\x3b\xb0\xcb\x61\x07\xcf\x70\xb9\x77\x6f\x80\xbe\x80\x38\xb0\x97\x7d\x6d\x3a\xf9\xa8\x16\x35\x69\xc8\xba\xe8\x5a\xce\x2e\x77\xe9\x2b\x88\x83\xcd\x71\x3a\x09\xd8\xeb\x51\xd5\x3d\x38\x67\x5f\x48\x95\x80\xce\x4b\x8b\x23\x4a\xf0\x89\x50\x49\xb6\x6f\xb4\x46\x9b\xe6\x49\x27\x69\x8b\x52\xcd\x21\x0a\x36\x77\x0c\x29\x57\x79\x4d\x94\x3c\x7f\x0d\x1c\x50\x45\x7c\x70\x18\x2c\x36\xa8\x83\xb9\xbd\x82\x38\x1c\x89\x3c\xc8\xf1\x45\x73\x7b\x35\x3e\x76\x32\xcf\x4a\xe5\x4e\x98\x41\x5d\xa1\x9e\xb0\xd8\xb3\x52\xd5\x4a\x45\x92\x68\x8e\xa9\x8b\xde\x63\x65\xf5\xc6\xc9\xa1\xdd\x5e\xe1\xe6\xa8\x22\x5f\x1c\x3d\xcf\x82\xc2\x2b\x1b\x3c\xf3\x75\xb0\xf2\xe9\x38\xaa\x31\x81\xcf\x2b\xdc\xc4\xab\xc6\x4d\xe6\x8b\x83\xb0\x10\x5f\xac\x1a\x73\x9d\x92\xe7\xa2\xd8\x36\x4d\x2e\x66\x60\xc5\xeb\x0c\x21\x86\x8b\x87\x9f\xce\xb6\x3b\x07\xa7\x6c\x1a\x79\x8d\xf1\x27\xc7\x6e\xe7\x8b\xd2\x46\xb5\x70\xa7\x88\xba\x05\x62\xa6\x53\xb0\x79\x92\xc3\x5c\xe7\xc6\xe4\x15\xea\x67\x12\xe1\xf6\xc7\x3f\x6e\xfe\xfc\x67\x8f\x91\x8b\x88\x34\xc7\x07\x07\x41\x61\x13\x84\x46\xf9\xae\x29\xf1\x57\x3a\x85\x1d\x62\x77\xbb\xb7\x43\x44\x08\xe9\xa7\x18\xf5\x31\xbf\x2a\x78\x55\x63\x68\x70\xce\x3f\x22\xe1\xa9\x0b\x39\x0b\x38\x16\x10\x21\x7c\x14\x83\x92\x59\x47\x9a\x2b\xb3\xb8\x2e\xdc\xaf\x18\xf0\xb8\x05\x58\xe4\x1a\xa2\x66\xde\x93\x40\x9b\xa5\x16\x3a\x77\x2f\x95\x13\x61\xd2\x7a\x35\xfb\xd2\x49\x7b\x5d\xa1\xb6\x56\x59\xb0\xd4\x07\x0f\x68\x43\x68\xa8\xcd\xd2\x6f\x4e\x7f\x0d\xc6\x45\x05\x82\x04\x76\xff\xba\x3b\xd2\xdf\x99\x1e\x2b\x84\x2a\x9a\x2c\x0f\x57\xd6\x7b\x00\xb1\x0f\x3b\x07\x8b\x05\x1d\x01\x76\x6c\xa0\x24\x1e\x1e\xfa\x24\x32\x17\x60\x66\xb0\xe3\xf1\x74\x0a\x37\x6f\xbf\x7f\xf7\xdd\x0f\xf0\x26\x59\x3d\x9c\x7c\x06\xff\xfd\xfc\xef\xbb\x5f\x7f\xbf\xf9\xed\xef\xdb\xb7\x3f\xdd\xfe\xf5\xcb\xfd\xfd\x5d\x7b\xda\xbe\xe1\xfe\xcd\x52\xc2\x4b\x91\x4e\xc3\x12\xf7\xc7\x23\x30\xff\x83\xcd\x3b\x67\x16\x79\x93\x86\x53\x7f\x47\x56\x71\x20\xa3\x94\x4f\x1f\x42\x9e\xa6\x50\xde\x91\xd7\x81\x5c\xfa\x57\x00\x4e\x06\xb2\xd8\x4e\x0c\xad\x04\x3b\xb9\xda\xb5\x4e\x70\x20\xb1\x75\x4a\x82\x63\x82\x03\xc7\xe3\x2e\x09\xbb\x81\x8c\x79\xac\x92\x59\x57\x84\x0f\x03\x19\xb7\x44\x7b\x2e\xaf\x31\x0a\xfa\xf8\x3a\x0a\x52\x73\x1f\xf3\x37\xd1\xa9\x54\x2b\x4c\x4e\xa5\xb1\xfe\x7e\x76\x03\x2f\xf2\x04\x9b\xd7\x45\xa0\xac\x99\x0e\xde\x17\xcd\x60\xd4\xfd\x64\xe1\xd2\xf6\x47\x04\x6f\x7b\x0c\xbd\x37\x43\x23\x65\xdb\x6d\xb5\x90\xda\xd8\x23\xc8\x84\xb1\x77\xbc\x20\x44\x92\xf4\x7a\xd3\xa6\x54\x64\xfb\x7b\x1c\x80\xa0\x29\x7d\xfb\x04\x2b\x0b\xbf\xb4\x88\x99\x35\x11\x7b\x3f\xbe\x7e\x0a\xb2\x76\xa0\x48\x7e\x7b\xd4\x5d\x24\xdb\x1e\x6a\xe2\x3d\xba\x9f\xa0\x77\x51\xc0\xc0\x4d\x91\x94\xeb\x22\x8c\x43\xb0\x48\x63\x85\x26\x4e\x96\xdc\x39\xa1\x6e\x6e\xf0\x80\xd6\x1f\x34\x0c\x71\xc9\xed\x5e\x5a\x9e\xd8\x21\x86\xce\xcd\xfb\x47\xf6\xff\x00\x00\x00\xff\xff\x26\xfa\x98\xc4\x9f\x0d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
