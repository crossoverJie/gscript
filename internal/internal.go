package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xbd\x8e\x13\x31\x10\xee\xf7\x29\x86\x93\x38\x6d\x74\x51\xc2\x35\x50\x44\x5b\x9e\x84\xd0\x41\x73\x65\x94\xc2\x97\x9d\x24\x26\x7b\xde\xc5\x76\x16\x72\x51\x24\x04\x15\xd5\x49\x20\x1e\x00\x89\x02\x1a\x1a\x68\x68\x78\x9b\x3b\x1d\x6f\x81\xc6\xf6\xc6\xde\x9f\x08\xae\xc3\x4d\xd6\xf6\x37\x33\xdf\x78\xbe\xb1\x33\x1c\x82\x44\xbd\x92\x02\x98\x94\x6c\x0d\x19\x8a\xb9\x5e\x44\x5c\x68\xfa\x8c\x99\x58\x8f\x27\xc0\x7a\x9b\x6d\x14\x79\xe8\x82\xa9\xc5\x34\x4f\xd1\xc0\x68\x42\x38\x50\x06\x55\x48\x2e\x74\x26\x62\x9a\x30\xa5\x50\xea\x93\x17\x2b\x96\xd9\x79\x51\xa0\x48\xcd\x67\x14\x4d\x33\xa6\x14\x9c\x08\x2d\xd7\x67\x5a\x72\x31\xdf\x44\x00\x00\xca\x7c\xc3\x12\xd7\xfd\x92\x65\x2b\x1c\x99\xd5\x00\x06\x02\x5f\xe9\xd6\x6a\x5c\xd9\xf5\x2b\x0f\x65\xbf\x6e\xd5\xb3\xfe\x69\x2c\x71\x9d\x2c\x47\xbb\xa9\x89\x93\x94\x7e\x81\x22\x24\xc2\xce\xb7\xd1\xd6\x51\x7d\xca\x8a\x90\x68\xe0\x7c\x3c\x01\xcd\xce\x33\x84\x04\xc6\xc7\x0f\x27\x9b\xad\x35\xa5\xd3\x51\xfc\x12\x93\x07\xa3\xc8\x2c\x14\x2b\x1d\x07\xf9\xed\x98\x52\xfc\x80\xde\x70\x08\x3a\x4f\x73\x98\xca\x5c\xa9\xbc\x44\xf9\x84\x23\xdc\xbc\xfb\x7a\xfd\xed\xe7\x0e\xc3\x67\x31\x65\x91\x1c\x1c\x04\x86\x34\x6c\x89\x7c\x2e\x5b\x6f\xe2\x8a\x45\x95\x83\xc4\xd6\x6d\x89\xeb\xde\xa8\x86\xe0\x6e\xcb\xa0\xee\x1b\x11\x98\xdc\x7a\xe0\x71\xe1\xb9\x92\x2b\x03\x18\xf3\x89\x47\x9c\xe7\x79\x06\x2f\x25\xd7\x66\x5b\x56\x65\xb4\xcc\x21\x46\xb8\x97\x80\xe0\x59\x83\x7b\xe8\x57\xe3\x45\x61\xe6\x90\x40\x60\x4d\x63\x96\x4b\x88\xfd\xbe\x73\x05\x75\x5f\x55\x3e\xd3\x95\x94\x28\xf4\x63\xa6\x16\x55\xd2\x3b\xd3\x41\x3d\xfd\x90\x61\xcd\x2c\x38\x91\xc3\x43\x2a\x1d\x2d\xd5\xbd\xb4\x83\xd3\xf0\x18\xab\x31\x08\x24\xdd\x1c\xee\xb4\x66\x2c\x53\x7b\x10\xcd\xd2\x56\x63\xdb\x5a\x09\x0f\xcf\x73\xf0\x8d\xd3\x6d\x59\x95\x11\x92\x5a\x67\x19\xa9\x1a\xe2\x7d\xc0\xc6\x71\xd1\x51\x19\xe2\x1d\x07\x40\xd2\x3f\x3a\x6a\x06\xf4\xc2\x04\xcc\x14\x36\xaa\x36\x1c\xc2\xf5\xd5\x9b\xdb\xd7\x6f\xe1\x79\xba\x3c\x1e\x3c\x82\xdf\x1f\x7e\xdd\x7e\xfa\x72\xfd\xf9\xc7\xcd\xd5\xfb\x9b\xef\x1f\xff\x95\xaf\xa5\x4b\xb2\xa8\xc7\x6f\x72\x72\x7c\xdc\x8f\xeb\xc7\x39\x86\x6d\x1a\x64\xf6\x9f\x37\x9d\xe9\x0b\x34\x65\xee\xee\xaf\x3d\xfd\x80\x1d\x7d\x40\x85\x75\x42\x37\xdb\x24\xfc\x3d\x3d\xd1\x51\x7a\xf7\x4e\xe0\xa0\x43\xef\x75\xcd\x51\x26\xd8\x50\xa6\x47\x74\xf9\x71\xb5\xa2\x5c\xe6\xa8\xcf\xf8\x25\xc6\x01\x03\x67\x41\x75\xf6\xf7\xb7\x79\xbb\x4e\xb9\x58\x62\x7a\xca\x95\x76\xf7\xb9\x5d\x78\x96\xa7\x68\xcd\xcf\x82\xdb\xd8\xda\x7a\x44\xf0\xe8\xf8\xc5\x4a\x24\x65\x10\xdf\x58\x43\x02\x8d\xd7\x04\x12\x68\xbd\x27\x9e\xd0\xa6\x19\x6d\xc6\xa5\xd2\x7d\xc8\x98\xd2\x7b\x9e\x12\x96\xa6\x5d\xe1\xa9\x6c\x25\x15\xe7\x0e\x12\x0d\xe2\x66\x90\x84\xf9\x95\xbd\xfa\xb5\x6d\x68\x91\xf7\xb6\xb4\xdc\x16\x64\xf5\x62\x53\x06\xf5\x55\xdb\xf6\x9b\x16\x6a\xe0\x8e\xe9\xef\x0e\x5a\x0d\x0d\x1d\x1d\x9d\xae\x2e\x8a\x50\x17\x41\x92\x4a\x33\x49\x3e\x0d\xe5\x46\xf7\xd8\xbd\xce\xe6\xa9\xfe\xd8\x18\x88\x15\x64\xf3\x72\x71\x8e\x2d\xa2\x4b\xd3\x77\xd7\xee\x9f\x00\x00\x00\xff\xff\x23\x3c\x9a\x77\xa0\x09\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
