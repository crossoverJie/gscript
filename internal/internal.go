package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x6f\x1b\x45\x14\xbe\xfb\x57\x3c\x22\x51\xad\x55\xcb\xa6\x1c\xe0\x10\xed\x01\x4a\xdb\xa8\x4a\x5b\x48\x2a\x2e\x51\x0e\x53\xef\xb3\x77\xea\xf5\xec\x66\xe6\xad\x1b\xc7\xb2\x84\xe0\xc4\xa9\x12\x88\x1f\x80\xc4\x01\x2e\x5c\xe0\xc2\x85\x7f\x93\xa8\xfc\x0b\xf4\x66\x66\x3d\xb3\xeb\x8d\xa2\x72\x22\x87\xc8\xbb\xf3\xbd\xef\xfb\xe6\xcd\x37\x33\x3b\x99\x80\x46\xaa\xb5\x02\xa1\xb5\x58\x43\x81\x6a\x4e\xf9\x40\x2a\xe2\x9f\x89\x50\xeb\xb3\x73\x10\xc3\xcd\x76\x30\x08\xd0\x5c\x98\x7c\x5a\x66\x68\x61\xfc\xc0\x38\x30\x16\x55\x69\xa9\xa8\xb0\x95\xbb\xba\x59\xa9\x97\x82\x0c\x88\xe9\xb4\xd4\x99\x54\x73\xa0\x12\x04\xb8\xd7\x60\x2a\x9c\xca\x99\x44\x0d\x42\x65\xf0\x46\x4b\x42\xc3\x00\x43\x42\x65\x42\x67\x50\xd6\x54\xd5\x34\x76\xd4\xb3\xc4\x90\x66\x0a\x57\x3d\x02\x16\x1a\x8f\xc7\xff\x45\xcb\x4d\xc7\x00\xe5\x08\x1a\x4d\x5d\x10\xe3\x1d\xff\x78\xe0\x75\xcc\xdd\xb2\xc2\x18\xd4\xf4\xe8\xa2\x16\x85\x9b\xf7\x03\x37\x2e\x3e\xb6\xa3\x55\x85\x2a\x6b\x5a\xe9\x46\x56\x4d\x47\xbf\x10\x84\x8d\xd2\x1c\xe9\x61\xad\x35\x2a\x7a\x29\x97\xd8\x08\xd2\xd5\xc8\x5b\x82\x42\xac\xcb\x9a\x9a\xd2\x27\x48\x50\x1a\x10\x7a\x6e\x1a\xb3\x67\xe7\x4c\xf2\xe2\xf4\x33\x3d\x37\x49\x67\xd1\x9e\x9e\xbe\x78\xee\x89\x1a\x41\x7e\x15\x16\x6a\x32\x71\x98\x8b\x1a\xf5\x1a\xde\x48\xca\xa1\x12\x94\x0f\x18\xc0\x03\x4f\x90\x1a\x4f\xaf\x4d\xa9\x76\xae\x18\x64\xb5\x98\x21\x27\xaa\xa0\x90\xaf\xf8\xf7\x09\x9a\xaa\x54\x06\x2d\x7c\xf0\xd8\xf5\xd1\x6a\x72\x6e\x38\x40\x2d\x8e\xdd\x03\xc3\xbd\xa1\x13\x34\x96\x21\xa7\x65\xd1\x30\x1c\xbd\x7c\x76\x7c\x07\x03\xc3\x9b\xe9\xf3\x00\x24\x1a\x0b\x41\x72\x85\xf6\xd1\xc0\x52\xac\xa1\x5c\x4a\x0e\xb9\xb0\x21\x31\x85\x30\xf9\xb0\x69\xcc\x57\xdc\x82\x2f\x05\xe5\x49\x77\x8e\xfe\xf9\x71\xa9\x97\x5f\x8b\xa2\xc6\xa4\x4f\x7e\x81\x6b\x06\x4f\x0b\x61\x0c\x1c\x11\x55\x0f\x4b\x45\x78\x49\x9b\x01\x00\xc4\x86\x0f\xed\x8b\x4e\x4b\x7c\x3e\xec\x50\x84\xe7\xae\x40\xea\xc0\xab\xe1\xe1\x6e\x38\xee\xab\x23\x70\x5e\x6c\x17\x1d\x6c\x6b\xff\x77\xfa\xe6\x64\x60\x4f\x87\x7b\x07\x29\xac\xf6\x14\x6c\x7d\xac\x60\xbb\x1c\x2b\x78\x86\x8b\x5d\xf7\x7a\xe8\x2b\x48\xa3\xf6\xda\xbe\x06\x25\x1f\xd5\xaa\x21\x8d\x59\x67\xdd\x96\xdb\x2e\x77\xe9\x57\x90\x46\x8b\xe3\x7c\x32\x70\x4f\x63\xd5\x68\xd8\x9c\x7d\x2e\xf9\x38\x28\x6b\xc2\x01\x27\xf8\x48\xa8\xac\xd8\x09\x2d\x91\xf2\x32\xeb\x24\x6d\x56\xab\x29\x24\xd1\xe2\x0e\x21\xb7\x55\xde\x13\x27\xcf\x1f\x85\x07\x5c\x91\x1e\xdc\x8f\x26\x1b\xd5\xc1\x94\x2e\x21\x8d\xdf\x24\x1e\xe4\xf8\x92\x29\x5d\x0e\x0f\x9d\xcd\x93\x5a\xb9\x1d\x66\x50\xaf\x50\x8f\xad\xd9\x93\x5a\x35\x4e\x45\x96\x69\x1b\x53\x17\xbd\x47\x8a\xf4\xda\xd9\xe1\xd5\x5e\xe0\x7a\xb4\xe2\xbe\x38\x7a\x3b\x0a\x0a\x2f\x29\x7a\xb6\xc7\xc1\xc2\xa7\x63\xd4\x60\xa2\x3e\x2f\x70\x9d\x2e\x42\x37\x2d\x5f\x1a\x85\x85\xf9\x52\x15\x9a\xeb\x9c\x3c\x13\xd5\x26\x88\x9c\x9d\x03\x89\x57\x05\x42\x0a\x67\x0f\x3e\x39\xdf\x6c\x1d\x9c\xb3\x69\xe4\x15\xa6\x1f\x1d\xba\x95\xaf\x6a\x4a\x1a\xe3\xce\x11\xab\x45\x66\x26\x13\xa0\x32\x2b\x61\xaa\x4b\x63\xca\x15\xea\xa7\x12\xe1\xe6\xfb\xdf\xae\x7f\xff\x6b\x87\x91\xb3\x84\x3d\xa7\x07\x07\x51\x61\x08\x42\x70\xbe\x0d\x25\xfe\x5a\xe3\xb0\x43\xea\x6e\xb8\x76\x88\x18\x21\xfd\x90\x45\x7d\x68\xaf\x4b\x3b\xab\x21\x04\x9c\xeb\x1f\x93\xd8\xa1\x33\x79\x1e\x71\xcc\x20\x41\xf8\x20\x05\x25\x8b\x8e\x35\x57\x46\xb8\xac\xdc\xaf\x14\xf0\xb0\x05\x98\x95\x1a\x92\x30\xee\x49\xa0\xcd\xd2\x18\x9d\xba\x4b\xe5\x48\x98\xbc\x99\xcd\xae\x74\xdc\x9e\x57\xec\xad\x55\x16\x4d\xf5\xde\x3d\x5e\x10\x7e\xd5\x66\xd9\x17\xe7\xbf\x80\x71\x51\x81\x28\x81\xdd\xbf\xee\x8a\xec\xaf\xcc\x1e\x2b\xc4\x2e\x42\x96\xfb\x2b\x9b\x35\x80\xd4\x87\xdd\x06\xcb\x1a\x1a\x01\x76\xda\xc0\x49\xbc\x7f\xdf\x27\xd1\x72\x01\x16\x06\x3b\x3d\x9e\x4c\xe0\xfa\xed\xb7\xef\xbe\xf9\x0e\x5e\x67\x8b\x07\xe3\x4f\xe1\x9f\x1f\xff\x7e\xf7\xf3\xaf\xd7\xbf\xfc\x79\xf3\xf6\x87\x9b\x3f\x7e\xba\x5b\xdf\xc9\xf3\xf2\xf5\xeb\x87\xa9\xc4\x87\x22\xef\x86\x39\xee\xb6\x47\xd4\xfc\xff\x6d\xde\x6d\x66\xd1\x2e\x52\x7f\xea\x6f\xc9\x2a\xf6\x64\x94\xf3\xe9\x43\x68\x87\x39\x94\xb7\xe4\xb5\x27\x97\xfe\x0a\xc0\x71\x4f\x16\xdb\x89\xe1\x99\x60\x27\x57\xdb\xd6\x0e\x8e\x2c\xb6\x76\x49\xb4\x4d\xb0\x67\x7b\xdc\x66\x61\xdb\x93\x31\x8f\x55\xb2\xe8\x9a\xf0\x61\xe0\xc6\xcd\x91\x4e\xe5\x15\x26\x91\x8e\xaf\xe3\x20\x85\xf3\xd8\x7e\x13\x1d\x4b\xb5\xc0\xec\x58\x1a\xf2\xe7\xb3\x7b\xf1\xbc\xcc\x30\x5c\x17\x91\xb3\x30\x1c\xdd\x17\xe1\x65\xd2\xfd\x64\xb1\xa5\xed\x8f\x08\xbb\xec\x69\x98\x44\xb8\x1b\x82\x99\x4d\x57\x6c\x26\xb5\xa1\x11\x14\xc2\xd0\x2d\x57\x84\xc8\xb2\x3d\x75\x5e\x96\x15\x37\xfe\x3d\xb6\x40\x24\xca\x5f\x3f\xd1\xdc\xe2\x6f\x2d\x66\xb6\x9e\x98\x7d\x3f\xc0\x7e\x08\x8a\x76\xa4\xd8\x7e\xfb\xad\x3b\x4a\x36\x7b\xa8\xb1\xef\xd2\xdd\x04\x7b\x47\x05\xf4\x9c\x15\x59\xbd\xac\xe2\x40\x44\x93\x34\x24\x34\x73\x5a\xcb\x9d\x3d\xea\xc6\x7a\xb7\x68\xf3\x49\x63\x21\x2e\xbb\xdd\x63\xcb\x13\x3b\x44\xdf\xce\x79\xff\xd0\xfe\x1b\x00\x00\xff\xff\x2e\xf5\xc6\xc5\xa5\x0e\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
