package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\xdc\xb8\x15\xbf\xcf\xa7\x78\x1d\xa0\x8b\x99\xb5\x77\x6c\xef\xa1\x05\xd6\xab\x02\x71\xba\x89\xb1\xc8\x26\xa9\xed\xb6\x07\xc3\x07\x4a\x7a\x33\xc3\x58\x22\x15\x92\x1a\x7b\x6c\x0c\x50\xb4\xa7\x9e\x16\x68\xd1\x0f\x50\xa0\x87\xf6\xd2\x4b\x7b\xe9\xa5\xdf\x26\xc1\xf6\x5b\x14\x8f\xa4\x24\x8a\x92\x37\x4e\x7b\xd9\x1c\x1c\x0d\xf9\xfe\xfc\xde\x7b\x3f\xf2\x91\x3c\x38\x00\x85\xa6\x56\x02\x98\x52\x6c\x0b\x05\x8a\x95\x59\x4f\xb8\x30\xf4\x39\x63\x62\x7b\x79\x05\x6c\x7e\xbf\x9b\x4c\x62\xd1\x8c\x55\x56\x2e\x63\x55\x2c\xe7\xc6\x65\xb5\x9d\xa5\x5b\x83\x97\x57\x90\x6b\xb3\x0f\xfe\x5b\xab\x2c\xb2\xb7\x66\x7a\x9d\xc9\x1c\xad\x1a\xfd\x20\x7b\xa0\xad\x54\xa5\xb8\x30\x85\x45\xd2\xda\x5f\x4a\x55\x32\xa3\x81\x65\x99\x54\x39\x17\x2b\x30\x12\x18\xb8\x61\xd0\x15\x66\x7c\xc9\x51\x01\x13\x39\xdc\x28\x6e\x50\x93\x80\x36\x4c\xe4\x4c\xe5\x20\x6b\x53\xd5\x66\xe1\x4c\x2f\x67\xda\x28\x32\xe1\xb4\xf7\x81\x1c\x2d\x16\x8b\xff\xc5\x97\x0b\x47\x83\x59\x23\x28\xd4\x75\x61\x48\xde\xd9\x5f\x4c\xbc\x1f\xfd\x28\xb7\xd0\xf8\xad\xb5\xf5\xb9\x46\xc8\x71\xc9\xea\xc2\xb4\x33\x4b\xa9\x80\x1b\x0d\xb2\x42\xc5\x44\xae\x1f\x15\xee\xac\xe7\x87\x69\x8d\xca\x7c\xf5\xb6\x66\x85\x4b\xf0\x91\x03\xc2\x3e\x6f\x60\x64\x72\x83\xca\xf8\x18\xc8\x2c\x15\xd1\x11\x60\x31\xf1\x05\x35\xf2\x64\x6b\xf0\x09\x8d\x35\x51\xd9\xda\x75\xea\x9d\x92\x43\xd6\x4b\x88\x91\xe7\xf6\xa3\xe1\x4a\x4a\xba\x59\xc1\xb4\x06\x37\x71\x52\xf3\x22\x47\x75\x3f\x01\x80\x86\x44\x69\xbd\x84\x04\x2e\x0f\xaf\xee\x77\xc7\x13\x3b\x71\x70\x00\xac\xaa\x50\xe4\x90\x49\x61\x50\xd8\x24\xa4\xf5\x72\x1f\xb8\xe9\x55\xc6\x51\x1c\xe4\x12\xb4\x55\x24\xd2\xd9\xb4\x79\x18\x5d\x08\x76\x3a\x70\x6a\xb0\xac\x20\xe9\xc7\x3b\x3f\x6e\xa5\x9c\xfb\x99\xf5\x49\xa2\xc1\x94\x27\x3a\x2d\xa9\x60\x66\x67\xff\x46\xe8\xd3\x0f\xe3\x4e\x17\x2d\xf0\x5f\x13\x70\x82\xa3\x83\xf4\x8d\x22\x4a\xc7\xe1\xa4\x2d\x16\xfb\xdf\x4a\xc9\x9b\x19\x19\x16\x81\x19\xbe\x84\x99\x80\x9f\xc1\xe1\x1c\xba\x41\x8f\xfa\x66\x8d\x82\xe0\x29\x04\xae\x41\x48\x03\x28\x64\xbd\x5a\x83\xae\x58\x46\xa0\x97\x66\xd1\xd3\x21\x63\xb4\x65\xa4\xf5\x72\x0e\x9f\x39\x0c\xf4\xf9\x25\x88\xd8\x7c\x90\x7a\x81\x37\x27\xae\xe4\x8d\xc2\x3e\x7c\xfe\x69\x63\x67\x4f\x58\x1e\xc4\xba\x76\x07\x72\x9a\xfb\x94\xd2\xf9\x50\xc4\xf1\xc8\xc9\xf4\x67\x77\xed\xaf\x5d\x53\x24\x9f\x23\x4f\x10\x4f\x97\x20\x4f\x3e\xad\x1d\xa1\x5b\x97\xbb\xc9\x6e\xd2\xe3\xb4\xbe\x0f\x4d\xbd\x91\x5c\x78\xde\x5d\x5e\x01\x16\x58\xea\xfd\x66\x4e\x63\x15\x95\x82\x32\x60\x65\xe6\x90\x24\xc3\xa2\x78\x14\xd3\x69\x17\xcf\xee\x7b\xf4\x8f\x1e\xd0\xb7\x12\x97\x87\x57\x63\x56\xe2\x85\x91\xea\x78\x59\x60\xc8\x7e\xcb\x27\x48\x5c\xad\xf5\x1c\x3e\xed\x61\xf8\xec\x28\x10\xa5\x4d\xcd\xf2\x8f\x27\x87\xc7\xc0\xe1\x4b\xe8\x24\x8f\x81\xef\xed\xc5\x68\x9b\x2c\x41\xe2\x11\xf3\xab\x7e\x1d\x1f\x84\x18\xb1\x81\x00\x0a\xd8\x6b\x40\x7e\x6f\xd8\xbd\x7d\x09\x74\x0a\x49\x7f\x68\x16\xa8\xeb\x74\x61\x17\x95\x08\xc7\xfc\xde\xcf\x95\x36\x2d\xf0\x30\xd5\x3a\x5d\x84\x5b\x92\x15\x9c\xfb\x8d\xae\x33\x70\x79\x05\x0a\x4b\xc6\x45\x6b\xe3\xe8\x8b\x2e\x5d\x57\xbd\xac\x0e\x93\xea\x54\x7d\x56\xa3\xa4\xf6\xdd\xf7\xab\x19\x04\xa0\x20\xf1\x08\x06\x69\x8f\x4c\xa8\xd1\x84\x7a\xaa\xe9\x74\xd1\x2c\x26\x1f\xa3\x5d\x2f\xed\x9e\xa8\x61\xba\x99\xd2\xb6\x48\xdb\x20\xed\x91\x72\x09\xcc\xf7\x93\x29\x9b\x4e\xfc\x36\xe7\x0f\x21\xae\x85\x6d\xa2\x33\xc6\xd7\xe7\xaf\x5e\x7a\xd8\x4d\xe3\xa1\xa1\xde\xb9\xc2\x09\xbd\xad\x51\x6d\xe1\x86\x9b\x35\x54\xcc\xac\x27\x24\x41\x13\xcf\xd1\x34\xbd\xe1\x8d\x96\xa2\x5d\xa0\x24\x64\x0d\x90\x85\xd3\x8b\x8b\xd7\x50\xf0\x94\xbe\xcf\x50\x57\x52\x68\xb4\xe2\x93\x67\xae\xef\x5b\xa7\xee\x78\x94\x63\xcf\x46\xfb\x83\xc4\x7d\xff\x3c\x43\x6d\x2d\xac\x4d\x59\x34\x16\x4e\x2f\xbe\x79\xf1\x01\x0b\x24\xde\xc4\x44\x13\x30\x53\x58\x30\xc3\x37\x68\x7f\x6a\x28\xd9\x16\x64\xc9\xe9\x90\xc7\xec\xa1\x46\x17\x4c\xaf\xe7\x4d\x66\x7e\x41\x29\x78\xcd\xcc\x7a\x16\xc7\xd8\x26\xd4\xf5\x24\xc7\xe0\x0d\x2b\x6a\xb4\x4b\x97\xc6\x04\x2b\x91\x9a\x70\x59\x49\x81\xc2\x50\xb1\x68\xd8\xa6\xb5\x6d\xfa\xcf\xa4\x2a\x7f\x45\x6a\xb3\x31\xfc\xd7\xb8\xfd\x3f\xbd\xbd\x7e\x75\x7e\xd1\xf8\x7a\x2d\xb5\xf9\x48\x7f\xa0\xf0\x6d\x8d\xda\x80\x62\x37\x90\xca\x7c\xdb\xd8\x3a\x73\xe3\x27\x32\xdf\x0e\x72\xe3\xf6\xf7\x53\x63\xaa\xa7\x74\x02\xb9\x35\xbd\x3d\x9e\xc4\xdc\x1a\x88\x28\xe0\xd9\x1a\x6f\x0e\xc4\x02\x48\x9c\xf0\x26\x58\x3d\x21\x8f\x9c\x01\x17\x8a\x65\x4d\x78\xae\x88\x78\xe2\xdc\xc0\xc0\x0f\x71\x05\x12\xd8\x0c\x3c\x58\xfd\xd0\x83\x65\x55\xe8\xc1\x5b\x78\xdb\xb2\x65\xc4\x3c\x1d\x98\x3a\x3a\xd9\x5c\x0d\xce\x21\xd5\xf1\x48\x7b\x5d\xc6\x15\xb3\x45\x8a\xcd\x6f\x20\x09\xb8\xe4\x70\x92\xe0\xc0\xc7\x66\xcc\x47\x35\xc6\x8c\x07\xfd\xf4\x79\xf4\x08\x5f\xf4\xa7\xe7\x4f\x05\xec\x19\xfa\x20\x9e\x41\xd2\xa3\xd8\x78\xbe\x48\xb0\x3b\x57\x1c\x1c\xc0\x09\xa7\xdb\x87\xac\x0d\x4e\xd6\xc6\x54\xa7\x4c\xe4\x45\x1b\x4f\x89\x66\x2d\xf3\x68\xa3\x58\xd6\x22\x83\x59\xc0\xd5\x39\xac\xad\x96\x87\x45\x1b\x87\xbf\x79\x4d\x49\x23\x99\xee\x05\x58\x02\x3d\xc8\xcc\x2d\x24\xe1\x48\xd3\xfc\x9c\xbd\x59\x66\x6e\xe7\xc7\x0e\xe6\x59\x2d\x80\xf0\x81\x46\xb5\x41\xb5\xb0\x60\xcf\xea\xe6\xe8\x03\x2c\xcf\x55\xb3\x0e\xcf\xb7\xda\x60\x09\x52\x03\xab\xf8\xa4\xed\x77\xcf\xd1\xbc\x3a\x7f\xa2\x56\x7a\x46\x82\x5e\xef\xa9\x2c\x4b\x26\xf2\xc6\x0c\x6d\x09\x6d\xb8\x74\xd7\x51\x2b\x12\xb6\x47\xe5\x67\xbc\x4b\xcc\x92\x17\xf8\x32\x94\xb5\x3b\xcb\xbe\x3d\xae\x54\xa8\x4a\x52\x3a\xc3\x52\x6e\x06\x1a\x81\xef\xe7\x68\x6e\xf2\x59\xbb\xff\xeb\x1e\x6c\x7f\xe2\xb3\x63\xf7\xed\x35\xe5\x39\x1a\x2b\xa0\x56\x7a\x31\xe9\x75\xf3\x55\x10\x5d\x5c\xf4\x20\xf2\x91\x35\x98\x3d\x22\x05\xb1\xc5\x26\x6d\x4e\x98\x44\x42\xc3\xd4\x7d\x8d\x41\x61\xb8\x14\x5f\xd8\x7c\xd0\x01\xdf\x5d\x44\x33\x5e\xb2\xc2\x4a\xdd\x7c\x7c\x52\x5b\x18\x5d\x41\x3a\x25\x2f\x6d\x25\x23\x34\xca\x96\x42\x07\xbb\x3e\xa9\x4d\x5c\x40\xe3\x55\x6a\x5d\xf9\x32\xb6\x33\x03\xd3\xae\xc9\x30\x50\x52\x1a\xcc\x5d\xd3\x24\x27\x90\x49\xa5\x6c\x1f\x6f\xee\xfe\xe4\x3e\xab\x95\xa2\x66\x93\x73\x85\x99\x91\xd4\xd7\x82\x5a\xac\x3c\x25\x46\x2a\x48\xe3\xc7\xbd\x13\xce\xcf\x99\xc1\x80\x4b\x4f\x9d\xe5\x0b\x5e\xb6\xe1\x98\xbb\x36\x97\x05\xdb\xca\xda\x58\xb2\x51\x3e\x7f\x29\xf8\x6d\x27\x15\xf4\x20\x32\x4a\x26\xee\x23\x58\x8f\xb3\x3e\x82\x3b\x54\x24\x0d\x2f\x1a\xa6\x91\x00\xd5\x11\xa0\xd8\x92\x05\x6c\xee\xa2\x14\x3c\x95\x65\xc5\x0b\x54\xc1\x4a\x87\xbc\x2e\xab\x27\xe7\x17\xb3\x96\xde\x79\xb8\xe8\x68\xf6\x7c\x5b\xa6\xb2\x88\x05\x7c\x02\xbe\x12\x46\x6d\x9d\x7b\xea\x7b\xd7\xb8\xdd\xb7\xcc\x72\x8e\xed\x2c\x08\xbc\x35\xc1\x6f\x7b\x12\xbc\xf6\x7d\x72\xbf\x91\x09\x62\xb8\xc6\x6d\x72\xdd\xed\xc5\xd6\x5e\x12\xb4\x4d\xb2\x97\x88\x2e\x34\x87\xe4\x1b\x56\xdd\x77\x4e\x2e\xaf\xc0\xb0\xb4\x40\xba\xc8\x1e\xfd\xa4\xbd\xb4\x52\xee\x34\xbf\xc3\xe4\xd0\x9f\x7f\xab\xda\xbd\xd4\x10\x70\x87\x88\xbc\x05\x60\x0e\x0e\xc0\xc8\x5c\x42\xa6\xa4\xd6\x72\x83\xea\x6b\x8e\xf0\xfe\xf7\x7f\x7b\xf7\xf7\x7f\x05\x77\xbd\x19\x61\x4e\xa6\xd3\xf9\xd8\x0d\x6f\xf4\x7a\xe8\x1f\xe0\x28\x9d\x90\xb8\xb7\xb8\x7e\x8b\xb3\xd7\x08\x3f\x65\xa5\x7e\xec\x5e\x35\x28\xaa\x39\x74\x72\x2e\x7f\x64\xc4\x4e\xf5\xee\x07\x74\x09\x45\xf8\x51\x02\x82\x17\x11\x34\xa7\x66\xb0\xac\xdc\x57\x02\xd8\xbf\x57\xd8\x0b\x62\x37\xef\x8d\x8c\x3c\x1c\xd8\x93\x8f\xa3\xed\x29\xd3\xeb\x26\x9a\x56\x75\xd1\x8f\x2b\xc4\xd6\x53\x0b\x42\xfd\xe4\x13\x2a\x08\x0d\xf5\xad\x0c\x9d\xd3\xbf\x4e\xc6\x51\x05\x02\x06\xc6\xff\xe2\x8a\x0c\x2b\x33\xb0\x0a\x21\x8a\x8e\xcb\xe3\x9a\x4d\x0d\x20\xf1\x64\xb7\xc4\xf2\x9b\x2d\xc6\x97\x3b\x7e\x87\x7b\x7b\xc1\x6d\x73\x07\x58\x68\x1c\xbe\xfd\xbc\xfb\xf6\xb7\xdf\xfd\xe6\x77\xf0\x26\xbf\x3e\x5a\xfc\x14\xfe\xf3\xc7\x7f\x7f\xf7\xe7\xbf\xbe\xfb\xcb\x3f\xdf\x7f\xfb\x87\xf7\xff\xf8\xd3\x87\xfd\x3b\xf7\x54\xbe\x71\xff\x5d\x28\xe1\xd1\x8d\x56\xc3\x0a\xdb\xe5\xd1\x7b\x1b\xf9\x81\xf2\xdd\x72\x16\x6d\x91\xc6\x59\xff\x00\x57\x71\x84\xa3\xc4\x4f\x4f\x42\x3b\x4d\xa4\x7c\x80\xaf\x23\xbc\x6c\xde\x76\x16\x23\x5c\xec\x33\x86\x22\xc1\x88\x57\xfd\x67\xa4\x00\x62\x6f\x95\x04\xcb\x04\x47\x96\xc7\x43\x10\x76\x23\x1c\xf3\xb2\x82\x17\x31\x08\x4f\x06\x4a\xdc\x0a\xcd\x39\xbf\xc3\x91\x86\x4b\x44\x0a\x5a\x0d\xf5\x9a\x17\x5c\x5c\x63\xfe\x82\x6b\xe3\xf7\x67\x37\xf0\x52\xe6\xd8\xb5\x8b\x00\x59\x37\x1d\xf4\x8b\x6e\x70\x16\x5f\xde\xdc\xe5\xb4\x77\x9d\xb2\x65\x4f\xba\x20\xba\xde\xd0\x81\xb9\x8f\x9d\xd9\xab\x2e\xf5\x59\x6d\x1e\x68\x11\x2c\xcf\x07\xde\xa9\x2c\x1b\x4a\xfc\x47\x2c\x81\xc0\x29\xdd\x03\x83\xd8\xc2\x5b\x27\x59\xf6\xcf\x55\x63\x04\x6e\x5e\xb2\x8a\x3e\xa5\x08\x7e\x7f\xd4\x6d\x25\xf7\x03\xa9\x85\xcf\xd2\x87\x0d\x0c\xb6\x0a\x18\xd9\x2b\xe8\x80\x10\x12\x22\x08\x52\x1b\xa6\xc8\xa6\x85\x1c\xad\x51\x37\x37\xba\x44\x9b\xdb\x90\x15\x71\xdc\x1d\xbc\x89\x39\xc3\x4e\x62\x6c\xe5\x7c\x3c\x69\xff\x1b\x00\x00\xff\xff\xb8\xc9\xbe\x1d\x9f\x1b\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
