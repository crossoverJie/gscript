package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xbf\x6f\x1b\x37\x14\xde\xf5\x57\xbc\x1a\x68\x70\x82\x05\xa9\x59\xda\xc1\xb8\xa1\x4d\x93\x18\x81\x93\xb4\x76\xd0\xc5\xf0\xc0\xe8\x9e\x74\x8c\x4e\xbc\x33\xc9\xbb\x5a\x16\x04\x14\xed\xd4\x29\x40\x8b\xfe\x01\x05\x3a\xb4\x4b\x97\x76\xe9\xd2\xff\xc6\x46\xfa\x5f\x14\xef\x91\xa7\xe3\xfd\x30\x8c\x6c\xd1\x20\xdc\x91\x1f\xbf\xf7\xf1\xe3\x47\xf2\x66\x33\xd0\x68\x4b\xad\x40\x68\x2d\x36\x90\xa1\x5a\xda\x74\x24\x95\xa5\xc7\x48\xa8\xcd\xf9\x05\x88\xf1\x76\x37\x1a\x35\xd0\x54\x98\x74\x9e\x27\xc8\x30\x7a\x21\x1c\x18\x46\x15\x5a\x2a\x9b\xa9\x88\x5e\xf8\x79\x11\x19\xab\xa5\x5a\xc2\x22\xd7\x6b\x61\x27\x40\xd8\xe9\x74\xca\xa4\xbe\xcb\xdc\x8f\x14\xc6\xa0\xb6\x8f\x2f\x4b\x91\x31\xb7\x28\x0a\x54\x49\x54\x2b\xfb\x52\x58\xac\xd9\x96\x68\x1f\x95\x5a\xa3\xb2\xaf\xe4\x1a\x6b\x52\x7b\x3d\x01\xff\x98\x89\x4d\x5e\xda\x7a\xe8\x53\xb4\x90\x1b\x10\x7a\x69\xa6\x9e\xe2\xfc\x82\x48\x5e\x9e\x7d\xae\x97\x26\xea\x4c\xfe\xd9\xd9\xcb\x17\x9e\xa8\x2e\x48\x4d\x6c\x01\x2b\x9d\xcd\x1c\xe6\xb2\x44\xbd\x81\x6f\xa5\x4d\xa1\x10\x36\x1d\x11\x80\x3a\x9e\xa2\xad\x35\xbd\x31\xb9\xda\xab\x22\x10\xd7\x22\x86\xd4\xda\x02\x32\xf9\x9a\x9e\x4f\xd1\x14\xb9\x32\xc8\xf0\xd1\x13\xe7\x15\xd7\x24\xff\x69\x21\x5a\x1c\xfb\x17\x82\x7b\x41\xa7\x68\x98\x21\xb5\xeb\xac\x66\x38\x7e\xf5\xfc\xe4\x1e\x06\x82\xd7\xd3\xa7\x0e\x88\x34\x66\xc2\xca\x0a\xf9\xd5\xc0\x5a\x6c\x20\x5f\x4b\x0a\x8b\x48\x78\x25\x33\x61\xd2\x71\x6d\xcc\xd7\x64\xc1\x57\xc2\xa6\x51\x77\x8e\xfe\xfd\x49\xae\xd7\xdf\x88\xac\xc4\x68\xa8\xfc\x0a\x37\x04\x9e\x67\xc2\x18\x38\xb6\xb6\x78\x94\x2b\x8b\x57\x76\x3b\x02\x80\x50\xf0\x11\x37\x74\x2c\x21\xbf\xab\xb1\xc3\x06\x78\x72\x05\x62\x07\xae\xc6\x47\xfb\xee\xd0\x57\x47\xe0\xb4\xb0\x8b\x0e\xb6\xe3\xff\x8e\x6f\xae\x0c\xf4\xea\x90\x77\x10\x43\xd5\xab\xc0\xe3\xc3\x0a\xec\x72\x58\xc1\x33\x5c\xee\xdd\x1b\xa0\x2f\x20\x0e\xec\x65\x5f\x9b\x4a\x3e\xaa\x45\x4d\x1a\xb2\x2e\xba\x96\xb3\xcb\x5d\xfa\x0a\xe2\x60\x71\x9c\x4e\x02\xf6\x6a\x54\x75\x0d\xce\xd9\x17\x52\x25\xa0\xf3\xd2\xe2\x88\x12\x7c\x2c\x54\x92\xed\x0b\xad\xd1\xa6\x79\xd2\x49\xda\xa2\x54\x73\x88\x82\xc5\x1d\x43\xca\xa3\xbc\x26\x4a\x9e\x3f\x52\x0e\x68\x44\x7c\x70\x18\x4c\x36\x18\x07\x73\x7b\x05\x71\xd8\x12\x79\x90\xe3\x8b\xe6\xf6\x6a\x7c\xe4\x64\x9e\x96\xca\xed\x30\x83\xba\x42\x3d\x65\xb1\xa7\xa5\xaa\x95\x8a\x24\xd1\x1c\x53\x17\xbd\xc7\xca\xea\x8d\x93\x43\xab\xbd\xc2\xcd\xa4\x22\x5f\x1c\x3d\xf7\x82\xc2\x2b\x1b\xbc\xf3\x71\xb0\xf2\xe9\x98\xd4\x98\xc0\xe7\x15\x6e\xe2\x55\xe3\x26\xf3\xc5\x41\x58\x88\x2f\x56\x8d\xb9\x4e\xc9\x73\x51\x6c\x9b\x22\xe7\x17\x60\xc5\xeb\x0c\x21\x86\xf3\x87\x9f\x5e\x6c\x77\x0e\x4e\xd9\x34\xf2\x1a\xe3\x4f\x8e\xdc\xca\x17\xa5\x8d\x6a\xe1\x4e\x11\x55\x0b\xc4\xcc\x66\x60\xf3\x24\x87\xb9\xce\x8d\xc9\x2b\xd4\xcf\x24\xc2\xed\x8f\x7f\xdc\xfc\xf9\xcf\x1e\x23\x17\x11\x69\x8e\x0f\x0e\x82\x81\x4d\x10\x1a\xe5\xbb\x66\x88\xbf\x1e\x28\xec\x10\xbb\x9b\xa2\x1d\x22\x42\x48\xdf\xc5\xa8\x8f\xf9\xda\xe1\x59\x8d\xa1\xc1\x39\xff\x88\x84\xbb\xce\xe5\x45\xc0\xb1\x80\x08\xe1\xa3\x18\x94\xcc\x3a\xd2\xdc\x30\x8b\xeb\xc2\x3d\xc5\x80\x47\x2d\xc0\x22\xd7\x10\x35\xfd\x9e\x04\xda\x2c\xb5\xd0\xb9\xbb\x54\x8e\x85\x49\xeb\xd9\xec\x87\x4e\xdb\xf3\x0a\xb5\xb5\x86\x05\x53\x7d\xf0\x80\x16\x84\x9a\xda\x2c\xfd\xe2\xf4\x6b\x30\x2e\x2a\x10\x24\xb0\xfb\xeb\xae\x48\x7f\x65\x7a\xac\x10\xaa\x68\xb2\x3c\x3c\xb2\x5e\x03\x88\x7d\xd8\x39\x58\x2c\x68\x02\xd8\xb1\x81\x92\x78\x78\xe8\x93\xc8\x5c\x80\x99\xc1\x8e\xc7\xb3\x19\xdc\xbc\xfd\xfe\xdd\x77\x3f\xc0\x9b\x64\xf5\x70\xfa\x19\xfc\xf7\xf3\xbf\xef\x7e\xfd\xfd\xe6\xb7\xbf\x6f\xdf\xfe\x74\xfb\xd7\x2f\xf7\xd7\x77\xe5\x69\xf9\x86\xeb\x37\x53\x09\x0f\x45\xda\x0d\x4b\xdc\x6f\x8f\xc0\xfc\x0f\x36\xef\x9c\x59\xe4\x45\x1a\x4e\xfd\x1d\x59\xc5\x81\x8c\x52\x3e\x7d\x08\xb9\x9b\x42\x79\x47\x5e\x07\x72\xe9\xaf\x00\x9c\x0e\x64\xb1\x9d\x18\x9a\x09\x76\x72\xb5\x6b\xed\xe0\x40\x62\x6b\x97\x04\xdb\x04\x07\xb6\xc7\x5d\x12\x76\x03\x19\xf3\x58\x25\xb3\xae\x08\x1f\x06\x32\x6e\x89\xf6\x4c\x5e\x63\x14\xd4\xf1\xe3\x28\x48\xcd\x79\xcc\xdf\x44\x27\x52\xad\x30\x39\x91\xc6\xfa\xf3\xd9\x35\xbc\xc8\x13\x6c\xae\x8b\x40\x59\xd3\x1d\xdc\x17\x4d\x63\xd4\xfd\x64\xe1\xa1\xed\x8f\x08\x5e\xf6\x18\x7a\x37\x43\x23\x65\xdb\x2d\xb5\x90\xda\xd8\x09\x64\xc2\xd8\x3b\x2e\x08\x91\x24\xbd\xda\xb4\x28\x15\xd9\xfe\x1e\x1b\x20\x28\x4a\xdf\x3e\xc1\xcc\xc2\x2f\x2d\x62\x66\x4d\xc4\xde\x8f\xaf\xef\x82\xac\x1d\x28\x92\xdf\x6e\x75\x07\xc9\xb6\x87\x9a\x7a\x8f\xee\x27\xe8\x1d\x14\x30\x70\x52\x24\xe5\xba\x08\xe3\x10\x4c\xd2\x58\xa1\x89\x93\x25\x77\x76\xa8\xeb\x1b\xdc\xa0\xf5\x07\x0d\x43\x5c\x72\xbb\x87\x96\x27\x76\x88\xa1\x7d\xf3\xfe\x91\xfd\x3f\x00\x00\xff\xff\x54\x20\x03\xdd\xeb\x0d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
