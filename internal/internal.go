package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x6f\xdb\x46\x13\xbd\xeb\x57\xcc\x27\xe0\x0b\x28\x58\x90\xea\x1e\xda\x83\xc1\x43\x9b\x26\x31\x02\x27\x69\xed\xa0\x17\xc3\x87\x8d\x38\x12\x37\xa2\x96\xf4\xee\x90\xb1\x2c\x08\x28\xda\x53\x4f\x01\x5a\xf4\x07\x14\xe8\xa1\xbd\xf4\xd2\x5e\x7a\xe9\xbf\xb1\x91\xfe\x8b\x62\x76\x97\xe2\x92\xa2\xe1\xa6\xa7\xfa\x60\x88\xdc\x37\xef\xbd\x9d\x7d\xbb\xcb\xe9\x14\x34\x52\xa9\x15\x08\xad\xc5\x1a\x32\x54\x0b\x4a\x07\x52\x11\xff\x8c\x84\x5a\x9f\x5f\x80\x18\x6d\xb6\x83\x41\x03\x4d\x85\x49\x67\x79\x82\x16\xc6\x0f\x8c\x03\x63\x51\x85\x96\x8a\x32\x5b\xb9\xab\x9b\xe7\x7a\x25\xc8\x80\x98\xcd\x72\x9d\x48\xb5\x00\xca\x41\x80\x7b\x0d\xa6\xc0\x99\x9c\x4b\xd4\x20\x54\x02\x6f\xb4\x24\x34\x0c\x30\x24\x54\x22\x74\x02\x79\x49\x45\x49\x13\x47\x3d\x8f\x0c\x69\xa6\x70\xd5\x63\x60\xa1\xc9\x64\xf2\x6f\xb4\xdc\x74\x0c\x50\x8a\xa0\xd1\x94\x19\x31\xde\xf1\x4f\x06\x5e\xc7\xfc\x23\x59\xa8\x75\x4b\x63\x35\x53\x84\x04\xe7\xa2\xcc\x68\x37\x32\xcf\x35\x48\x32\x90\x17\xa8\x85\x4a\xcc\x7d\xd3\xf5\x82\x56\x3e\x6a\xc9\x09\x63\x50\xd3\xa3\xcb\x52\x64\xae\xcf\x87\xce\x8f\xf8\xb0\x76\x23\x8a\x02\x59\x62\x58\x0d\x99\x9b\xed\xa0\x4a\x20\x9f\x83\xf0\x0b\x3d\x14\xc3\x81\x43\xd5\x8b\xec\x38\xaa\x9a\xe2\x33\x41\x58\x7b\x58\x20\x3d\x2c\xb5\x46\x45\x2f\xe5\x0a\xeb\x56\xd0\xf5\xd8\x37\x0b\x32\xb1\xce\x4b\xaa\x4b\x9f\x20\x41\x6e\x40\xe8\x85\xa9\xa7\x71\x7e\xc1\x24\x2f\xce\x3e\xd1\x0b\x13\x75\xe2\xf4\xf4\xec\xc5\x73\x4f\x54\x0b\xf2\xab\x26\x42\xd3\xa9\xc3\x5c\x96\xa8\xd7\xf0\x46\x52\x0a\x85\xa0\x74\xc0\x00\x1e\x78\x82\x54\x7b\x7a\x6d\x72\xb5\x73\xc5\x20\xab\xc5\x0c\x29\x51\x01\x99\x7c\xc5\xbf\x4f\xd1\x14\xb9\x32\x68\xe1\x83\xc7\x6e\x85\xad\x26\x27\x9a\xa3\xdd\xe2\xd8\x3d\x30\xdc\x1b\x3a\x45\x63\x19\x52\x5a\x65\x35\xc3\xf1\xcb\x67\x27\xf7\x30\x30\xbc\x9e\x3e\x0f\x40\xa4\x31\x13\x24\x2b\xb4\x8f\x06\x56\x62\x0d\xf9\x4a\xf2\xf6\x13\x36\xbe\x26\x13\x26\x1d\xd5\x8d\xf9\x82\x5b\xf0\xb9\xa0\x34\xea\xce\xd1\x3f\x3f\xce\xf5\xea\x4b\x91\x95\x18\xf5\xc9\x2f\x71\xcd\xe0\x59\x26\x8c\x81\x63\xa2\xe2\x61\xae\x08\xaf\x68\x33\x00\x80\xd0\xf0\x91\x7d\xd1\x69\x89\xcf\x87\x1d\x0a\xf0\xdc\x15\x88\x1d\xb8\x1a\x1d\xed\x86\xc3\xbe\x3a\x02\xe7\xc5\x76\xd1\xc1\xb6\xf6\x7f\xa7\x6f\x4e\x06\xf6\x74\xb8\x77\x10\x43\xb5\xa7\x60\xeb\x43\x05\xdb\xe5\x50\xc1\x33\x5c\xee\xba\xd7\x43\x5f\x40\x1c\xb4\xd7\xf6\xb5\x51\xf2\x51\x2d\x6a\xd2\x90\x75\xde\x6d\xb9\xed\x72\x97\xbe\x82\x38\x58\x1c\xe7\x93\x81\x7b\x1a\x55\xad\x61\x73\xf6\xa9\xe4\x83\x2a\x2f\x09\x07\x9c\xe0\x63\xa1\x92\x6c\x27\xb4\x42\x4a\xf3\xa4\x93\xb4\x79\xa9\x66\x10\x05\x8b\x3b\x82\xd4\x56\x79\x4f\x9c\x3c\x7f\x48\x0f\xb9\x22\x1e\x1e\x04\x93\x0d\xea\x60\x46\x57\x10\x87\x6f\x22\x0f\x72\x7c\xd1\x8c\xae\x46\x47\xce\xe6\x69\xa9\xdc\x0e\x33\xa8\x2b\xd4\x13\x6b\xf6\xb4\x54\xb5\x53\x91\x24\xda\xc6\xd4\x45\xef\x91\x22\xbd\x76\x76\x78\xb5\x97\xb8\x1e\x57\xdc\x17\x47\x6f\x47\x41\xe1\x15\x05\xcf\xf6\x38\x58\xfa\x74\x8c\x6b\x4c\xd0\xe7\x25\xae\xe3\x65\xd3\x4d\xcb\x17\x07\x61\x61\xbe\x58\x35\xcd\x75\x4e\x9e\x89\x62\xd3\x88\x9c\x5f\x00\x89\x57\x19\x42\x0c\xe7\x87\x1f\x5d\x6c\xb6\x0e\xce\xd9\x34\xf2\x1a\xe3\x0f\x8e\xdc\xca\x17\xa5\x3b\x92\xd9\xb8\x73\xc4\x6a\x81\x99\xe9\x14\x28\x4f\x72\x98\xe9\xdc\x98\xbc\x42\xfd\x54\x22\xdc\x7e\xfb\xcb\xcd\xaf\x7f\xec\x30\x72\x1e\xb1\xe7\x78\x38\x0c\x0a\x9b\x20\x34\xce\xb7\x4d\x89\xbf\x70\x39\xec\x10\xbb\xbb\xb7\x1d\x22\x46\x48\x3f\x64\x51\xff\xb7\x17\xb9\x9d\xd5\x08\x1a\x9c\xeb\x1f\x93\xd8\xa1\x73\x79\x11\x70\xcc\x21\x42\xf8\x5f\x0c\x4a\x66\x1d\x6b\xae\x8c\x70\x55\xb8\x5f\x31\xe0\x51\x0b\xc0\xb7\x5c\xd4\x8c\x7b\x12\x68\xb3\xd4\x46\x67\xee\x52\x39\x16\x26\xad\x67\xb3\x2b\x9d\xb4\xe7\x15\x7a\x6b\x95\x05\x53\x7d\xf0\x80\x17\x84\x5f\xb5\x59\xf6\xc5\xf9\xaf\xc1\xb8\xa8\x40\x90\xc0\xee\x5f\x77\x45\xf6\x57\x66\x8f\x15\x42\x17\x4d\x96\xfb\x2b\xeb\x35\x80\xd8\x87\xdd\x06\xcb\x1a\x1a\x03\x76\xda\xc0\x49\x3c\x38\xf0\x49\xb4\x5c\x80\x99\xc1\x4e\x8f\xa7\x53\xb8\x79\xfb\xf5\xbb\xaf\xbe\x81\xd7\xc9\xf2\x70\xf2\x31\xfc\xf5\xfd\x9f\xef\x7e\xfc\xf9\xe6\xa7\xdf\x6f\xdf\x7e\x77\xfb\xdb\x0f\xf7\xeb\x3b\x79\x5e\xbe\x7e\xfd\x66\x2a\xe1\xa1\xc8\xbb\x61\x81\xbb\xed\x11\x34\xff\x3f\x9b\x77\x9b\x59\xb4\x8b\xd4\x9f\xfa\x3b\xb2\x8a\x3d\x19\xe5\x7c\xfa\x10\xda\x61\x0e\xe5\x1d\x79\xed\xc9\xa5\xbf\x02\x70\xd2\x93\xc5\x76\x62\x78\x26\xd8\xc9\xd5\xb6\xb5\x83\x03\x8b\xad\x5d\x12\x6c\x13\xec\xd9\x1e\x77\x59\xd8\xf6\x64\xcc\x63\x95\xcc\xba\x26\x7c\x18\xb8\x71\x0b\xa4\x33\x79\x8d\x51\xa0\xe3\xeb\x38\x48\xcd\x79\x6c\xbf\x89\x4e\xa4\x5a\x62\x72\x22\x0d\xf9\xf3\xd9\xbd\x78\x9e\x27\xd8\x5c\x17\x81\xb3\x66\x38\xb8\x2f\x9a\x97\x51\xf7\x93\xc5\x96\xb6\x3f\x22\xec\xb2\xc7\xcd\x24\x9a\xbb\xa1\x31\xb3\xe9\x8a\xcd\xa5\x36\x34\x86\x4c\x18\xba\xe3\x8a\x10\x49\xb2\xa7\xce\xcb\x52\x71\xe3\xdf\x63\x0b\x04\xa2\xfc\xf5\x13\xcc\x2d\xfc\xd6\x62\x66\xeb\x89\xd9\xf7\x03\xec\x87\x20\x6b\x47\x8a\xed\xb7\xdf\xba\xa3\x64\xb3\x87\x9a\xf8\x2e\xdd\x4f\xb0\x77\x54\x40\xcf\x59\x91\x94\xab\x22\x0c\x44\x30\x49\x43\x42\x33\xa7\xb5\xdc\xd9\xa3\x6e\xac\x77\x8b\xd6\x9f\x34\x16\xe2\xb2\xdb\x3d\xb6\x3c\xb1\x43\xf4\xed\x9c\xf7\x0f\xed\xdf\x01\x00\x00\xff\xff\xf3\x77\x1d\x28\x3f\x0f\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
