package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xb1\x6e\x1c\x37\x13\xee\xef\x29\xe6\x17\xf0\x1b\x7b\x90\xa0\x8b\x9b\xa4\x10\xb6\x89\x63\x47\x30\x64\x27\x91\x8d\x34\x82\x0a\xea\x76\x4e\x4b\xdf\x1e\x77\x45\x72\xcf\x3a\x1d\x0e\x08\x92\x2a\x95\x81\x04\x79\x80\x00\x29\x92\x26\x4d\xd2\xa4\xc9\xdb\x48\x70\xde\x22\x98\x21\xf7\xc8\xe5\xad\x20\xb8\xcb\x15\xd2\x92\xfc\x38\xf3\xcd\x37\x1f\x97\x3b\x99\x80\x46\xdb\x6a\x05\x42\x6b\xb1\x82\x0a\xd5\xa5\x2d\x47\x52\x59\x7a\xcc\x84\x5a\x9d\x9d\x83\x18\xaf\x37\xa3\x51\x80\x96\xc2\x94\xd3\xba\x40\x86\xd1\x80\x70\x60\x18\xd5\x68\xa9\x6c\xa5\x32\x1a\x08\x63\x50\xdb\xa7\x57\xad\xa8\xdc\xb8\x69\x50\x15\x59\x17\xed\x33\x61\x71\x64\xac\x96\xea\x12\x2e\xd1\x3e\x69\xb5\x46\x65\x5f\xcb\x05\x66\x7e\xd6\xde\x1c\x80\x7f\xac\xc4\xaa\x6e\x6d\x42\xe4\xf9\xab\x2f\x5e\x7a\x40\x17\x88\xa6\x98\x0e\x93\x9e\x4c\x1c\xe6\xaa\x45\xbd\x82\xb7\xd2\x96\xd0\x08\x5b\x8e\x08\x40\x0b\x9f\xa3\xed\x72\xbd\x31\xb5\xda\x66\x23\x10\xe7\xa2\x08\xa5\xb5\x0d\x54\xf2\x82\x9e\x4f\xd1\x34\xb5\x32\xc8\xf0\xd1\x33\xae\x76\xc6\x39\x49\x0b\x12\xa5\x17\x63\x3b\x20\xb8\x27\x74\x8a\x86\x23\x94\x76\x51\x75\x11\x8e\x5f\xbf\x38\x79\x20\x02\xc1\xbb\xf2\x69\x01\x32\x8d\x95\xb0\x72\x89\x3c\x34\xb0\x10\x2b\xa8\x17\x92\x1a\x27\x0a\xda\x61\x2a\x61\xca\x71\x27\xcc\x57\x24\xc1\x97\xc2\x96\x59\x5a\xa3\x1f\x3f\xab\xf5\xe2\x6b\x51\xb5\x98\x0d\xa5\x9f\xe3\x8a\xc0\xd3\x4a\x18\x03\xc7\xd6\x36\x4f\x6a\x65\xf1\xda\xae\x47\x00\x10\x13\x3e\xe2\x89\x44\x12\xd2\x7b\x39\x76\xd8\x08\x4f\xaa\x40\xee\xc0\xcb\xf1\xd1\x76\x39\xd6\xd5\x05\x70\x5c\x58\x45\x07\xdb\xf0\xdf\x44\x37\x97\x06\x76\xf2\x90\x76\x90\xc3\x72\x27\x03\xef\x8f\x33\xb0\xca\x71\x06\x1f\xe1\x6a\xab\xde\x40\xf8\x06\xf2\x48\x5e\xd6\x35\x64\xf2\x56\x6d\xba\xa0\x71\xd4\x59\x2a\x39\xab\x9c\x86\x5f\x42\x1e\x35\xc7\xf1\x24\xe0\x4e\x8e\x65\x97\x83\x7d\xf6\xa9\x54\x05\xe8\xba\xb5\x38\x22\x07\x1f\x0b\x55\x54\xdb\x44\x0b\xb4\x65\x5d\x24\x4e\x9b\xb5\x6a\x0a\x59\xd4\xdc\x31\x94\xbc\xcb\x73\x22\xe7\xf9\xe3\xbd\x47\x3b\xf2\xbd\xfd\xa8\xd8\x68\x1f\x4c\xed\x35\xe4\xf1\x4c\xe6\x41\x2e\x5e\x36\xb5\xd7\xe3\x23\x47\xf3\xb4\x55\xee\x84\x19\xd4\x4b\xd4\x87\x4c\xf6\xb4\x55\x1d\x53\x51\x14\x9a\x6d\xea\xac\xf7\x54\x59\xbd\x72\x74\xa8\xdb\x73\x5c\x1d\x2c\x49\x17\x17\x9e\x57\x41\xe1\xb5\x8d\xc6\xfc\x3a\x98\x7b\x77\x1c\x74\x98\x48\xe7\x39\xae\xf2\x79\x50\x93\xe3\xe5\x91\x59\x28\x5e\xae\x82\xb8\x8e\xc9\x0b\xd1\xac\x43\x92\xb3\x73\xb0\xe2\xa2\x42\xc8\xe1\xec\xf1\xc7\xe7\xeb\x8d\x83\x93\x37\x8d\xbc\xc1\xfc\xa3\x23\xd7\xf9\xa6\xb5\x59\x47\xdc\x31\xa2\x6c\x11\x99\xc9\x04\x6c\x5d\xd4\x30\xd5\xb5\x31\xf5\x12\xf5\x73\x89\x70\xf7\xfd\x6f\xb7\xbf\xff\xb5\xc5\xc8\x59\x46\x9c\xf3\xbd\xbd\x68\x63\x30\x42\x60\xbe\x09\x5b\xfc\xab\x9a\xcc\x0e\xb9\x7b\x6b\xf7\x4d\x44\x08\xe9\x97\x18\xf5\x7f\xbe\x02\xb8\xaa\x31\x04\x9c\xd3\x8f\x82\xf0\xd2\x99\x3c\x0f\x6b\x17\x75\x5d\xc1\x5b\x2d\x2d\x2f\xeb\xae\x2d\x8e\x33\x64\x08\xff\xcb\x41\xc9\x2a\x61\xed\x22\x5a\x5c\x34\xee\x29\x87\x68\x1f\xfd\x66\xb5\x86\x2c\xac\xfb\x20\xd0\x8f\xd2\xd5\x30\x75\xf7\xc8\xb1\x30\x65\x57\xe8\x76\xeb\x61\xbf\xe4\x98\x5b\x6f\x5b\xa4\xc2\xa3\x47\xd4\x2b\x9a\xea\x47\xd9\x4d\x4e\xbf\x80\x71\x2e\x82\xc8\x9c\xe9\xcf\xeb\x34\x13\x95\xb9\x07\x91\xb6\xb3\xfb\x6d\x76\x66\x62\xf1\x02\x87\x70\x10\x86\x77\x76\x0d\x84\xdc\x9f\x14\x76\x25\x53\x3e\x00\x4c\x84\x22\x91\x98\xf2\x40\xe9\x64\xf1\xfd\xfd\x34\x55\xb0\x21\x60\x65\x30\xe9\xd7\x64\x02\xb7\xef\xbe\x7d\xff\xcd\x77\xf0\xa6\x98\x3f\x3e\xfc\x04\xfe\xf9\xf1\xef\xf7\x3f\xff\x7a\xfb\xcb\x9f\x77\xef\x7e\xb8\xfb\xe3\xa7\x87\x99\x3a\xa2\x64\x85\x7e\xe6\x94\x8d\x67\xe2\xff\xd1\xa1\xbb\xc4\xed\x29\x8c\xaa\xf9\xcf\x1e\x2b\xf6\x3f\x72\x3b\x87\x4f\xd0\x3d\xbe\xc7\x01\xbf\x53\x1b\xbd\xa1\x79\x99\x0c\x7e\x8f\xf7\x07\x1a\xed\x6f\x1a\x3c\x1c\xf0\x75\xdf\x5b\x54\x09\x26\x0e\xdc\xa4\x37\x56\x2f\x8e\xef\x0f\xd5\x72\x89\xf6\x95\xbc\xc1\x2c\x62\xe0\x77\x50\x6f\xc3\x9b\x98\xbf\x86\x4e\xa4\x9a\x63\x71\x22\x8d\xf5\x6f\x66\x37\xf1\xb2\x2e\x30\x5c\x14\x51\x9e\xb0\x1c\xdd\x14\x61\x32\x4b\x3f\x56\x78\x6b\xff\xf3\x81\x3b\x91\xc3\xce\x9d\x10\xa8\xac\xd3\x54\x33\xa9\x8d\x3d\x80\x4a\x18\x7b\xcf\xd5\x20\x8a\x62\x27\x37\x75\x6b\x49\x3d\xf9\x00\x4f\x46\x49\xe9\xab\x27\xaa\x2c\xfe\xc6\xa2\xc8\xcc\x89\xa2\xef\x3a\xca\x2f\x41\xd5\xef\x31\xd1\xef\xcf\xba\xb3\xbd\xde\x41\x1d\x7a\x8d\x1e\x0e\xb0\x73\x76\x61\xe0\xf0\x16\xed\xa2\x89\xed\x10\x15\x69\xac\xd0\x14\x93\x29\x27\x87\xc6\xad\x0d\x9e\x99\xee\x53\x86\x21\xce\x87\xe9\x7b\xc4\x07\x76\x88\x21\x2b\x7f\xb8\x65\xff\x0d\x00\x00\xff\xff\xf5\x63\xfc\x48\x71\x0d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
