package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xbd\x6e\x1b\x39\x10\xee\xf7\x29\xe6\x0c\x9c\xb1\x82\x05\xe9\xdc\xdc\x15\xc2\x96\x06\x0e\x86\xe3\x14\x2e\x05\x15\xb4\x76\x24\x31\x5a\x73\x37\x24\xb5\x89\x2c\x08\x08\x92\x2a\x95\x81\x04\x79\x80\x00\x29\x92\x26\x4d\xd2\xa4\xc9\xdb\xd8\x70\xde\x22\x18\x92\x2b\x72\x7f\x04\xc3\x5d\xd8\x68\x39\x33\x9c\xf9\x66\xe6\x1b\x52\xc3\x21\x48\xd4\x2b\x29\x80\x49\xc9\xd6\x90\xa1\x98\xeb\x45\xc4\x85\xa6\xcf\x98\x89\xf5\x78\x02\xac\xb7\xd9\x46\x91\x37\x5d\x30\xb5\x98\xe6\x29\x1a\x33\xda\x90\x1d\x28\x63\x55\x48\x2e\x74\x26\x62\xda\x30\xa5\x50\xea\x93\xe7\x2b\x96\xd9\x7d\x51\xa0\x48\xe3\x86\xb7\xd3\x8b\xa7\xe7\xa0\xb4\xe4\x62\x1e\xd9\x1f\x23\x32\x3e\x6d\xe4\x68\x9a\x31\xa5\xe0\x44\x68\xb9\xde\x44\x00\x00\xa4\x5b\xe2\xba\x5f\xb2\x6c\x85\x23\x23\x32\x5a\x10\xf8\x52\x07\x7b\xe3\x64\xd9\x37\xf6\x65\xbf\xb2\xe9\x59\x27\xb4\x96\xb8\x4e\x96\xa3\xdd\xd6\xf8\x4b\x4a\x2f\x20\x7f\x89\xb0\xfb\x6d\xb4\x75\x48\x9e\xb0\x62\xe3\x83\x8c\x27\xa0\xd9\x65\x86\x90\xc0\xf8\xf8\xdf\xc9\x66\x6b\xcd\xa9\x38\x8a\x5f\x63\xf2\xcf\x28\x32\x82\x62\xa5\xe3\x0a\xb8\x45\x44\xd1\x02\x30\xc3\x21\xe8\x3c\xcd\x61\x2a\x73\xa5\xf2\x12\xe5\x29\x47\xb8\x7b\xfb\xe5\xf6\xeb\x8f\x9d\x0d\x9f\xc5\x84\x39\x39\x38\x08\x0e\xd2\xb2\xd5\xf4\xc8\xb7\xfe\x88\xeb\x12\xb5\x0c\x12\xdb\xb0\x25\xae\x7b\xa3\x9a\x05\x77\x2a\x63\xf5\xb7\xe9\xbe\xc9\xaa\x07\xde\xce\xd6\x8f\x9c\x18\xd5\x98\x4f\xbc\xee\x32\xcf\x33\x78\x21\xb9\x36\x6a\x59\xb5\xc5\x62\x86\x18\xe1\xaf\x04\x04\xcf\x1a\xa8\xad\x47\x8d\x57\x85\xfd\x4a\x20\x38\x47\x6b\x96\x4b\x88\xbd\xde\x39\x81\xba\x97\x2a\x87\xe9\x4a\x4a\x14\xfa\x7f\xa6\x16\x55\xa2\xbb\xa3\x83\x7a\xca\x21\xb6\xda\xb1\xa0\x0a\x87\x87\xd4\x2b\x12\xd5\xbd\xb4\x83\xd3\xf2\x36\x96\x45\x10\x90\xb3\xb9\x5c\x9d\x66\x2c\x53\x7b\x2c\x9a\xed\xac\xd6\xb6\x25\x09\x8b\xe7\x31\xf8\x41\xe8\x3e\x59\x35\x10\x12\x37\x29\x86\x95\x06\x72\x1f\xb0\x51\x28\x2a\x92\x81\xdc\x91\x3a\x51\xfc\xe8\xa8\x19\xca\xd3\x10\x30\x53\xd8\xe8\xd7\x70\x08\xb7\x37\xaf\xef\x5f\xbd\x81\x67\xe9\xf2\x78\xf0\x1f\xfc\x7a\xff\xf3\xfe\xe3\xe7\xdb\x4f\xdf\xef\x6e\xde\xdd\x7d\xfb\xf0\x30\x52\x0b\x94\xa8\x50\x8f\xdc\x44\xe3\x90\xb8\x1f\x1a\xba\x39\xee\xa6\x30\xc8\xe6\x8f\x1d\x2b\xc3\x7f\x34\xed\xec\x9e\xa0\x3d\xbc\xc7\x0e\xbe\x53\x1b\x1d\xa1\x8d\x9a\x08\xbe\x87\xfb\x1d\x8d\x76\xd7\x35\x0e\x3a\x78\x5d\xe7\x16\x65\x82\x0d\x06\x7a\x8b\x2e\x3f\xae\x3f\x94\xcb\x1c\xf5\x05\xbf\xc6\x38\x40\xe0\x4e\x50\x6f\xfd\x4d\x6c\x9e\x90\x33\x2e\x96\x98\x9e\x71\xa5\xdd\xcd\x6c\x05\xe7\x79\x8a\xfe\xa1\x08\xe2\x78\x75\xf0\x52\x78\xa1\x21\x46\x19\x44\x36\x47\x21\x81\xc6\x8b\x00\x09\xb4\xde\x04\x0f\x65\xd3\x0c\x35\xe3\x52\xe9\x3e\x64\x4c\xe9\x3d\x4f\x03\x4b\xd3\x56\x6c\xea\x56\x49\x3d\x79\x04\x27\x83\xa0\x19\x24\x61\x66\x65\xaf\x7e\x1f\x1b\x4c\xe4\xbd\xcd\x28\xa7\x82\xac\xde\x63\x82\x5f\x97\xda\xd9\xde\xb4\xac\x06\xae\x46\x0f\x3b\x68\xcd\x2e\x74\x0c\x6f\xba\xba\x2a\x42\x3a\x04\x49\x2a\xcd\x24\xf9\x34\x90\x1b\x43\x63\x75\x9d\x33\x53\xfd\x49\x31\x26\x96\x87\xcd\x7b\xc4\x39\xb6\x16\x5d\x54\x7e\x3c\x65\x7f\x07\x00\x00\xff\xff\xc6\x9a\x9b\xcd\x6c\x09\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
