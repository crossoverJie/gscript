package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcf\x6e\x1c\xc5\x13\xbe\xef\x53\xd4\x6f\xa5\x5f\x34\x56\xac\x35\xe1\x00\x12\xd6\x1c\x12\x93\xd8\x8a\xf2\xc7\xd8\x06\x0e\x96\x0f\xed\x99\xda\xdd\x8e\x67\xa6\xc7\xdd\x35\x6b\xaf\x57\x96\x10\x9c\x38\x45\x02\xf1\x00\x48\x1c\xe0\xc2\x05\x2e\x5c\x78\x9b\x44\xe1\x2d\x50\x75\xf7\xcc\xf4\xcc\x8e\x15\x1b\x2e\xe4\x10\x79\xbb\xbf\xfa\xea\xdf\xd7\x5d\xd3\x5b\x5b\xa0\x91\x2a\x5d\x80\xd0\x5a\x2c\x21\xc3\x62\x46\xf3\x91\x2c\x88\xff\x8c\x44\xb1\x3c\x3e\x01\xb1\xb1\xba\x1e\x8d\x5a\xe8\x5c\x98\x79\xa2\x52\xb4\x30\xfe\xc1\x38\x30\x16\x55\x6a\x59\x50\x66\x2d\x1b\xbb\xa9\xd2\xb9\x20\x03\x22\x49\x94\x4e\x65\x31\x03\x52\x20\xc0\x2d\x83\x29\x31\x91\x53\x89\x1a\x44\x91\xc2\x85\x96\x84\x86\x01\x86\x44\x91\x0a\x9d\x82\xaa\xa8\xac\x68\xe2\xa8\xa7\x91\x21\xcd\x14\xce\x7a\x13\xd8\xd1\x64\x32\xf9\x27\xbe\x5c\x3a\x06\x68\x8e\xa0\xd1\x54\x19\x31\xde\xf1\x4f\x46\xde\x8f\xb9\x95\x5b\xa8\xfd\x56\xc6\xfa\x9c\x23\xa4\x38\x15\x55\x46\xcd\xce\x54\x69\x90\x64\x40\x95\xa8\x45\x91\x9a\x5b\xa5\x1b\x75\xfc\x08\x63\x50\xd3\xe3\xf3\x4a\x64\xae\xc0\x0f\x5c\x20\xe2\xc3\x3a\x0c\x51\x96\xc8\xdc\xe3\xc5\x98\x49\x39\x0e\x2c\x52\x50\x53\x10\xbe\xc3\x63\x31\x1e\x39\x54\xdd\x5d\xc7\xb1\xe8\x35\xf9\xe9\xe1\xcb\x17\xbe\x16\x75\x29\x78\xa9\xd3\x58\x07\x3a\xaf\x50\x2f\xe1\x42\xd2\x1c\x4a\x41\xf3\x11\x23\x78\x63\x17\xa9\xae\xda\x2b\xa3\x8a\x4d\xcf\x66\x41\x96\x80\x19\xf6\x8e\x8e\xf6\x21\x93\xa7\xfc\xf7\x01\x9a\x52\x15\x06\x2d\x7c\xf4\xc4\x15\xde\x3a\x65\xa1\xb1\xe2\x3a\x1c\xcd\x0f\x86\x33\xa1\xa3\xb0\x0c\x73\xca\xb3\x9a\x61\xef\xe8\xf9\xb3\xf7\x30\x30\xbc\xce\x89\x37\x20\xd2\x98\x09\x92\x0b\xb4\x3f\x0d\xe4\x62\x09\x2a\x97\x7c\x2a\x84\x55\x95\xc9\x84\x99\x6f\xd4\x95\xf9\x8c\x4b\xb0\x2f\x68\x1e\xf5\x73\x6c\x0a\xea\x64\x36\x95\xda\x10\x2c\x44\x56\xa1\x15\x04\xaf\x15\x22\xc7\x14\x12\x95\x97\xaa\xc0\x82\xb8\x59\xbc\x6c\xcb\xda\xc8\xf0\x89\xd2\xf9\x17\x6c\x16\x0d\xc5\x7f\x86\xcb\x7f\xe9\x6d\xff\xe5\xe1\x51\xed\x6b\x5f\x19\xba\xa3\x3f\xd0\x78\x5e\xa1\x21\xd0\xe2\x02\x4e\x55\xba\xac\xb9\x0e\xdc\xfa\x23\x95\x2e\xd7\x6a\x93\x64\xc2\x18\xd8\x23\x2a\x77\x54\x41\x78\x49\xab\x11\x00\x84\x0d\xda\xb6\x0b\x3d\x09\x78\xb5\xda\xad\x00\xcf\x2a\x80\xd8\x81\x17\x1b\xdb\xcd\x76\xa8\x23\x47\xe0\x52\xb1\xaa\x71\xb0\x6b\xfb\x7f\x4f\x27\xce\x0d\xac\xf9\x61\xad\x40\x0c\x8b\x35\x0f\xd6\x3e\xf4\x60\x55\x15\x7a\xf0\x0c\xe7\x8d\x5a\x06\xe8\x4b\x88\x03\x39\xd9\x5a\xb5\x9e\x7c\xb1\xcb\x9a\x34\x64\x9d\xf6\x3b\x66\x9b\xd4\xa7\x5f\x40\x1c\x68\xc9\xc5\xc9\xc0\x35\x1f\x8b\x21\x1f\xe5\x90\x32\x6e\xf4\xd3\xd5\xd1\x2d\x7c\xf1\x7f\x1d\x7f\x3a\x50\xcf\xba\x0f\xd6\x19\xc4\x1d\x89\x0d\xd7\x8b\x81\x75\x3a\xf6\x9a\x78\x24\xf9\xfa\x57\x15\xe1\x68\x4e\x54\xee\x89\x22\xcd\x9a\x7c\x72\xa4\xb9\x4a\x7b\x17\xc5\xb4\x2a\x12\x88\x02\xad\x6e\xc0\xdc\x5a\xf9\xb0\xf8\xe2\xf0\xa3\x6f\xcc\x16\xf1\xf8\x7e\x10\x4b\x60\x07\x09\x5d\x42\x1c\xae\x44\x1e\xe4\xf8\xa2\x84\x2e\x37\xb6\x5d\x98\x07\x55\x01\x1c\x1f\x18\xd4\x0b\xd4\x13\x1b\xec\x41\x55\xd4\x91\x8a\x34\xd5\xf5\x39\x3c\x5c\x1a\xc2\x1c\x94\x01\x51\x4a\x7f\xfa\x8e\x4f\x60\x17\xe9\xe5\xe1\x43\x3d\x33\x11\x03\xbd\xdd\x8e\xca\x73\x51\xa4\x35\x0d\x5f\x09\x4d\xba\x3c\x6c\xf4\x8c\xc1\x5f\xf2\x6c\x7a\x22\xdb\xc2\x4c\x65\x86\x2f\x42\xac\xbd\x59\x36\x81\xcf\x4c\x89\x3a\x67\xa3\x03\xcc\xd5\x62\xcd\x22\xf0\xbd\x8b\x74\x91\x46\xcd\xfd\x6f\x3a\x61\xbb\x1b\xc1\xa5\xb2\x1a\xd5\x85\xdd\x45\xb2\x00\x3d\x33\x93\x40\x1d\xc7\x27\x30\x0b\xb2\xeb\x37\x3d\xc8\x7c\xe0\x0c\x26\xb7\x28\x41\x9f\xb1\x2e\x9b\x03\x33\x24\x24\xe6\xe9\x4b\x84\x05\x49\x55\x7c\x62\xeb\x01\xd2\xf8\x2f\x81\x44\xe6\x22\xb3\xa8\x8b\xbb\x17\xb5\x09\xa3\x6d\x48\x6b\xe4\xd1\x16\xd9\x8b\x46\xdb\x56\x98\xe0\xd6\x67\xb3\x91\x4b\x68\xb8\x4b\x8d\x2b\xdf\xc6\x66\x67\x8d\xda\x0d\x19\x01\x5a\x29\xc2\xd4\x0d\x4d\x76\x02\x89\xd2\xda\xce\xf1\xfa\xe3\x8b\xdd\x27\x95\xd6\x3c\x6c\x52\xa9\x31\x21\xc5\x73\x2d\xe8\xc5\xcc\x4b\x62\xa0\x83\xbc\xde\x9e\x5c\x16\xcc\xa7\x82\x30\xd0\xd2\x8e\x63\x3e\x92\x79\x93\x0e\x5d\x35\xb5\xcc\xc4\x52\x55\x64\xc5\xc6\xf5\xfc\xbc\x90\x97\x2d\x2a\x98\x41\x4c\xca\x14\xab\x5e\x58\xb7\x63\x1f\x88\x3b\x34\x64\x0b\x0f\x0d\xcb\xc8\x01\x55\xbd\x80\xfa\x4c\x36\x60\xba\xea\x95\x60\x47\xe5\xa5\xcc\xf8\x23\xb6\x39\xe9\x90\x56\x79\xf9\xf0\xf0\x28\x6a\xe4\x9d\x86\x87\x8e\x77\x0f\x97\xf9\xa9\xca\xfa\x00\x5f\x80\xc7\x05\xe9\xa5\x73\xcf\x73\xef\x0c\x97\x9b\x56\x59\xce\xb1\xdd\x85\x02\x2f\x29\xf8\x6d\xbf\x04\xcf\xfc\x9c\xdc\xac\x31\x41\x0e\x67\xb8\x8c\xcf\xda\xbb\xd8\xf2\xc5\xc1\xd8\x64\xbe\xb8\x68\x53\x73\x91\x3c\x17\xe5\xaa\x75\x72\x7c\x02\x24\x4e\x33\x84\x18\x8e\x1f\x7c\x74\xb2\xba\xde\x6e\x6a\x67\xe4\x15\xc6\x1f\x6c\xbb\x5b\xa2\xac\xdc\xa7\x32\x07\xee\x22\x62\x6f\x41\x30\x5b\x5b\x40\x2a\x55\x90\x68\x65\x8c\x5a\xa0\x7e\x2a\x11\xde\x7e\xfb\xcb\x9b\x5f\xff\x68\x30\x72\x1a\x71\xcc\xf1\x78\x1c\x18\xb6\xdd\x68\x23\xbf\x6e\x4d\xfc\x0b\x88\xcb\x09\xb1\x7b\x0c\x75\x47\x1c\x23\xa4\xdf\xb2\xa8\xff\xdb\x97\x95\xcd\x6a\x03\x5a\x9c\xab\x1f\x93\xd8\xad\x63\x79\x12\x70\x4c\x21\x42\xf8\x5f\x0c\x85\xcc\x7a\xa1\x39\x33\xc2\xbc\x74\x7f\xc5\x80\xdb\x1d\x00\x7f\xf7\x45\xed\xbe\x27\x81\x2e\x4b\x1d\xa8\x3f\xa7\x7b\xc2\xcc\xeb\x6c\x1a\xd3\x49\x37\xaf\x30\xb6\x8e\x59\x90\xea\xbd\x7b\xdc\x10\x5e\xea\xb2\xac\x3b\xe7\x7f\x2d\xc6\x49\x05\x02\x05\xf6\xff\xf5\x3b\xb2\xde\x99\x35\x56\x08\xa3\x68\xb5\x3c\x6c\x59\xf7\x00\x62\x2f\x76\x2b\x2c\x7f\xd9\x62\xaf\x0c\xac\xc4\xfb\xf7\xbd\x12\x2d\x17\x60\x66\xb0\x57\xe3\xad\x2d\x78\xf3\xfa\xeb\x77\x5f\x7d\x03\xaf\xd2\xb3\x07\x93\x8f\xe1\xaf\xef\xff\x7c\xf7\xe3\xcf\x6f\x7e\xfa\xfd\xed\xeb\xef\xde\xfe\xf6\xc3\xfb\xfd\x3b\xf7\xdc\xbe\x61\xff\x6d\x2a\xe1\xa7\x1b\x9f\x86\x19\x36\xc7\x23\x28\xfe\x7f\x56\xef\x56\xb3\x68\x9b\x34\xac\xfa\x1b\xb4\x8a\x03\x1a\x65\x7d\x7a\x11\xda\x6d\x16\xe5\x0d\x7a\x1d\xd0\xa5\xbf\x87\x71\x32\xa0\xc5\xae\x62\x38\x13\xec\xe9\xea\xba\x73\x82\x83\x10\x3b\xa7\x24\x38\x26\x38\x70\x3c\x6e\x0a\xe1\x7a\x40\x63\x1e\x5b\xc8\xac\x1f\x84\x17\x03\x17\x6e\x86\x74\x28\xaf\x70\x60\xe0\xb2\x90\x82\x51\xc3\xb3\xe6\x99\x2c\xce\x30\x7d\x26\x0d\xf9\xfb\xd9\x2d\xbc\x50\x29\xb6\xe3\x22\x88\xac\xdd\x0e\xe6\x45\xbb\x18\xf5\x1f\x6f\xee\x71\xda\x79\x4e\xd9\xb6\xc7\x6d\x12\xed\x6c\x68\x83\x59\xf5\x9d\xd9\xa7\x2e\xcf\x59\x43\x37\x8c\x08\x91\xa6\x6b\xde\xb9\x2d\x0b\x2e\xfc\x1d\x8e\x40\xe0\x94\xdf\x81\x41\x6e\xe1\xab\x93\x99\xdd\xf3\x3b\x1e\x12\xb0\xdf\x82\xac\x2b\x29\x0e\xbf\xbb\xea\xae\x92\xd5\x1a\x6a\xe2\xab\xf4\x7e\x82\xb5\xab\x02\x06\xee\x0a\xfe\x40\x08\x05\x11\x24\x69\x48\x68\xe6\xb4\x21\xf7\xce\xa8\xdb\x1b\x3c\xa2\xf5\x6b\xc8\x42\x9c\x76\xfb\xd7\x96\x27\x76\x88\xa1\x93\x73\x77\xd1\xfe\x1d\x00\x00\xff\xff\x6a\x82\xa7\xa5\xd0\x14\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
