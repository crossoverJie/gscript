package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x3f\x6f\x13\x31\x14\xdf\xef\x53\x3c\x2a\x51\x25\x6a\x94\xd0\x05\x86\xe8\xc6\x4a\x08\x15\x96\x8e\x51\x06\x37\xf7\x92\x98\xbb\xfa\x0e\xdb\x39\x48\xa3\x48\x08\x26\xa6\x4a\x20\x3e\x00\x12\x03\x2c\x2c\xb0\xb0\xf0\x6d\x5a\x95\x6f\x81\x9e\xed\x8b\x7d\x7f\x22\xe8\x86\x97\xc6\xf6\xfb\xf3\x7b\xef\xf7\x7b\xe7\x8e\x46\x20\x51\xaf\xa4\x00\x26\x25\x5b\x43\x86\x62\xa1\x97\x11\x17\x9a\x7e\xf6\x98\x58\x4f\xa6\xc0\xfa\x9b\x6d\x14\x79\xd3\x25\x53\xcb\x59\x9e\xa0\x31\xa3\x0d\xd9\x81\x32\x56\x85\xe4\x42\x67\xa2\x47\x1b\xa6\x14\x4a\x7d\xf2\x62\xc5\x32\xbb\x2f\x0a\x14\x89\xf9\x19\x45\xb3\x8c\x29\x05\x27\x42\xcb\xf5\x99\x96\x5c\x2c\x36\x11\x00\x00\x45\x4a\x71\x3d\x28\x59\xb6\xc2\xb1\x39\x0a\x6c\x40\xe0\x2b\xdd\x3a\x35\xe9\xd3\x81\xf1\x2d\x07\x75\xfb\xbe\x0d\x4b\x2b\xc5\x75\x9c\x8e\x77\x5b\x93\x21\x2e\xfd\x01\xc5\x8e\x85\xdd\x6f\xa3\xad\x43\xf8\x94\x15\x21\xbe\x20\xf8\x64\x0a\x9a\x9d\x67\x08\x31\x4c\x8e\x1f\x4e\x37\x5b\xeb\x4a\x4d\x51\xfc\x12\xe3\x07\xe3\xc8\x1c\x14\x2b\xdd\xab\xca\xb2\x18\x29\x73\x00\x6c\x34\x02\x9d\x27\x39\xcc\x64\xae\x54\x5e\xa2\x7c\xc2\x11\x6e\xde\x7d\xbd\xfe\xf6\x73\x67\xc3\xe7\x3d\xc2\x1f\x1f\x1c\x04\x8e\xb4\x2c\x27\xbe\x8a\xad\x77\x71\xec\x10\x55\x10\x5b\xa2\x52\x5c\xf7\xc7\x35\x0b\xee\xae\x8c\xd5\x7d\xc3\xba\xa9\xaa\x0f\xde\x2e\xec\x28\x85\x32\x06\x13\x3e\xf5\x16\xe7\x79\x9e\xc1\x4b\xc9\xb5\xb9\x96\x15\x75\x16\x39\xf4\x10\xee\xc5\x20\x78\xd6\xc0\x1e\xc6\xd5\x78\x51\x98\x3d\xc4\x10\x78\xd3\x9a\xe7\x12\x7a\xfe\xde\x85\x82\x7a\xac\xaa\x9e\xd9\x4a\x4a\x14\xfa\x31\x53\xcb\xaa\xe8\x9d\xeb\xb0\x5e\x7e\x88\xb0\xe6\x16\x74\xe4\xf0\x90\x78\xa3\xa3\x7a\x94\x76\x72\x5a\xde\xc6\xaa\x0b\x02\x19\x37\x97\xeb\xd6\x9c\x65\x6a\x8f\x45\x93\xda\x6a\x6d\x5b\x27\x61\xf3\x3c\x06\x3f\x2c\xdd\x9e\x15\x8d\x10\xd7\xa6\xc9\xe8\xd4\x00\x1f\x00\x36\xda\x45\xad\x32\xc0\x3b\x1a\x40\xa2\x3f\x3a\x6a\x26\xf4\xc2\x04\xcc\x14\x36\x58\x1b\x8d\xe0\xfa\xea\xcd\xed\xeb\xb7\xf0\x3c\x49\x8f\x87\x8f\xe0\xf7\x87\x5f\xb7\x9f\xbe\x5c\x7f\xfe\x71\x73\xf5\xfe\xe6\xfb\xc7\x7f\xc5\x6b\xe1\x92\x2c\xea\xf9\x9b\x98\x1c\x1e\xf7\x87\x86\x71\x81\xbb\xe9\x0c\x6a\xfa\xcf\xc7\xcd\x4c\x04\x1a\x82\xbb\x27\x6b\xcf\x24\x60\xc7\x04\x10\xa5\x4e\xe2\xe6\x9a\x24\xbf\x67\x1a\x3a\x48\x77\x4f\x02\x0e\x3b\x94\x5e\x57\x1b\x55\x82\x0d\x4d\x7a\x8b\xae\x38\x8e\x25\xaa\x65\x81\xfa\x8c\x5f\x62\x2f\x40\xe0\x3c\x88\x61\xff\xcd\x36\xcf\xd4\x29\x17\x29\x26\xa7\x5c\x69\xf7\x0d\xb7\x07\xcf\xf2\x04\xfd\x23\x13\xe4\xf1\xd7\xc1\xfb\xe2\x0f\x8d\x3c\xca\x20\xb3\x71\x85\x18\x1a\x6f\x07\xc4\xd0\x7a\x3d\x3c\x94\x4d\x33\xd5\x9c\x4b\xa5\x07\x90\x31\xa5\xf7\x3c\x1c\x2c\x49\x5a\xb9\x89\xad\x92\x38\xb9\x83\x32\x83\xa4\x19\xc4\x61\x65\x65\xbf\xfe\x9d\x36\x98\x28\x7a\x5b\x51\xee\x0a\xb2\x3a\xc7\x04\xbf\x7e\x6a\xe7\x7c\xd3\xb2\x1a\xba\x1e\xfd\x3d\x40\x6b\x82\xa1\x63\x84\x93\xd5\x45\x11\xca\x21\x28\x52\x69\x26\x29\xa6\x81\xdc\x18\x1a\x7b\xd7\x39\x33\xd5\xbf\x2e\xc6\xc4\xea\xb0\xf9\x35\x71\x81\xad\x45\x97\x94\xef\x2e\xd9\x3f\x01\x00\x00\xff\xff\x48\xd2\xfa\x08\x82\x09\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
