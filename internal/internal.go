package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x46\x10\xbd\xeb\x2b\xa6\x06\x1a\x50\x88\x21\x35\x97\xf6\x60\xf0\xd0\xa6\x49\x8c\xc0\x49\x5a\x3b\xe8\xc5\xd0\x61\x2d\x8e\x44\x46\xd4\x92\xde\x1d\x2a\x96\x05\x01\x45\x7b\xea\x29\x40\x8b\x7e\x40\x81\x1e\xda\x4b\x2f\xed\xa5\x97\xfe\x8d\x8d\xf4\x2f\x8a\x99\x5d\x8a\x4b\x8a\x86\x91\x5b\x75\xb0\xc9\xdd\xd9\x37\x6f\xde\xbc\xdd\xe5\x78\x0c\x06\xa9\x32\x1a\x94\x31\x6a\x0d\x39\xea\x39\xa5\x83\x4c\x13\x3f\x46\x4a\xaf\xcf\x27\xa0\x86\x9b\xed\x60\xd0\x84\xa6\xca\xa6\xd3\x22\x41\x09\xe3\x17\x8e\x03\x2b\x51\xa5\xc9\x34\xe5\x3a\xe2\x17\x65\x2d\x1a\x7a\x72\x59\xa9\xdc\xbd\x97\x25\xea\x24\xaa\xd1\xbe\x54\x84\x03\x4b\x26\xd3\x73\x98\x23\x3d\xae\x8c\x41\x4d\xaf\xb3\x25\x46\x7e\x94\xae\x0f\xc1\x3f\xe6\x6a\x5d\x54\x54\x2f\x7d\x86\x04\x85\x05\x65\xe6\x76\xe4\x21\xce\x27\x0c\xf2\xea\xec\x73\x33\xb7\x51\x87\xf0\xf3\xb3\x57\x2f\x3d\x50\x9d\x90\x87\x84\xb6\x14\x37\x1e\xbb\x98\xcb\x0a\xcd\x1a\xde\x66\x94\x42\xa9\x28\x1d\x70\x00\x4f\x3c\x43\xaa\x39\xbd\xb1\x85\xde\xb1\xe2\x20\xc9\xc5\x08\x29\x51\x09\x79\x76\xc1\xcf\xa7\x68\xcb\x42\x5b\x94\xf0\xc1\x53\x51\x65\x26\x39\x59\x33\x16\xaf\x85\xb1\x7b\xe1\x70\x4f\xe8\x14\xad\x20\xa4\xb4\xcc\x6b\x84\xe3\xd7\x2f\x4e\xee\x41\xe0\xf0\xba\x7c\x9e\x80\xc8\x60\xae\x28\x5b\xa1\xbc\x5a\x58\xaa\x35\x14\xcb\x8c\x1b\xac\x12\x5e\x61\x73\x65\xd3\x61\x2d\xcc\xd7\x2c\xc1\x57\x8a\xd2\xa8\x5b\xa3\x7f\x7f\x5a\x98\xe5\x37\x2a\xaf\x30\xea\x4b\xbf\xc0\x35\x07\x4f\x73\x65\x2d\x1c\x13\x95\x8f\x0b\x4d\x78\x45\x9b\x01\x00\x84\x84\x8f\x64\xa0\x23\x09\xeb\xbd\x1a\xba\xd8\x20\x9e\x55\x81\xd8\x05\xaf\x86\x47\xbb\xe9\x50\x57\x07\xe0\xb8\x88\x8a\x2e\x6c\x2b\x7f\x3b\xba\xb9\x34\xb0\x97\x87\xb5\x83\x18\x56\x7b\x19\x64\x7d\x98\x41\x54\x0e\x33\x78\x84\xcb\x9d\x7a\x3d\xf0\x25\xc4\x81\xbc\xa2\x6b\x93\xc9\x5b\xb5\xac\x41\x43\xd4\x59\x57\x72\x51\xb9\x0b\xbf\x82\x38\x68\x8e\xe3\xc9\x81\x7b\x39\x56\x75\x0e\xf1\xd9\x17\x99\x4e\xc0\x14\x15\xe1\x80\x1d\x7c\xac\x74\x92\xef\x12\x2d\x91\xd2\x22\xe9\x38\x6d\x56\xe9\x29\x44\x41\x73\x87\x90\xca\x2a\xcf\x89\x9d\xe7\x8f\x81\x03\x5e\x11\x1f\x3c\x0c\x8a\x0d\xd6\xc1\x94\xae\x20\x0e\x47\x22\x1f\xe4\xf0\xa2\x29\x5d\x0d\x8f\x1c\xcd\xd3\x4a\xbb\x1d\x66\xd1\xac\xd0\x8c\x84\xec\x69\xa5\x6b\xa6\x2a\x49\x8c\xd8\xd4\x59\xef\x89\x26\xb3\x76\x74\xb8\xdb\x0b\x5c\x1f\xae\x58\x17\x07\x2f\xb3\xa0\xf1\x8a\x82\x77\x39\x0e\x16\xde\x1d\x87\x75\x4c\xa0\xf3\x02\xd7\xf1\xa2\x51\x53\xf0\xe2\xc0\x2c\x8c\x17\xeb\x46\x5c\xc7\xe4\x85\x2a\x37\x4d\x92\xf3\x09\x90\xba\xc8\x11\x62\x38\x7f\xf4\xe9\x64\xb3\x75\xe1\xec\x4d\x9b\x5d\x63\xfc\xc9\x91\xeb\x7c\x59\x51\x54\x13\x77\x8c\x38\x5b\x40\x66\x3c\x06\x2a\x92\x02\xa6\xa6\xb0\xb6\x58\xa1\x79\x9e\x21\xdc\xfe\xf0\xfb\xcd\x1f\x7f\xef\x62\xb2\x59\xc4\x9c\xe3\x83\x83\x60\x61\x63\x84\x86\xf9\xb6\x59\xe2\x8f\x74\x36\x3b\xc4\xee\x74\x6f\x9b\x88\x23\x32\x3f\x25\x51\x1f\xcb\x55\x21\x55\x0d\xa1\x89\x73\xfa\x31\x88\x4c\x9d\x67\x93\x66\xee\xa2\x28\x72\x78\x6b\x32\x92\x69\x53\xb7\xc5\x71\x86\x08\xe1\xa3\x18\x74\x96\x77\x58\x3b\x44\xc2\x65\xe9\x9e\x62\x08\xd6\xf1\x6f\x56\x18\x88\x9a\x79\x0f\x02\x6d\x94\xba\x86\xa9\xbb\x6f\x8e\x95\x4d\xeb\x42\x77\x4b\x47\xed\x92\x43\x6e\xad\x65\x81\x0a\x0f\x1e\x70\xaf\x78\xa8\x8d\xb2\x9f\x9c\x7f\x4d\x8c\x73\x11\x04\xe6\xec\xfe\xbc\x4e\x33\x95\xdb\x3b\x22\xba\xed\xac\x7f\xdb\xbd\x91\x50\xbc\x86\x43\xb3\x11\xfa\x57\xd6\x0d\x84\xd8\xef\x14\x71\xa5\x50\x3e\x04\xec\x08\xc5\x22\x09\xe5\x9e\xd2\xd9\xe2\x0f\x1f\x76\x53\x35\x36\x04\xcc\x2d\x76\xfa\x35\x1e\xc3\xcd\xbb\xef\xde\x7f\xfb\x3d\xbc\x49\x16\x8f\x46\x9f\xc1\xbf\x3f\xfd\xf3\xfe\x97\xdf\x6e\x7e\xfd\xeb\xf6\xdd\x8f\xb7\x7f\xfe\x7c\x3f\x53\x47\x94\xad\xd0\xce\xdc\x65\xe3\x99\xf8\x7f\xbc\xe9\xe6\xb8\xdb\x85\x41\x35\xff\xdb\x6d\x25\xfe\x47\x69\x67\xff\x0e\xba\xc3\xf7\xd8\xe3\x77\x6e\xa3\x37\xb4\x4c\xb3\xc1\xef\xf0\x7e\x4f\xa3\xfd\x4d\x83\xa3\x1e\x5f\xb7\xbd\xc5\x95\x60\xc7\x81\xdb\xee\x8d\xd5\xc2\xf1\xfd\xe1\x5a\xe6\x48\x67\xd9\x35\x46\x01\x03\xbf\x82\x7b\xdb\x9c\xc4\xf2\x35\x74\x92\xe9\x05\x26\x27\x99\x25\x7f\x32\xbb\x81\x97\x45\x82\xcd\x45\x11\xe4\x69\xa6\x83\x9b\xa2\x19\x8c\xba\x1f\x2b\xb2\xb4\xfd\xf9\x20\x9d\x88\x61\xef\x4e\x68\xa8\x6c\xba\xa9\x66\x99\xb1\x74\x08\xb9\xb2\x74\xc7\xd5\xa0\x92\x64\x2f\x37\x77\x6b\xc5\x3d\xf9\x00\x4f\x06\x49\xf9\xab\x27\xa8\x2c\xfc\xc6\x62\x64\xe1\xc4\xe8\xfb\x8e\xf2\x53\x90\xb7\x7b\xcc\xf4\xdb\xa3\x6e\x6f\x6f\xf6\xa2\x46\x5e\xa3\xfb\x01\xf6\xf6\x2e\xf4\x6c\xde\xa4\x5a\x96\xa1\x1d\x82\x22\x2d\x29\xc3\x98\x42\xb9\xb3\x69\xdc\x5c\xef\x9e\xa9\x3f\x65\x24\xc4\xf9\xb0\x7b\x8e\x78\x60\x17\xd1\x67\xe5\x0f\xb7\xec\x7f\x01\x00\x00\xff\xff\x28\x0a\x0d\x3f\x99\x0d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
