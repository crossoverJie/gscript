package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x46\x10\xbd\xeb\x2b\xa6\x06\x1a\x50\xb0\x21\x36\x97\xf6\x60\xf0\xd2\x34\xad\x11\x38\x29\xe0\xe4\x66\xf8\xb0\x16\x47\x22\x23\x6a\xc9\xec\x0e\x15\xcb\x82\x80\xa2\x3d\xf5\x14\xa0\x45\x3f\xa0\x40\x0f\xed\xa5\x97\xf6\xd2\x4b\xff\xc6\x46\xfa\x17\xc5\xcc\x2e\xc5\x25\x45\xc1\xc8\x2d\x3c\xd8\xe2\xee\x9b\x99\x37\x33\x6f\x76\x19\xc7\x60\x90\x6a\xa3\x41\x19\xa3\xd6\x50\xa0\x9e\x53\x36\xca\x35\xf1\xcf\x48\xe9\xf5\xe5\x15\xa8\xf1\x66\x3b\x1a\xb5\xd0\x4c\xd9\x6c\x5a\xa6\x28\x30\x7e\x61\x1c\x58\x41\x55\x26\xd7\x54\xe8\x88\x5f\x94\xb5\x68\xe8\xe9\x9b\x5a\x15\xee\xbd\xaa\x50\xa7\x51\xe3\xed\x2b\x45\x38\xb2\x64\x72\x3d\x87\x39\xd2\x93\xda\x18\xd4\xf4\x2a\x5f\x62\xe4\x57\xe9\xf6\x04\xfc\xcf\x42\xad\xcb\x9a\x7a\x44\x9e\xbd\xfc\xf6\x85\x07\x34\x8e\x78\x49\xe8\x08\xe9\x38\x76\x98\x37\x35\x9a\x35\xbc\xcd\x29\x83\x4a\x51\x36\x62\x00\x6f\x7c\x83\xd4\xc4\x7a\x6d\x4b\xbd\x8b\xc6\x20\x89\xc5\x1e\x32\xa2\x0a\x8a\xfc\x9a\x7f\x5f\xa0\xad\x4a\x6d\x51\xe0\xa3\xaf\x25\xdb\x99\xc4\xe4\x5a\x70\x51\x3a\x3e\x76\x2f\x0c\xf7\x84\x2e\xd0\x8a\x87\x8c\x96\x45\xe3\xe1\xec\xd5\xf3\xf3\x07\x3c\x30\x9c\x3d\x4c\x0b\x65\x2d\x9c\x11\x55\x4f\x4a\x4d\x78\x43\x9b\x11\x00\x84\x26\xa7\xb2\xd0\x23\xc5\x19\xaf\xc6\x0e\x1b\xe0\x99\x17\x24\x0e\xbc\x1a\x9f\xee\xb6\xc3\xcc\x9c\x03\x47\x46\xf2\x70\xb0\xad\xfc\xed\x31\x3f\x10\x86\xc9\x43\x02\xab\xbd\x00\x62\x1e\x06\x90\x34\x9b\x00\x52\xaf\x2f\x73\x9d\x82\x29\x6b\xc2\x11\x77\xe2\x4c\xe9\xb4\xd8\x29\x64\x89\x94\x95\x69\xaf\x62\xb3\x5a\x4f\x21\x0a\x4a\x34\x86\x4c\xac\x3c\xb1\x38\x86\x46\xa6\x47\x6c\x91\x1c\x1d\x4b\xc3\x5d\xd8\xc0\x0e\xa6\x74\x03\x49\xb8\x12\x79\x90\xf3\x17\x4d\xe9\x66\x7c\xea\x68\x5e\xd4\xda\x29\xc5\xa2\x59\xa1\x99\x08\xd9\x8b\x5a\x37\x4c\x55\x9a\x1a\x91\x94\x6b\xe0\x53\x4d\x66\xed\xe8\x70\xcd\x16\xb8\x3e\x59\xa9\xa2\x46\xe7\x5e\x76\x41\xe3\x0d\x05\xef\x22\xeb\x85\xaf\xf1\x49\x83\x09\x8a\xbd\xc0\x75\xb2\x68\x4b\x2c\xfe\x92\xa0\xe6\xec\x2f\xd1\x6d\x71\x1d\x93\xe7\xaa\xda\xb4\x41\x2e\xaf\x80\xd4\x75\x81\x90\xc0\xe5\xe3\xcf\xaf\x36\x5b\x07\xe7\x0e\xdb\xfc\x16\x93\xcf\x4e\x47\xb2\x50\xd5\x14\x35\xc4\x1d\x23\x8e\x16\x90\x89\x63\xa0\x32\x2d\x61\x6a\x4a\x6b\xcb\x15\x9a\x67\x39\xc2\xfd\x8f\x7f\xdc\xfd\xf9\xcf\x0e\x93\xcf\x22\xe6\x9c\x1c\x1d\x05\x86\xfc\xb8\xf9\x6e\x99\x6f\x5b\x13\x7f\xe4\xb0\x66\x20\x71\xa7\xcf\x02\xd7\x81\x74\x19\x91\xfb\x2d\x41\x7d\x2a\x47\x99\x64\x35\x86\x16\xe7\xea\xc7\x4e\x64\xeb\x32\xbf\x6a\xf7\xae\xcb\xb2\x80\xb7\x26\x27\xd9\x36\x4d\x5b\x1c\x67\x88\x10\x3e\x49\x40\xe7\x45\x8f\xb5\xf3\x48\xb8\xac\xdc\xaf\x04\x02\x3b\x7e\x66\xa5\x81\xa8\xdd\xf7\x4e\xa0\xeb\xa5\xc9\x61\xea\xce\xc3\x33\x65\xb3\x26\xd1\x9d\xe9\xa4\x9b\x72\xc8\xad\x63\x16\x54\xe1\xd1\x23\xee\x15\x2f\x75\xbd\xec\x07\xe7\xa7\xc5\x38\x15\x41\x20\xce\xfe\xe3\xeb\x34\x53\x85\x3d\x80\xe8\xb7\xb3\x79\xb6\x7b\x2b\x61\xf1\x5a\x0e\xed\x20\x0c\x5b\x36\x0d\x84\xc4\x4f\x8a\xa8\x52\x28\x9f\x00\xf6\x0a\xc5\x45\x12\xca\x03\xa9\xb3\xc4\x8f\x8f\xfb\xa1\x5a\x19\x02\x16\x16\x7b\xfd\x8a\x63\xb8\x7b\xf7\xfd\xfb\xef\x7e\x80\xd7\xe9\xe2\xf1\xe4\x0b\xf8\xef\xe7\x7f\xdf\xff\xfa\xfb\xdd\x6f\x7f\xdf\xbf\xfb\xe9\xfe\xaf\x5f\x1e\x66\xea\x88\xb2\x14\xba\x91\xfb\x6c\x3c\x13\xff\x8f\x87\x6e\x8e\xbb\x29\x0c\xb2\xf9\x68\xc7\x4a\xf4\x8f\xd2\xce\xe1\x09\x3a\xa0\x7b\x1c\xd0\x3b\xb7\xd1\x0b\x5a\xb6\x59\xe0\x07\xb4\x3f\xd0\x68\xff\x01\x81\x93\x01\x5d\x77\xb5\xc5\x99\x60\x4f\x81\x2d\x62\xc8\x8f\xef\x0f\xe7\x32\x47\x7a\x99\xdf\x62\x14\x30\xf0\x16\xdc\xdb\xf6\x24\x96\xef\x8c\xf3\x5c\x2f\x30\x3d\xcf\x2d\xf9\x93\xd9\x2d\xbc\x28\x53\x6c\x2f\x8a\x20\x4e\xbb\x1d\xdc\x14\xed\x62\xd4\xbf\x8b\xc5\xb4\x7b\x0b\x4b\x27\x12\xd8\xbb\x13\x5a\x2a\x9b\x7e\xa8\x59\x6e\x2c\x9d\x40\xa1\x2c\x1d\xb8\x1a\x54\x9a\xee\xc5\xe6\x6e\xad\xb8\x27\x1f\xa0\xc9\x20\x28\x7f\x3c\x04\x99\x85\x5f\x2a\xec\x59\x38\xb1\xf7\x7d\x45\xf9\x2d\x28\xba\x3d\x66\xfa\xdd\x55\x37\xdb\x9b\x3d\xd4\xc4\xd7\xe8\x61\x07\x7b\xb3\x0b\x03\xc3\x9b\xd6\xcb\x2a\x94\x43\x90\xa4\x25\x65\xd8\xa7\x50\xee\x0d\x8d\xdb\x1b\x9c\x99\xe6\x53\x46\x20\x4e\x87\xfd\x73\xc4\x3b\x76\x88\x21\x29\x7f\xb8\x64\xff\x0f\x00\x00\xff\xff\xe1\xf9\xed\x21\x39\x0c\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
