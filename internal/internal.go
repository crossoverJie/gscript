package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x8e\xe3\x44\x10\xbd\xfb\x2b\x8a\x48\xac\x1c\x25\x8a\xd9\x0b\x1c\x46\xbe\x80\x16\x46\xab\x65\x91\x66\x8f\xa3\x39\xf4\xc4\x95\x49\x6f\xbc\x6d\x6f\x77\xdb\x3b\xd9\x28\x12\x82\x13\xa7\x95\x40\x7c\x00\x12\x07\xb8\x70\x81\x0b\x17\xfe\x66\x46\xcb\x5f\xa0\xaa\x6e\xa7\xdb\x8e\xa3\xd5\xdc\xf0\x25\x71\xf5\xab\xaa\x57\x55\xaf\xd2\xc9\x32\xd0\x68\x1b\xad\x40\x68\x2d\xb6\x50\xa2\xba\xb1\xeb\x44\x2a\x4b\x5f\x53\xa1\xb6\x97\x57\x20\xa6\xbb\x7d\x92\x04\xe8\x5a\x98\xf5\xb2\x2a\x90\x61\xf4\x42\x38\x30\x8c\xaa\xb5\x54\xb6\x54\x29\xbd\x08\x63\x50\xdb\x27\xaf\x1b\x51\xba\xf7\xba\x46\x55\xa4\x83\x68\x4f\x5f\x7c\xf3\x1c\x8c\xd5\x52\xdd\x24\xee\x83\x4d\x1c\x93\x33\x67\x99\xc3\xbc\x6e\x50\x6f\xe1\x8d\xb4\x6b\xa8\x85\x5d\x27\x04\xa0\x83\xaf\xd0\xa6\xde\xf1\xa5\xa9\xd4\xdc\x07\x63\x10\xe7\xa2\x08\x6b\x6b\x6b\x28\xe5\x35\x7d\xbf\x40\x53\x57\xca\x20\xc3\x93\x2f\x99\xf2\x8a\x73\x52\x41\x54\x59\x2f\xc6\xe1\x85\xe0\x14\x70\x59\x0a\x63\xe0\xdc\xda\xfa\x8b\x4a\x59\xbc\xb5\xbb\x04\x00\x62\x97\x33\x36\x0c\x42\x12\xdf\x76\xea\xb0\x11\x9e\xa2\x42\xee\xc0\xed\xf4\xec\x70\x9c\x65\x5d\x2f\x27\xe4\x9f\x4f\x60\xc6\x81\x60\x06\x13\x76\x62\x0b\x7b\x93\x85\xd2\xb2\x85\xcb\x0e\x61\xe2\xf2\x1c\x0f\x57\x13\x17\xe3\x60\xfb\x84\x9b\xfc\xb9\x54\x05\xe8\xaa\xb1\x98\x50\xb7\xce\x85\x2a\x4a\x4c\x7b\x8d\x58\x35\x6a\x09\x6d\x25\x8b\x34\xaa\x7e\x0a\x6b\x86\xfa\xd2\xb2\x0c\x0e\xc4\x1d\xa9\x59\x44\x29\xf2\x83\xa5\xbd\x85\x3c\xb6\xa4\x1e\xe4\xe2\xa5\x4b\x7b\x3b\x3d\x73\xdc\x2e\x1a\xe5\x46\x68\x50\xb7\xa8\x17\xcc\xf0\xa2\x51\x1d\x3d\x51\x14\x9a\x67\xed\x66\xf3\x44\x59\xbd\x75\x74\xa8\xeb\x1b\xdc\xce\x5b\x51\x36\xe8\xc2\xf3\x29\x28\xbc\xb5\xd1\x3b\xeb\x6d\xe3\xa7\x34\xef\x30\xd1\xb8\x36\xb8\xcd\x37\xa1\xaf\x1c\x2f\x6f\x83\x81\xe2\xe5\x2a\x74\xd4\x31\xf9\x5a\xd4\xbb\x90\xe4\xf2\x0a\xac\xb8\x2e\x11\x72\xb8\x7c\xfc\xe9\xd5\x6e\xef\xe0\xa4\x11\x23\xdf\x62\xfe\xc9\x59\xc2\x86\xba\xb1\x69\x47\xdc\x31\xa2\x6c\x11\x99\x2c\x03\x5b\x15\x15\x2c\x75\x65\x4c\xd5\xa2\x7e\x2a\x11\xee\x7f\xf8\xfd\xee\x8f\xbf\x0f\x18\xb9\x4a\x89\x73\x3e\x99\x44\x8e\xf4\xb8\xc5\x0b\xcc\xf7\xc1\xc5\x2f\x34\xeb\x2c\x77\xbb\xbd\xc1\x6d\x24\x27\x42\x48\x7f\xc4\xa8\x8f\xf9\x87\x82\xab\x9a\x42\xc0\xb9\xfe\x51\x10\x3e\xba\x94\x57\xe1\xec\xba\xaa\x4a\x78\xa3\xa5\xe5\x63\xdd\x8d\xc5\x71\x86\x14\xe1\xa3\x1c\x94\x2c\x07\xac\x5d\x44\x8b\xaf\x6a\xf7\x2d\x87\xc8\x8f\x9e\x55\xa5\x21\x0d\xe7\x3e\x08\xf4\xa3\x74\x35\x2c\x1b\xad\x51\xd9\x73\x61\xd6\x5d\xa1\x07\xd7\x45\xbf\xe4\x98\x5b\xcf\x2d\xea\xc2\xa3\x47\x34\x2b\x32\xf5\xa3\x1c\x27\xa7\x27\x60\x9c\x8a\x20\x12\xe7\xf0\xf1\x7d\x5a\x89\xd2\x9c\x40\x0c\xc7\xd9\x3d\xfb\x23\x4b\xdc\xbc\xc0\x21\x2c\xc2\xb8\x67\x37\x40\xc8\xfd\xa6\xb0\x2a\x99\xf2\x1c\x70\xd0\x28\x6a\x12\x53\x1e\x29\x9d\x24\x3e\x9b\x0d\x53\x05\x19\x02\x96\x06\x07\xf3\xca\x32\xb8\x7b\xf7\xdd\xfb\x6f\xbf\x87\x97\xc5\xe6\xf1\xe2\x33\xf8\xf7\xa7\x7f\xde\xff\xf2\xdb\xdd\xaf\x7f\xdd\xbf\xfb\xf1\xfe\xcf\x9f\x3f\xcc\xd4\x11\x25\x29\xf4\x33\x0f\xd9\x78\x26\xfe\x83\x96\xee\x06\x0f\x5b\x18\x55\xf3\xbf\x5d\x2b\xd6\x3f\xf2\x38\xc7\x37\xe8\x84\xee\x71\x44\xef\x34\x46\x2f\x68\x3e\x26\x81\x9f\xd0\xfe\xc8\xa0\xfd\xcd\x8e\x8b\x11\x5d\xf7\xb5\x45\x95\xe0\x40\x81\x01\x31\x16\xc7\xcf\x87\x6a\xb9\x41\xfb\x42\xbe\xc5\x34\x62\xe0\x3d\x68\xb6\xe1\x97\x98\xff\x00\x3c\x93\x6a\x83\xc5\x33\x69\xac\xff\x65\x76\x86\xe7\x55\x81\xe1\xa2\x88\xf2\x84\xe3\xe8\xa6\x08\xc6\x74\x78\x9b\xb3\x2b\xe4\x30\xb8\x11\x20\x87\xa3\x3b\x21\x50\xd9\x0d\x53\xad\xa4\x36\x76\x0e\xa5\x30\xf6\xc4\xd5\x20\x8a\xe2\x28\x37\x4d\xab\xa5\x99\x3c\x40\x93\x51\xd2\x12\xf2\xb8\xb2\xf8\x4f\x08\x45\x66\x4e\x14\xfd\x58\x51\xfe\x08\xca\xfe\x8c\x89\x7e\xdf\xea\x76\x7b\x77\x84\x5a\xf8\x1e\x7d\x38\xc0\xd1\xee\xc2\xc8\xf2\x16\xcd\xab\x3a\x96\x43\x54\xa4\xb1\x42\x53\x4c\xa6\x3c\x58\x1a\x77\x36\xba\x33\xdd\x5f\x19\x86\x38\x1d\x0e\x7f\x47\x7c\x60\x87\x18\x93\xf2\xc3\x25\xfb\x5f\x00\x00\x00\xff\xff\x37\xcb\x84\x03\x97\x0b\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
