package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\x1b\xb9\x15\xbf\xeb\x53\xbc\x0a\x68\x20\xad\xbd\xb2\xbd\x87\x16\x58\xef\x2c\x10\xa7\x9b\x18\x8b\x6c\xe2\xda\x6e\x7b\x10\x74\xe0\xcc\x3c\x49\x8c\x67\xc8\x09\xc9\x91\x2d\x0b\x02\x8a\xf6\xd4\xd3\x02\x2d\xfa\x01\x0a\xf4\xd0\x5e\x7a\x69\x2f\xbd\xf4\xdb\x24\xd8\x7e\x8b\xe2\x91\x9c\x19\xce\x1f\x27\x4e\x7b\xa9\x0f\xc9\x88\x7c\xff\xf9\x7b\x7f\xc8\xa3\x23\x50\x68\x4a\x25\x80\x29\xc5\xb6\x90\xa1\x58\x99\xf5\x88\x0b\x43\x9f\x13\x26\xb6\xf3\x05\xb0\xe9\x6e\x3f\x1a\x75\x49\x13\x56\x58\xba\x84\x15\x5d\xba\x44\x16\x1c\x35\x60\x86\x39\x0a\xa3\x61\xa9\x64\x0e\x0c\xb4\x2c\x55\x82\x9e\x9d\x0b\x23\x81\x41\x8a\xda\x70\xc1\x0c\x97\x5e\xee\xcc\x09\x95\xc5\x76\x12\x6f\x0d\xce\x17\x90\x6a\x73\x08\xfe\x5b\xab\xa4\x63\xcc\x9a\xe9\x75\x22\x53\xb4\x6c\xf4\x83\x8c\x01\x6d\xa9\x0a\xc5\x85\xc9\xac\x1b\xb5\x71\x4b\xa9\x72\x66\x34\xb0\x24\x91\x2a\xe5\x62\x05\xd6\x0e\xb7\x0c\xba\xc0\x84\x2f\x39\x2a\x60\x22\x85\x5b\xc5\x0d\x6a\x22\xd0\x86\x89\x94\xa9\x14\x64\x69\x8a\xd2\xcc\x9c\xe8\xe5\x44\x1b\x45\x22\x1c\xf7\x21\x90\xa2\xd9\x6c\xf6\xdf\xe8\x72\xee\x68\x30\x6b\x04\x85\xba\xcc\x0c\xd1\x3b\xf9\xb3\x91\xd7\xa3\x1f\xa5\x16\x2a\xbd\xa5\xb6\x3a\xd7\x08\x29\x2e\x59\x99\x99\x7a\x67\x29\x15\x70\xa3\x41\x16\xa8\x98\x48\xf5\xa3\xdc\x9d\xb4\xf4\x30\xad\x51\x99\x6f\xde\x96\x2c\x73\x01\x3e\x71\x86\xb0\x2f\x1a\x18\x6c\x50\x19\xef\x03\x89\xa5\x43\xac\x4e\xd9\x1f\xa8\x91\x67\x5b\x83\x4f\x69\xad\xf2\xca\x9e\x5d\xc3\xde\x30\x39\xcb\x5a\x01\x31\xf2\xca\x7e\x54\x58\x89\x89\x37\xc9\x98\xd6\xe0\x36\xce\x4a\x9e\xa5\xa8\x76\x23\x00\xa8\x40\x14\x97\x4b\x88\x60\x7e\xbc\xd8\xed\x4f\x47\x76\xe3\xe8\x08\x58\x51\xa0\x48\x21\x91\xc2\xa0\xb0\x41\x88\xcb\xe5\x21\x70\xd3\x3a\x19\x97\x1f\x20\x97\xa0\x2d\x23\x81\xce\x86\xcd\x9b\xd1\xb8\x60\xb7\x03\xa5\x06\xf3\x02\xa2\xb6\xbf\xd3\xd3\x9a\xca\xa9\x9f\x58\x9d\x44\x1a\x6c\x79\xa0\x53\x3e\x06\x3b\x7b\xfb\x6f\xc7\xfa\xf8\xe3\x76\xc7\xb3\xda\xf0\x5f\x91\xe1\x64\x8e\x0e\xc2\x37\x68\x51\x3c\x6c\x4e\x5c\xdb\x62\xff\x5b\x29\x79\x3b\x21\xc1\x22\x10\xc3\x97\x30\x11\xf0\x35\x1c\x4f\xa1\x59\xf4\x56\xdf\xae\x51\x90\x79\x0a\x81\x6b\x10\xd2\x00\x0a\x59\xae\xd6\xa0\x0b\x96\x90\xd1\x4b\x33\x6b\xf1\x90\x30\xaa\x37\x71\xb9\x9c\xc2\xe7\xce\x06\xfa\xfc\x0a\x44\x57\x7c\x10\x7a\x81\xb7\x67\xee\xc8\x2b\x86\x43\xf8\xe2\xb3\x4a\xce\x81\xb0\x38\xe8\xf2\xda\x0a\xe4\x38\x0f\x29\xa4\xd3\x3e\x89\xc3\x91\xa3\x69\xef\xee\xeb\x5f\xfb\xea\x90\x7c\x8c\x3c\x40\x3c\x5c\x82\x38\xf9\xb0\x36\x80\xae\x55\xee\x47\xfb\x51\x0b\xd3\x7a\x57\x1d\x7b\x22\x45\xc2\x0c\x0a\x66\xf3\x76\x8d\x4d\xc9\x95\x4b\x9b\xdf\x4b\xae\xb4\x01\xa6\x56\x25\x2d\x13\x3a\x12\x85\x8c\x12\x0a\xa8\x36\x64\x58\x25\x14\x5c\xaf\x11\x34\x16\x4c\x31\x23\x55\x25\xbf\x82\x33\x16\x74\x40\x45\xc6\x12\x4c\x21\x46\x73\x8b\x28\x1a\x5d\x5c\x3c\x50\xb5\x02\x87\xdf\x48\x2e\x7c\x76\xcc\x17\x96\x55\x1f\x06\xe2\x3b\x80\xa1\x73\xb2\x34\x53\x88\xa2\x3e\x74\x7c\xac\xc6\xe3\x26\xea\xfb\x0f\xf0\x9f\x3c\xc0\x6f\x29\xe6\xc7\x8b\x21\x29\xdd\xf4\x8d\x75\x37\x79\x31\xcc\x51\x8b\x7a\x88\x1c\x22\xf5\x14\x3e\x6b\xd9\xf0\xf9\x49\x40\x4a\xa5\xd7\x66\x09\x8f\x8e\x4f\x81\xc3\x57\xd0\x50\x9e\x02\x3f\x38\xe8\x5a\x5b\x45\x09\x22\x6f\x31\x5f\xb4\xd1\xf6\xa0\x89\x1d\xcc\x92\x81\x02\x0e\x2a\x23\x3f\xe8\x76\xab\x7a\x82\x8e\x21\x6a\x2f\x4d\x02\x76\x1d\xcf\x6c\xea\x8b\x70\xcd\x77\x28\x8b\xbf\x68\x20\xd4\x3a\x9e\x85\x85\xd3\x12\x4e\x7d\x39\x6e\x04\xcc\x17\xa0\x30\x67\x5c\xd4\x32\x4e\xbe\x6c\xc2\xb5\x68\x45\xb5\x1f\x54\xc7\xea\xa3\xda\x09\x6a\x5b\x7d\xfb\x34\x03\x07\x14\x44\xde\x82\x5e\xd8\x3b\x22\xd4\x60\x40\x3d\xd4\x74\x3c\xab\x52\xde\xfb\xd8\xae\xdf\x06\xb5\xd1\x54\x0f\xa9\x1a\xda\x6c\xaa\x4f\x3d\xc6\x15\x17\x1a\x6e\xb9\x59\x43\xa1\x70\xc9\xef\x5c\x62\xc5\x52\x66\x34\xf0\x5c\xd8\xb5\xba\xf3\xd4\x59\xe5\x68\xfb\x8d\xe8\x83\x30\xa9\x68\xba\xad\xca\x0b\x3b\x6d\x61\x24\xec\x04\x7a\x0a\x5f\x7b\xf8\x17\x53\x78\xf2\x24\x28\x64\x7a\x7e\xfc\xa5\xdf\x58\xd8\x7c\x74\xc2\x82\xe2\x56\x37\x30\x0d\xe3\xcd\x98\xaa\x94\xad\x65\x22\xa5\x32\xc6\x7c\xf3\x1f\xb3\xf1\xc8\xf7\x24\x3f\x6e\xba\x79\x63\xd3\x19\x08\xbf\xbd\x7a\xfd\xca\xc7\xa0\x9a\x12\x68\xa9\x35\x04\x3a\xa2\xb7\x25\xaa\xad\x0f\x2c\x33\xeb\x11\x51\xd0\xc6\x0b\x34\x55\x38\xdf\x68\x29\x9a\x88\x32\xb3\xb6\x02\x48\xc2\xf9\xf5\xf5\x05\x64\x3c\xa6\xef\x4b\xd4\x85\x14\x1a\x2d\xf9\xe8\xb9\x1b\xd2\xac\x52\x37\xcb\xa6\xd8\x92\x51\xff\x20\x72\x3f\xec\x5c\xa2\xb6\x12\xd6\x26\xcf\x2a\x09\xe7\xd7\xdf\xbd\xfc\x88\x04\x22\xaf\x7c\xa2\x0d\x98\x28\xcc\x98\xe1\x1b\xb4\x3f\x35\xe4\x6c\x0b\x32\xe7\x34\xce\x33\x3b\x81\xea\x8c\xe9\xf5\xb4\x8a\xcc\xcf\x29\x04\x17\xcc\xac\x27\x5d\x1f\xeb\x80\xba\xc6\xe2\x12\x79\xc3\xb2\x12\x6d\x05\xa3\x35\xc1\x72\xa4\x89\x29\x2f\xa4\xa0\xee\x22\x97\x76\xd9\x86\xb5\x9e\xd0\x9e\x4b\x95\xff\x92\xd8\x26\x43\xf6\xdf\xe0\xf6\x7f\xd4\x76\xf1\xfa\xea\xba\xd2\x75\x21\xb5\xf9\x44\x7d\xa0\xf0\x6d\x89\xda\x80\x62\xb7\x10\xcb\x74\x5b\xc9\xba\x74\xeb\x67\x32\xdd\xf6\x62\xe3\x9a\xf1\xb9\x31\xc5\x33\x1a\x17\xef\xcc\x2e\x6c\x75\x44\xe6\xc0\xdd\x81\x80\x47\x6b\xb7\x46\x12\x0a\x20\x72\xc4\x9b\x20\x17\x43\x1c\x39\x01\xce\x15\x8b\x9a\x70\x08\xec\xe0\xc4\xa9\x81\x9e\x1e\xc2\x0a\x44\xb0\xe9\x69\xb0\xfc\xa1\x06\x8b\xaa\x50\x83\x97\xf0\xb6\x46\xcb\x80\x78\x2a\x19\x0d\x9c\x6c\xac\x7a\x43\x63\x71\x3a\x30\x0b\x2d\xbb\x27\x66\x0f\xa9\x2b\x7e\x03\x51\x80\x25\x67\x27\x11\xf6\x74\x6c\x86\x74\x14\x43\xc8\x78\x50\x4f\x1b\x47\x8f\xd0\x65\xcb\x62\xa8\x4f\x05\xe8\xe9\xeb\x20\x9c\x41\xd4\x82\xd8\x70\xbc\x88\xb0\xa9\x93\x47\x47\x70\xc6\xe9\xaa\x28\x4b\x83\xa3\xb5\x31\xc5\x39\x13\x69\x56\xfb\x93\xa3\x59\xcb\xb4\x53\x28\x96\xa5\x48\x60\x12\x60\x75\x0a\x6b\xcb\x35\xad\xa7\xc8\xea\x9a\x3c\x26\x8e\x68\x7c\x10\xd8\x12\xf0\x41\x62\xee\x20\x0a\x57\xaa\x19\xc0\xc9\x9b\x24\xe6\x6e\x7a\xea\xcc\xbc\x2c\x05\x90\x7d\xa0\x51\x6d\x50\xcd\xac\xb1\x97\x65\x35\x01\x02\x4b\x53\x55\xe5\xe1\xd5\x56\x1b\xcc\x41\x6a\x60\x05\x1f\xd5\x6d\xff\x05\x9a\xd7\x57\x4f\xd5\x4a\x4f\x88\xd0\xf3\x3d\x93\x79\xce\x44\x5a\x89\xa1\x92\x50\xbb\x4b\x17\x53\xb5\x22\x62\x7b\xaf\x79\xce\x9b\xc0\x2c\x79\x86\xaf\x42\x5a\x5b\x59\x0e\xed\xd4\x56\xa0\xca\x89\xe9\x12\x73\xb9\xe9\x71\x04\xba\x5f\xa0\xb9\x4d\x27\x75\xfd\xd7\x2d\xb3\xfd\x78\x6e\xd7\x76\xf5\x9d\xf2\x05\x1a\x4b\xa0\x56\x3a\x1c\x86\xe7\x0b\x58\x05\xde\x75\x0f\x3d\xf0\x7c\x20\x07\x93\x47\x84\xa0\x2b\xb1\x0a\x9b\x23\x26\x92\x50\x30\x75\x5f\x63\x50\x18\x2e\xc5\x97\x36\x1e\x34\xec\xbb\x57\x83\x84\xe7\x2c\xb3\x54\xb7\x9f\x1e\xd4\xda\x8c\xe6\x40\x1a\x26\x4f\x6d\x29\x3b\xd6\x28\x7b\x14\x3a\xa8\xfa\xc4\x36\x72\x0e\x0d\x9f\x52\xad\xca\x1f\x63\xbd\xd3\x13\xed\x9a\x0c\x03\x25\xa5\xc1\xd4\x35\x4d\x52\x02\x89\x54\xca\xf6\xf1\xea\xa1\x86\xd4\x27\xa5\x52\xd4\x6c\x52\xae\x30\x31\x92\xfa\x5a\x70\x16\x2b\x0f\x89\x81\x13\xa4\xf5\xf6\x84\xf3\x33\x66\x30\xc0\xd2\x33\x27\xf9\x9a\xe7\xb5\x3b\xe6\xbe\x8e\x65\xc6\xb6\xb2\x34\x16\x6c\x14\xcf\x5f\x88\x66\xc2\x33\xf7\x41\x0f\x22\xa1\x24\x62\xd7\x31\xeb\x71\xd2\x07\xec\x0e\x19\x89\xc3\x93\x86\x61\x24\x83\xca\x8e\x41\x5d\x49\xd6\x60\x73\xdf\x09\xc1\x33\x99\x17\x3c\x43\x15\x64\x3a\xa4\x65\x5e\x3c\xbd\xba\x9e\xd4\xf0\x4e\xc3\xa4\xa3\xdd\xab\x6d\x1e\xcb\xac\x4b\xe0\x03\xf0\x8d\x30\x6a\xeb\xd4\x53\xdf\xbb\xc1\xed\xa1\x45\x96\x53\x6c\x77\x41\xe0\x9d\x09\x7e\xdb\x49\xf0\xc6\xf7\xc9\xc3\x8a\x26\xf0\xe1\x06\xb7\xd1\x4d\x53\x8b\xad\xbc\x28\x68\x9b\x24\x2f\x12\x8d\x6b\xce\x92\xef\x58\xb1\x6b\x94\xcc\x17\x60\x58\x9c\x21\x44\x30\x3f\xf9\x49\xfd\xc2\x40\xb1\xd3\xfc\x1e\xa3\x63\x7f\x0d\x28\x4a\xf7\xac\x46\x86\x3b\x8b\x48\x5b\x60\x0c\x5d\x0e\x64\x4a\xf7\x76\xa9\xb5\xdc\xa0\xfa\x96\x23\xbc\xff\xdd\x5f\xdf\xfd\xed\x9f\xc1\x95\x77\x42\x36\x47\xe3\xf1\x74\xe8\xa2\x3b\x78\x4b\xf6\xaf\xa5\x14\x4e\x88\xdc\xc3\x69\xbb\xc5\xd9\xdb\x94\xdf\xb2\x54\x3f\x76\x4f\x50\xe4\xd5\x14\x1a\x3a\x17\x3f\x12\x62\xb7\x5a\xd7\x24\xba\x8b\x23\xfc\x28\x02\xc1\xb3\x8e\x69\x8e\xcd\x60\x5e\xb8\xaf\x08\xb0\x7d\xbd\xb2\xf7\xe4\x66\xdf\x0b\x19\x78\xe5\xb1\x93\x8f\x83\xed\x39\xd3\xeb\xca\x9b\x9a\x75\xd6\xf6\x2b\xb4\xad\xc5\x16\xb8\xfa\xe4\x09\x1d\x08\x2d\xb5\xa5\xf4\x95\xd3\x5f\x43\xe3\xa0\x02\x01\x02\xbb\x7f\xdd\x13\xe9\x9f\x4c\x4f\x2a\x84\x56\x34\x58\x1e\xe6\xac\xce\x00\x22\x0f\x76\x0b\x2c\x5f\x6c\xb1\x7b\xc7\xe5\xf7\x78\x70\x10\x5c\xba\xf7\x80\x99\xc6\xfe\x43\xdd\xbb\xef\x7f\xf3\xc3\xaf\x7f\x0b\x6f\xd2\x9b\x93\xd9\x4f\xe1\xdf\x7f\xf8\xd7\x0f\x7f\xfa\xcb\xbb\x3f\xff\xe3\xfd\xf7\xbf\x7f\xff\xf7\x3f\x7e\x5c\xbf\x53\x4f\xc7\x37\xac\xbf\x71\x25\x1c\xdd\x28\x1b\x56\x58\xa7\x47\xeb\x89\xe8\xff\x14\xef\x16\xb3\x68\x0f\x69\x18\xf5\x0f\x60\x15\x07\x30\x4a\xf8\xf4\x20\xb4\xdb\x04\xca\x07\xf0\x3a\x80\xcb\xea\x89\x6b\x36\x80\xc5\x36\x62\xc8\x13\xec\xe0\xaa\xfd\x9a\x16\x98\xd8\xca\x92\x20\x4d\x70\x20\x3d\x1e\x32\x61\x3f\x80\x31\x4f\x2b\x78\xd6\x35\xc2\x83\x81\x02\xb7\x42\x73\xc5\xef\x71\xa0\xe1\x12\x90\x82\x56\x43\xbd\xe6\x25\x17\x37\x98\xbe\xe4\xda\xf8\xfa\xec\x16\x5e\xc9\x14\x9b\x76\x11\x58\xd6\x6c\x07\xfd\xa2\x59\x9c\x74\x2f\x6f\xee\x72\xda\xba\x4e\xd9\x63\x8f\x1a\x27\x9a\xde\xd0\x18\xb3\xeb\x2a\xb3\x57\x5d\xea\xb3\xda\x3c\xd0\x22\x58\x9a\xf6\xb4\xd3\xb1\x6c\x28\xf0\x9f\x90\x02\x81\x52\xba\x07\x06\xbe\x85\xb7\x4e\x92\xec\x5f\xed\x86\x00\x5c\x3d\xe8\x65\x6d\x48\x91\xf9\xed\x55\x57\x4a\x76\x3d\xaa\x99\x8f\xd2\xc7\x05\xf4\x4a\x05\x0c\xd4\x0a\x1a\x10\x42\x40\x04\x4e\x6a\xc3\x14\xc9\xb4\x26\x77\x72\xd4\xed\x0d\xa6\x68\x75\x1b\xb2\x24\x0e\xbb\xbd\xa7\x41\x27\xd8\x51\x0c\x65\xce\xa7\x83\xf6\x3f\x01\x00\x00\xff\xff\x21\xe6\xb8\xcf\x89\x1d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
