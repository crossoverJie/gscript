package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x6f\x1b\x45\x14\xbe\xfb\x57\x3c\x2c\x51\xad\x55\xcb\x26\x1c\xe0\x10\xed\x01\x4a\xdb\xa8\x4a\x5b\x48\x2a\x2e\x51\x0e\x53\xef\xb3\x77\xea\xf5\xec\x66\xe6\xed\x36\x8e\x65\x09\xc1\x89\x53\x25\x10\x3f\x00\x89\x03\x5c\xb8\xc0\x85\x0b\xff\x26\x51\xf9\x17\xe8\xcd\xcc\x7a\x67\xd7\x1b\xa5\xe5\x44\x0e\x91\x77\xe7\x7b\xdf\xf7\xcd\x9b\x6f\x66\x76\x3a\x05\x8d\x54\x6a\x05\x42\x6b\xb1\x86\x0c\xd5\x82\xd2\x81\x54\xc4\x3f\x23\xa1\xd6\x67\xe7\x20\x46\x9b\xed\x60\xd0\x40\x53\x61\xd2\x59\x9e\xa0\x85\xf1\x03\xe3\xc0\x58\x54\xa1\xa5\xa2\xcc\x56\xee\xea\xe6\xb9\x5e\x09\x32\x20\x66\xb3\x5c\x27\x52\x2d\x80\x72\x10\xe0\x5e\x83\x29\x70\x26\xe7\x12\x35\x08\x95\xc0\x6b\x2d\x09\x0d\x03\x0c\x09\x95\x08\x9d\x40\x5e\x52\x51\xd2\xc4\x51\xcf\x23\x43\x9a\x29\x5c\xf5\x18\x58\x68\x32\x99\xfc\x17\x2d\x37\x1d\x03\x94\x22\x68\x34\x65\x46\x8c\x77\xfc\x93\x81\xd7\x31\xef\x24\x0b\xb5\x6e\x69\xac\x66\x8a\x90\xe0\x5c\x94\x19\xed\x46\xe6\xb9\x06\x49\x06\xf2\x02\xb5\x50\x89\x79\xa7\xe9\x46\x2d\x1d\x61\x0c\x6a\x7a\x78\x51\x8a\xcc\x35\xf8\xc0\x19\x11\x1f\xd7\x36\x44\x51\x20\x73\x0f\xab\x21\x93\xb2\x0f\x54\x09\xe4\x73\x10\x7e\x85\x87\x62\x38\x70\xa8\x7a\x75\x1d\x47\x55\x53\x7c\x21\x08\xeb\xc9\x2f\x90\x1e\x94\x5a\xa3\xa2\x17\x72\x85\x75\x0f\xe8\x6a\xec\xbb\x04\x99\x58\xe7\x25\xd5\xa5\x8f\x91\x20\x37\x20\xf4\xc2\xd4\xfd\x3b\x3b\x67\x92\xe7\xa7\x9f\xe9\x85\x89\x3a\x39\x7a\x72\xfa\xfc\x99\x27\xaa\x05\xf9\x55\x93\x9d\xe9\xd4\x61\x2e\x4a\xd4\x6b\x78\x2d\x29\x85\x42\x50\x3a\x60\x00\x0f\x3c\x46\xaa\x3d\xbd\x32\xb9\xda\xb9\x62\x90\xd5\x62\x86\x94\xa8\x80\x4c\xbe\xe4\xdf\x27\x68\x8a\x5c\x19\xb4\xf0\xc1\x23\xb7\xb4\x56\x93\xa3\xcc\x99\x6e\x71\xec\x1e\x18\xee\x0d\x9d\xa0\xb1\x0c\x29\xad\xb2\x9a\xe1\xe8\xc5\xd3\xe3\x3b\x18\x18\x5e\x4f\x9f\x07\x20\xd2\x98\x09\x92\x15\xda\x47\x03\x2b\xb1\x86\x7c\x25\x79\xdf\x09\x9b\x5b\x93\x09\x93\x8e\xea\xc6\x7c\xc5\x2d\xf8\x52\x50\x1a\x75\xe7\xe8\x9f\x1f\xe5\x7a\xf5\xb5\xc8\x4a\x8c\xfa\xe4\x97\xb8\x66\xf0\x2c\x13\xc6\xc0\x11\x51\xf1\x20\x57\x84\x97\xb4\x19\x00\x40\x68\xf8\xd0\xbe\xe8\xb4\xc4\xe7\xc3\x0e\x05\x78\xee\x0a\xc4\x0e\x5c\x8d\x0e\x77\xc3\x61\x5f\x1d\x81\xf3\x62\xbb\xe8\x60\x5b\xfb\xbf\xd3\x37\x27\x03\x7b\x3a\xdc\x3b\x88\xa1\xda\x53\xb0\xf5\xa1\x82\xed\x72\xa8\xe0\x19\x2e\x76\xdd\xeb\xa1\x2f\x20\x0e\xda\x6b\xfb\xda\x28\xf9\xa8\x16\x35\x69\xc8\x3a\xef\xb6\xdc\x76\xb9\x4b\x5f\x41\x1c\x2c\x8e\xf3\xc9\xc0\x3d\x8d\xaa\xd6\xb0\x39\xfb\x5c\xf2\x09\x95\x97\x84\x03\x4e\xf0\x91\x50\x49\xb6\x13\x5a\x21\xa5\x79\xd2\x49\xda\xbc\x54\x33\x88\x82\xc5\x1d\x41\x6a\xab\xbc\x27\x4e\x9e\x3f\x9d\x87\x5c\x11\x0f\xef\x07\x93\x0d\xea\x60\x46\x97\x10\x87\x6f\x22\x0f\x72\x7c\xd1\x8c\x2e\x47\x87\xce\xe6\x49\xa9\xdc\x0e\x33\xa8\x2b\xd4\x13\x6b\xf6\xa4\x54\xb5\x53\x91\x24\xda\xc6\xd4\x45\xef\xa1\x22\xbd\x76\x76\x78\xb5\x97\xb8\x1e\x57\xdc\x17\x47\x6f\x47\x41\xe1\x25\x05\xcf\xf6\x38\x58\xfa\x74\x8c\x6b\x4c\xd0\xe7\x25\xae\xe3\x65\xd3\x4d\xcb\x17\x07\x61\x61\xbe\x58\x35\xcd\x75\x4e\x9e\x8a\x62\xd3\x88\x9c\x9d\x03\x89\x97\x19\x42\x0c\x67\x07\x9f\x9c\x6f\xb6\x0e\xce\xd9\x34\xf2\x0a\xe3\x8f\x0e\xdd\xca\x17\xa5\x3b\x92\xd9\xb8\x73\xc4\x6a\x81\x99\xe9\x14\x28\x4f\x72\x98\xe9\xdc\x98\xbc\x42\xfd\x44\x22\xdc\x7c\xff\xdb\xf5\xef\x7f\xed\x30\x72\x1e\xb1\xe7\x78\x38\x0c\x0a\x9b\x20\x34\xce\xb7\x4d\x89\xbf\x69\x39\xec\x10\xbb\x4b\xb7\x1d\x22\x46\x48\x3f\x64\x51\x1f\xda\x1b\xdc\xce\x6a\x04\x0d\xce\xf5\x8f\x49\xec\xd0\x99\x3c\x0f\x38\xe6\x10\x21\x7c\x10\x83\x92\x59\xc7\x9a\x2b\x23\x5c\x15\xee\x57\x0c\x78\xd8\x02\xf0\xf5\x16\x35\xe3\x9e\x04\xda\x2c\xb5\xd1\x99\xbb\x54\x8e\x84\x49\xeb\xd9\xec\x4a\x27\xed\x79\x85\xde\x5a\x65\xc1\x54\xef\xdd\xe3\x05\xe1\x57\x6d\x96\x7d\x71\xfe\x6b\x30\x2e\x2a\x10\x24\xb0\xfb\xd7\x5d\x91\xfd\x95\xd9\x63\x85\xd0\x45\x93\xe5\xfe\xca\x7a\x0d\x20\xf6\x61\xb7\xc1\xb2\x86\xc6\x80\x9d\x36\x70\x12\xef\xdf\xf7\x49\xb4\x5c\x80\x99\xc1\x4e\x8f\xa7\x53\xb8\x7e\xf3\xed\xdb\x6f\xbe\x83\x57\xc9\xf2\x60\xf2\x29\xfc\xf3\xe3\xdf\x6f\x7f\xfe\xf5\xfa\x97\x3f\x6f\xde\xfc\x70\xf3\xc7\x4f\x77\xeb\x3b\x79\x5e\xbe\x7e\xfd\x66\x2a\xe1\xa1\xc8\xbb\x61\x81\xbb\xed\x11\x34\xff\x7f\x9b\x77\x9b\x59\xb4\x8b\xd4\x9f\xfa\x5b\xb2\x8a\x3d\x19\xe5\x7c\xfa\x10\xda\x61\x0e\xe5\x2d\x79\xed\xc9\xa5\xbf\x02\x70\xd2\x93\xc5\x76\x62\x78\x26\xd8\xc9\xd5\xb6\xb5\x83\x03\x8b\xad\x5d\x12\x6c\x13\xec\xd9\x1e\xb7\x59\xd8\xf6\x64\xcc\x63\x95\xcc\xba\x26\x7c\x18\xb8\x71\x0b\xa4\x53\x79\x85\x51\xa0\xe3\xeb\x38\x48\xcd\x79\x6c\xbf\x89\x8e\xa5\x5a\x62\x72\x2c\x0d\xf9\xf3\xd9\xbd\x78\x96\x27\xd8\x5c\x17\x81\xb3\x66\x38\xb8\x2f\x9a\x97\x51\xf7\x93\xc5\x96\xb6\x3f\x22\xec\xb2\xc7\xcd\x24\x9a\xbb\xa1\x31\xb3\xe9\x8a\xcd\xa5\x36\x34\x86\x4c\x18\xba\xe5\x8a\x10\x49\xb2\xa7\xce\xcb\x52\x71\xe3\xdf\x63\x0b\x04\xa2\xfc\xf5\x13\xcc\x2d\xfc\xd6\x62\x66\xeb\x89\xd9\xf7\x03\xec\x87\x20\x6b\x47\x8a\xed\xb7\xdf\xba\xa3\x64\xb3\x87\x9a\xf8\x2e\xdd\x4d\xb0\x77\x54\x40\xcf\x59\x91\x94\xab\x22\x0c\x44\x30\x49\x43\x42\x33\xa7\xb5\xdc\xd9\xa3\x6e\xac\x77\x8b\xd6\x9f\x34\x16\xe2\xb2\xdb\x3d\xb6\x3c\xb1\x43\xf4\xed\x9c\xf7\x0f\xed\xbf\x01\x00\x00\xff\xff\x34\x4d\x02\x10\x38\x0f\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
