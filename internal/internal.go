package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\x1c\x49\x15\xbf\xcf\xa7\x78\x58\x22\x9a\x59\x7b\xc7\xf6\x1e\x40\x5a\x6f\xaf\x94\x84\x4d\xa2\x55\x36\x09\xb6\x81\xc3\x68\x0e\xd5\xdd\xaf\x67\x2a\xee\xae\xea\x54\x55\xcf\x64\x3c\x1a\x09\xc1\x89\xd3\x4a\x20\x3e\x00\x12\x07\xb8\x70\x81\x0b\x17\xbe\x4d\xa2\xe5\x5b\xa0\x57\x55\xdd\x5d\xfd\xc7\x89\x03\x17\x72\x88\xc6\x55\xef\xff\xfb\xbd\x3f\xd5\xa7\xa7\xa0\xd0\x54\x4a\x00\x53\x8a\xed\x20\x47\xb1\x32\xeb\x09\x17\x86\x7e\x4e\x99\xd8\x2d\x96\xc0\x66\xfb\xc3\x64\xd2\x27\x4d\x58\x69\xe9\x12\x56\xf6\xe9\x12\x59\x72\xd4\x80\x39\x16\x28\x8c\x86\x4c\xc9\x02\x18\x68\x59\xa9\x04\x3d\x3b\x17\x46\x02\x83\x14\xb5\xe1\x82\x19\x2e\xbd\xdc\xb9\x13\x2a\xcb\xdd\x34\xde\x19\x5c\x2c\x21\xd5\xe6\x04\xfc\x6f\xad\x92\x9e\x31\x6b\xa6\xd7\x89\x4c\xd1\xb2\xd1\x1f\x64\x0c\x68\x4b\x55\x2a\x2e\x4c\x6e\xdd\x68\x8c\xcb\xa4\x2a\x98\xd1\xc0\x92\x44\xaa\x94\x8b\x15\x58\x3b\xdc\x31\xe8\x12\x13\x9e\x71\x54\xc0\x44\x0a\x5b\xc5\x0d\x6a\x22\xd0\x86\x89\x94\xa9\x14\x64\x65\xca\xca\xcc\x9d\xe8\x6c\xaa\x8d\x22\x11\x8e\xfb\x04\x48\xd1\x7c\x3e\xff\x6f\x74\x39\x77\x34\x98\x35\x82\x42\x5d\xe5\x86\xe8\x9d\xfc\xf9\xc4\xeb\xd1\xf7\x52\x0b\xb5\xde\x4a\x5b\x9d\x6b\x84\x14\x33\x56\xe5\xa6\xb9\xc9\xa4\x02\x6e\x34\xc8\x12\x15\x13\xa9\xbe\x97\xbb\xd3\x8e\x1e\xa6\x35\x2a\xf3\xcd\x9b\x8a\xe5\x2e\xc0\xe7\xce\x10\xf6\x45\x0b\x83\x0d\x2a\xe3\x7d\x20\xb1\x94\xc4\x3a\xcb\x3e\xa1\x46\x3e\xda\x19\x7c\x48\x67\xb5\x57\x36\x77\x2d\x7b\xcb\xe4\x2c\xeb\x04\xc4\xc8\x2b\xfb\xa3\xc6\x4a\x4c\xbc\x49\xce\xb4\x06\x77\xf1\xa8\xe2\x79\x8a\x6a\x3f\x01\x80\x1a\x44\x71\x95\x41\x04\x8b\xb3\xe5\xfe\x70\x31\xb1\x17\xa7\xa7\xc0\xca\x12\x45\x0a\x89\x14\xc6\x62\x96\xcc\xad\xb2\x13\xe0\xa6\x93\x1a\x57\x20\x20\x33\xd0\x96\x93\x50\x67\xe3\xe6\xed\x68\x7d\xb0\xd7\x81\x56\x83\x45\x09\x51\xd7\xe1\xd9\x45\x43\xe5\xf4\x4f\xad\x4e\x22\x0d\xae\x3c\xd2\xa9\x20\x83\x9b\x83\xfd\xbf\x67\x7e\xfc\x71\xbb\xe3\x79\x63\xf8\xaf\xc8\x70\x32\x47\x07\xf1\x1b\xb5\x28\x1e\x37\x27\x6e\x6c\xa9\xed\xf0\xa5\x4f\x2a\xe3\x2a\xcb\x50\x39\xc8\x0b\xdc\x3a\xb5\x2b\x25\xb7\x53\xd2\x2d\x02\x4d\x3c\x83\xa9\x80\xaf\xe1\x6c\x06\xed\xa1\x17\xb8\x5d\xa3\x20\x71\x0a\x81\x6b\x10\xd2\x00\x0a\x59\xad\xd6\xa0\x4b\x96\x90\x5f\x99\x99\x77\x78\x48\x18\xf5\xa4\xb8\xca\x66\xf0\xb9\x33\x93\x7e\x7e\x05\xa2\x2f\x3e\xc8\x8e\xc0\xed\x23\x07\x8b\x9a\xe1\x04\xbe\xf8\xac\x96\x73\x2c\x2c\x56\xfa\xbc\xb6\x4b\x39\xce\x13\x72\x77\x36\x24\x71\x58\x73\x34\xdd\xdb\x43\xf3\xd7\xa1\xce\xa3\x0f\xa3\xc7\x90\x47\x54\x10\x27\x1f\xf9\x16\xf4\x8d\xca\xc3\xe4\x30\xe9\xe0\x5e\xef\xdb\x8c\x88\x84\x19\x14\xcc\xf8\xbc\x34\x6d\x59\x66\xb6\x07\x64\x5c\x69\x03\x4c\xad\x2a\x3a\xa6\x7c\x25\x0a\x19\x15\x1d\x50\xff\xc8\xb1\x2e\x3a\xb8\x5e\x23\x68\x2c\x99\x62\x46\xaa\x5a\x7e\x8d\x78\x2c\x29\x41\x65\xce\x12\x4c\x21\x46\xb3\x45\x14\xad\x2e\x2e\xee\xe8\x6c\x81\xc3\xaf\x25\x17\xbe\x80\x16\x4b\xcb\xaa\x4f\x02\xf1\x3d\xc0\x50\x9e\x2c\xcd\x0c\xa2\x68\x08\x1d\x1f\xab\xa3\xa3\x36\xea\x87\x0f\xf0\x9f\xdf\xc1\x6f\x29\x16\x67\xcb\x31\x29\xfd\x0a\x8f\x75\xbf\xbe\x31\x2c\x63\x8b\x7a\x88\x1c\x22\xf5\x0c\x3e\xeb\xd8\xf0\xf9\x79\x40\x4a\xed\xd9\x56\x09\x8f\xce\x2e\x80\xc3\x57\xd0\x52\x5e\x00\x3f\x3e\xee\x5b\x5b\x47\x09\x22\x6f\x31\x5f\x76\xd1\x76\xa7\x89\x3d\xcc\x92\x81\x02\x8e\x6b\x23\x3f\xe8\x76\xa7\xc3\x82\x8e\x21\xea\x1e\x4d\x03\x76\x1d\xcf\x6d\xe9\x8b\xf0\xcc\x4f\x31\x8b\xbf\x68\x24\xd4\x3a\x9e\x87\xbd\xd5\x12\xce\x7c\xcb\x6e\x05\x2c\x96\xa0\xb0\x60\x5c\x34\x32\xce\xbf\x6c\xc3\xb5\xec\x44\x75\x18\x54\xc7\xea\xa3\xda\x0b\x6a\x57\x7d\x37\x9b\x81\x03\x0a\x22\x6f\xc1\x20\xec\x3d\x11\x6a\x34\xa0\x1e\x6a\x3a\x9e\xd7\x25\xef\x7d\xec\xb6\x78\x83\xda\x68\xea\x87\xd4\x0d\x6d\x35\x35\x59\x8f\x71\xc5\x85\x86\x2d\x37\x6b\x28\x15\x66\xfc\xad\x2b\xac\x58\xca\x9c\x96\xa2\x57\xf6\xac\x19\x4e\x4d\x55\x39\xda\xe1\xac\xfa\x20\x4c\x6a\x9a\xfe\x34\xf3\xc2\x2e\x3a\x18\x09\x87\x85\x9e\xc1\xd7\x1e\xfe\xe5\x0c\x1e\x3c\x08\x1a\x99\x5e\x9c\x7d\xe9\x2f\x96\xb6\x1e\x9d\xb0\xa0\xb9\x35\x33\x4e\xc3\xd1\xe6\x88\xba\x94\xed\x65\x22\xa5\x36\xc6\xfc\x82\x70\xc4\x8e\x26\x7e\x6c\xf9\x95\xd4\xed\x24\x9b\xde\xd2\xf8\xed\xd5\xcb\x17\x3e\x06\xf5\x26\x41\x47\x9d\x45\xd1\x11\xbd\xa9\x50\xed\x7c\x60\x99\x59\x4f\x88\x82\x2e\x9e\xa2\xa9\xc3\xf9\x5a\x4b\xd1\x46\x94\x99\xb5\x15\x40\x12\x9e\x5d\x5f\xbf\x82\x9c\xc7\xf4\xfb\x12\x75\x29\x85\x46\x4b\x3e\x79\xe2\x16\x39\xab\xd4\xed\xbb\x29\x76\x64\x34\x7f\x10\xb9\x5f\x88\x2e\x51\x5b\x09\x6b\x53\xe4\xb5\x84\x67\xd7\xdf\x3d\xff\x88\x04\x22\xaf\x7d\xa2\x0b\x98\x2a\xcc\x99\xe1\x1b\xb4\x7f\x6a\x28\xd8\x0e\x64\xc1\x69\xe5\x67\x76\x4b\xd5\x39\xd3\xeb\x59\x1d\x99\x9f\x53\x08\x5e\x31\xb3\x9e\xf6\x7d\x6c\x02\xea\x06\x8b\x2b\xe4\x0d\xcb\x2b\xb4\x1d\x8c\xce\x04\x2b\x90\xb6\xaa\xa2\x94\x82\xa6\x8b\xcc\xec\xb1\x0d\x6b\xb3\xc5\x3d\x91\xaa\xf8\x25\xb1\x4d\xc7\xec\xbf\xc1\xdd\xff\xa8\xed\xd5\xcb\xab\xeb\x5a\xd7\x2b\xa9\xcd\x27\xea\x03\x85\x6f\x2a\xd4\x06\x14\xdb\x42\x2c\xd3\x5d\x2d\xeb\xd2\x9d\x3f\x92\xe9\x6e\x10\x1b\x37\x8c\x9f\x19\x53\x3e\xa6\x95\xf2\xad\xd9\x87\xa3\x8e\xc8\x1c\xb8\x7b\x10\xf0\x68\xed\xf7\x48\x42\x01\x44\x8e\x78\x13\xd4\x62\x88\x23\x27\xc0\xb9\x62\x51\x13\xee\x89\x3d\x9c\x38\x35\x30\xd0\x43\x58\x81\x08\x36\x03\x0d\x96\x3f\xd4\x60\x51\x15\x6a\xf0\x12\xde\x34\x68\x19\x11\x4f\x2d\xa3\x85\x93\x8d\xd5\x60\xaf\x2c\x2f\x46\x76\xa1\xac\x9f\x31\x9b\xa4\xbe\xf8\x0d\x44\x01\x96\x9c\x9d\x44\x38\xd0\xb1\x19\xd3\x51\x8e\x21\xe3\x4e\x3d\x5d\x1c\xdd\x43\x97\x6d\x8b\xa1\x3e\x15\xa0\x67\xa8\x83\x70\x06\x51\x07\x62\xe3\xf1\x22\xc2\xb6\x4f\x9e\x9e\xc2\x23\x4e\xcf\x49\x59\x19\x9c\xac\x8d\x29\x9f\x31\x91\xe6\x8d\x3f\x05\x9a\xb5\x4c\x7b\x8d\x22\xab\x44\x02\xd3\x00\xab\x33\x58\x5b\xae\x59\xb3\x45\xd6\x4f\xe9\x23\xe2\x88\x8e\x8e\x03\x5b\x02\x3e\x48\xcc\x5b\x88\xc2\x93\x7a\x07\x70\xf2\xa6\x89\x79\x3b\xbb\x70\x66\x5e\x56\x02\xc8\x3e\xd0\xa8\x36\xa8\xe6\xd6\xd8\xcb\xaa\xde\x00\x81\xa5\xa9\xaa\xeb\xf0\x6a\xa7\x0d\x16\x20\x35\xb0\x92\x4f\x9a\xb1\xff\x14\xcd\xcb\xab\x87\x6a\xa5\xa7\x44\xe8\xf9\x1e\xcb\xa2\x60\x22\xad\xc5\x50\x4b\x68\xdc\xa5\xc7\xab\x5a\x11\xb1\x7d\xfa\x3c\xe1\x6d\x60\x32\x9e\xe3\x8b\x90\xd6\x76\x96\x13\xbb\xb5\x95\xa8\x0a\x62\xba\xc4\x42\x6e\x06\x1c\x81\xee\xa7\x68\xb6\xe9\xb4\xe9\xff\xba\x63\xb6\x5f\xcf\xed\xd9\xbe\x79\x30\x3d\x45\x63\x09\xd4\x4a\x87\xcb\xf0\x62\x09\xab\xc0\xbb\x7e\xd2\x03\xcf\x47\x6a\x30\xb9\x47\x08\xfa\x12\xeb\xb0\x39\x62\x22\x09\x05\xd3\xf4\x35\xf4\x30\xe6\x52\x7c\x69\xe3\x41\xcb\xbe\xfb\xb2\x90\xf0\x82\xe5\x96\x6a\xfb\xe9\x41\x6d\xcc\x68\x13\xd2\x32\x79\x6a\x4b\xd9\xb3\x46\xd9\x54\xe8\xa0\xeb\x13\xdb\xc4\x39\x34\x9e\xa5\x46\x95\x4f\x63\x73\x33\x10\xed\x86\x0c\x03\x25\xa5\xc1\xd4\x0d\x4d\x52\x02\x89\x54\xca\xce\xf1\xfa\x63\x0e\xa9\x4f\x2a\xa5\x68\xd8\xa4\x5c\x61\x62\x24\xcd\xb5\x20\x17\x2b\x0f\x89\x91\x0c\xd2\x79\x77\xc3\xf9\x19\x33\x18\x60\xe9\xb1\x93\x7c\xcd\x8b\xc6\x1d\x73\xdb\xc4\x32\x67\x3b\x59\x19\x0b\x36\x8a\xe7\x2f\x44\xbb\xe1\x99\xdb\x60\x06\x91\x50\x12\xb1\xef\x99\x75\x3f\xe9\x23\x76\x87\x8c\xc4\xe1\x49\xc3\x30\x92\x41\x55\xcf\xa0\xbe\x24\x6b\xb0\xb9\xed\x85\xe0\xb1\x2c\x4a\x9e\xa3\x0a\x2a\x1d\xd2\xaa\x28\x1f\x5e\x5d\x4f\x1b\x78\xa7\x61\xd1\xd1\xed\xd5\xae\x88\x65\xde\x27\xf0\x01\xf8\x46\x18\xb5\x73\xea\x69\xee\xdd\xe0\xee\xc4\x22\xcb\x29\xb6\xb7\x20\xf0\xad\x09\xfe\xb6\x9b\xe0\x8d\x9f\x93\x27\x35\x4d\xe0\xc3\x0d\xee\xa2\x9b\xb6\x17\x5b\x79\x51\x30\x36\x49\x5e\x24\x5a\xd7\x9c\x25\xdf\xb1\x72\xdf\x2a\x59\x2c\xc1\xb0\x38\x47\x88\x60\x71\xfe\x93\xe6\x0b\x03\xc5\x4e\xf3\x5b\x8c\xce\xfc\x33\xa0\xac\xdc\xa7\x37\x32\xdc\x59\x44\xda\x02\x63\xe8\x71\x20\x53\x7a\xb7\x4b\xad\xe5\x06\xd5\xb7\x1c\xe1\xfd\xef\xfe\xfa\xee\x6f\xff\x0c\x9e\xbc\x53\xb2\x39\x3a\x3a\x9a\x8d\x3d\x74\x47\x5f\xc9\xfe\x8b\x2a\x85\x13\x22\xf7\x71\xb5\x3b\xe2\xec\x6b\xca\x5f\x59\xaa\x1f\xbb\xaf\x54\xe4\xd5\x0c\x5a\x3a\x17\x3f\x12\x62\xaf\x3a\xcf\x24\x7a\x8b\x23\xfc\x28\x02\xc1\xf3\x9e\x69\x8e\xcd\x60\x51\xba\x5f\x11\x60\xf7\x79\x65\xdf\xc9\xed\xbd\x17\x32\xf2\x95\xc7\x6e\x3e\x0e\xb6\xcf\x98\x5e\xd7\xde\x34\xac\xf3\xae\x5f\xa1\x6d\x1d\xb6\xc0\xd5\x07\x0f\x28\x21\x74\xd4\x95\x32\x54\x4e\xff\x5a\x1a\x07\x15\x08\x10\xd8\xff\xd7\xcf\xc8\x30\x33\x03\xa9\x10\x5a\xd1\x62\x79\x9c\xb3\xce\x01\x44\x1e\xec\x16\x58\xbe\xd9\x62\xff\x8d\xcb\x6f\xf1\xf8\x38\x78\x74\x1f\x00\x73\x8d\xc3\x0f\x75\xef\xbe\xff\xcd\x0f\xbf\xfe\x2d\xbc\x4e\x6f\xce\xe7\x3f\x85\x7f\xff\xe1\x5f\x3f\xfc\xe9\x2f\xef\xfe\xfc\x8f\xf7\xdf\xff\xfe\xfd\xdf\xff\xf8\x71\xfd\x4e\x3d\xa5\x6f\x5c\x7f\xeb\x4a\xb8\xba\x51\x35\xac\xb0\x29\x8f\xce\x27\xa2\xff\x53\xbc\x5b\xcc\xa2\x4d\xd2\x38\xea\xef\xc0\x2a\x8e\x60\x94\xf0\xe9\x41\x68\xaf\x09\x94\x77\xe0\x75\x04\x97\xf5\x27\xae\xf9\x08\x16\xbb\x88\x21\x4f\xb0\x87\xab\xee\xd7\xb4\xc0\xc4\x4e\x95\x04\x65\x82\x23\xe5\x71\x97\x09\x87\x11\x8c\x79\x5a\xc1\xf3\xbe\x11\x1e\x0c\x14\xb8\x15\x9a\x2b\x7e\x8b\x23\x03\x97\x80\x14\x8c\x1a\x9a\x35\xcf\xb9\xb8\xc1\xf4\x39\xd7\xc6\xf7\x67\x77\xf0\x42\xa6\xd8\x8e\x8b\xc0\xb2\xf6\x3a\x98\x17\xed\xe1\xb4\xff\x78\x73\x8f\xd3\xce\x73\xca\xa6\x3d\x6a\x9d\x68\x67\x43\x6b\xcc\xbe\xaf\xcc\x3e\x75\x69\xce\x6a\x73\xc7\x88\x60\x69\x3a\xd0\x4e\x69\xd9\x50\xe0\x3f\xa1\x04\x02\xa5\xf4\x0e\x0c\x7c\x0b\x5f\x9d\x24\xd9\x7f\xb5\x1b\x03\x70\xfd\x41\x2f\xef\x42\x8a\xcc\xef\x9e\xba\x56\xb2\x1f\x50\xcd\x7d\x94\x3e\x2e\x60\xd0\x2a\x60\xa4\x57\xd0\x82\x10\x02\x22\x70\x52\x1b\xa6\x48\xa6\x35\xb9\x57\xa3\xee\x6e\xb4\x44\xeb\xd7\x90\x25\x71\xd8\x1d\x7c\x1a\x74\x82\x1d\xc5\x58\xe5\x7c\x3a\x68\xff\x13\x00\x00\xff\xff\x13\x6a\x26\x1b\xad\x1d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
