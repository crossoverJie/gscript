package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xbd\x6e\x1c\xb7\x16\xee\xf7\x29\xce\x5d\xe0\x1a\x23\x58\x58\x5d\xdf\xe2\x5e\x20\xc2\x14\xb1\x63\x5b\x30\xfc\x17\xc9\x48\x0a\x41\x05\xbd\x73\x76\x87\xd6\x0c\x39\x22\xcf\xac\xb4\x5e\x08\x08\x92\x2a\x95\x81\x04\x79\x80\x00\x29\x92\x26\x4d\xd2\xa4\xc9\xdb\xd8\x70\xde\x22\x38\x24\x67\x86\x33\x3b\x82\xa5\xa4\x89\x0a\x61\x97\xfc\xce\x77\xfe\x3e\x1e\x72\xf7\xf6\xc0\x20\xd5\x46\x81\x30\x46\xac\xa1\x40\xb5\xa4\x7c\x22\x15\xf1\xc7\x44\xa8\xf5\xf1\x09\x88\x9d\xcd\xe5\x64\xd2\x41\x73\x61\xf3\xb9\xce\xd0\xc1\xf8\x0b\xe3\xc0\x3a\x54\x65\xa4\xa2\xc2\x59\xb6\x76\x0b\x6d\x4a\x41\x16\xc4\x7c\xae\x4d\x26\xd5\x12\x48\x83\x00\xbf\x0c\xb6\xc2\xb9\x5c\x48\x34\x20\x54\x06\xe7\x46\x12\x5a\x06\x58\x12\x2a\x13\x26\x03\x5d\x53\x55\xd3\xcc\x53\x2f\x12\x4b\x86\x29\xbc\xf5\x2e\xb0\xa3\xd9\x6c\xf6\x57\x7c\xf9\x74\x2c\x50\x8e\x60\xd0\xd6\x05\x31\xde\xf3\xcf\x26\xc1\x8f\xbd\x96\x5b\x68\xfc\xd6\xd6\xf9\xcc\x11\x32\x5c\x88\xba\xa0\x76\x67\xa1\x0d\x48\xb2\xa0\x2b\x34\x42\x65\xf6\x5a\xe9\x26\x3d\x3f\xc2\x5a\x34\x74\xff\xac\x16\x85\x2f\xf0\x1d\x1f\x88\xf8\x6f\x13\x86\xa8\x2a\x64\xee\xe9\x6a\xca\xa4\x1c\x07\xaa\x0c\xf4\x02\x44\xe8\xf0\x54\x4c\x27\x1e\xd5\x74\xd7\x73\xac\x1a\x8a\x4f\x04\x61\x93\xfc\x12\xe9\x5e\x6d\x0c\x2a\x7a\x21\x4b\x6c\x6a\x40\xaf\x77\x43\x95\xa0\x10\x6b\x5d\xd3\x40\x1f\x8f\x8e\x9e\x3d\x0d\x80\x86\x88\x97\x7a\x9a\xf0\xa0\xb3\x1a\xcd\x1a\xce\x25\xe5\x50\x09\xca\x27\x8c\xe0\x8d\x87\x48\x8d\xb3\x57\x56\xab\xd6\x1d\x83\x1c\x01\x33\xe4\x44\x15\x14\xf2\x25\x7f\x3e\x44\x5b\x69\x65\xd1\xc1\x27\x0f\x7c\xcf\x9c\x53\xd6\x28\x8b\xb5\xc7\xd1\x7e\x61\x38\x13\x7a\x0a\xc7\x90\x53\x59\x34\x0c\x07\x2f\x9e\x3c\xfe\x00\x03\xc3\x9b\x9c\x78\x03\x12\x83\x85\x20\xb9\x42\xf7\xd5\x42\x29\xd6\xa0\x4b\xc9\x07\x4a\x38\x41\xda\x42\xd8\x7c\xa7\xa9\xcc\xa7\x5c\x82\xe7\x82\xf2\x64\x98\x63\x5b\x50\xaf\xd0\x85\x34\x96\x60\x25\x8a\x1a\x9d\x96\x78\x4d\x89\x12\x33\x98\xeb\xb2\xd2\x0a\x15\x71\x9f\x79\xd9\x95\xb5\x55\xf0\x03\x6d\xca\xcf\xd8\x2c\x19\x8b\xff\x14\xd7\x7f\xd3\xdb\xf3\x67\x47\x2f\x1a\x5f\xcf\xb5\xa5\x1b\xfa\x03\x83\x67\x35\x5a\x02\x23\xce\xe1\xa5\xce\xd6\x0d\xd7\xa1\x5f\xbf\xab\xb3\xf5\x56\x6d\xe6\x85\xb0\x16\x0e\x88\xaa\x7b\x5a\x11\x5e\xd0\x66\x02\x00\x71\x83\xf6\xdd\xc2\x40\x02\x41\xe8\x6e\x2b\xc2\xb3\x0a\x20\xf5\xe0\xd5\xce\x7e\xbb\x1d\xeb\xc8\x13\xf8\x54\x9c\x6a\x3c\xec\xd2\xfd\x1f\xe8\xc4\xbb\x81\x2d\x3f\xac\x15\x48\x61\xb5\xe5\xc1\xd9\xc7\x1e\x9c\xaa\x62\x0f\x81\xe1\xac\x55\xcb\x08\x7d\x05\x69\x24\x27\x57\xab\xce\x53\x28\x76\xd5\x90\xc6\xac\x8b\x61\xc7\x5c\x93\x86\xf4\x2b\x48\x23\x2d\xf9\x38\x19\xb8\xe5\x63\x35\xe6\xa3\x1a\x53\xc6\x95\x7e\xfa\x3a\xba\x86\x2f\xfe\xd7\xf3\x67\x22\xf5\x6c\xfb\x60\x9d\x41\xda\x93\xd8\x78\xbd\x18\xd8\xa4\xe3\xc6\xc4\x5d\xc9\x37\x87\xae\x09\x27\x3c\x80\x0e\x84\xca\x8a\x36\x9f\x12\x29\xd7\xd9\x60\x50\x2c\x6a\x35\x87\x24\xd2\xea\x0e\xe4\xce\x2a\x84\xc5\x83\x23\xdc\x9a\x53\xb6\x48\xa7\xb7\xa3\x58\x22\x3b\x98\xd3\x05\xa4\xf1\x4a\x12\x40\x9e\x2f\x99\xd3\xc5\xce\xbe\x0f\xf3\xb0\x56\x7e\x40\x5a\x34\x2b\x34\x33\x17\xec\x61\xad\x9a\x48\x45\x96\x99\xe6\x1c\x1e\xad\x2d\x61\x09\xda\x82\xa8\x64\x38\x7d\xc7\x27\xf0\x10\xe9\xd9\xd1\xc7\x66\x69\x13\x06\x06\xbb\x7b\xba\x2c\x85\xca\x1a\x1a\x1e\x09\x6d\xba\x7c\x4f\x99\x25\x83\x3f\xe7\x6b\xed\x81\xec\x0a\xb3\x90\x05\x3e\x8d\xb1\x6e\xb2\xec\x02\x9f\x99\x0a\x4d\xc9\x46\x87\x58\xea\xd5\x96\x45\x3b\xee\x6d\x2f\x4a\x3f\x00\x7c\xe4\x9b\x49\x53\xc7\x87\x48\x0e\x60\x96\x76\x16\x89\xe1\xf8\x84\x6f\xb2\x36\x99\x61\x8f\xa3\x44\x47\x8e\xdc\xfc\x1a\x19\x0f\x19\x9b\x2a\x79\x30\x43\x62\x62\xbe\xa7\x89\x50\x91\xd4\xea\x23\x97\x3e\x48\x1b\xde\x0c\x73\x59\x8a\xc2\xa1\xce\x6f\x5e\xc3\x36\x8c\xae\xfe\x9d\x51\x40\x3b\xe4\x20\x1a\xe3\x2a\x6f\xa3\x21\xcf\x66\x13\x9f\xd0\x78\x53\x5a\x57\xa1\x6b\xed\x4e\x77\x58\x42\x8f\xee\x2b\x32\x6b\x8f\xe7\xb9\x78\x8a\xeb\x5d\x17\x8a\x07\xba\x5d\x50\x78\x41\xd1\x77\xf7\x52\x38\x0d\x73\x74\xb7\xc1\x44\x4e\x4f\x71\x9d\x9e\x76\x67\xd5\xf1\xa5\xd1\x58\x65\xbe\x54\x75\xa1\xf8\x48\x9e\x88\x6a\xd3\x39\x39\x3e\x01\x12\x2f\x0b\x84\x14\x8e\xef\xfc\xef\x64\x73\xe9\xe1\x5c\x4d\x2b\x5f\x63\xfa\x9f\x7d\x2f\xab\xaa\xf6\xaf\x30\x0e\xdc\x47\xc4\xde\xa2\x60\xf6\xf6\x80\x74\xa6\x61\x6e\xb4\xb5\x7a\x85\xe6\x91\x44\x78\xf7\xf5\x4f\x6f\x7f\xfe\xad\xc5\xc8\x45\xc2\x31\xa7\xd3\x69\x64\xd8\x09\xa6\x8b\xfc\xb2\x33\x09\x8f\x6b\xbe\x16\x20\xf5\xef\xec\xfe\x08\x64\x84\x0c\x5b\x0e\xf5\x6f\xf7\x68\x77\x59\xed\x40\x87\xf3\xf5\x63\x12\xb7\x75\x2c\x4f\x22\x8e\x05\x24\x08\xff\x4a\x41\xc9\x62\x10\x9a\x37\x23\x2c\x2b\xff\x29\x05\xdc\xef\x01\xf8\x5d\x90\x74\xfb\x81\x04\xfa\x2c\x4d\xa0\x73\xff\x8e\x3c\x10\x36\x6f\xb2\x69\x4d\x67\xfd\xbc\xe2\xd8\x7a\x66\x51\xaa\xb7\x6e\x71\x43\x78\xa9\xcf\xb2\xed\x9c\xff\x3a\x8c\x97\x0a\x44\x0a\x1c\xfe\x0d\x3b\xb2\xdd\x99\x2d\x56\x88\xa3\xe8\xb4\x3c\x6e\xd9\xf4\x00\xd2\x20\x76\x27\xac\x70\x3a\x71\x50\x06\x56\xe2\xed\xdb\x41\x89\x8e\x0b\xb0\xb0\x38\xa8\xf1\xde\x1e\xbc\x7d\xf3\xe5\xfb\x2f\xbe\x82\x57\xd9\xe9\x9d\xd9\xff\xe1\x8f\x6f\x7f\x7f\xff\xfd\x8f\x6f\x7f\xf8\xf5\xdd\x9b\x6f\xde\xfd\xf2\xdd\x87\xfd\x7b\xf7\xdc\xbe\x71\xff\x5d\x2a\xf1\xd5\xce\xa7\x61\x89\xed\xf1\x88\x8a\xff\x8f\xd5\xbb\xd3\x2c\xba\x26\x8d\xab\xfe\x0a\xad\xe2\x88\x46\x59\x9f\x41\x84\x6e\x9b\x45\x79\x85\x5e\x47\x74\x19\xae\x0a\x9c\x8d\x68\xb1\xaf\x18\xce\x04\x07\xba\xba\xec\x9d\xe0\x28\xc4\xde\x29\x89\x8e\x09\x8e\x1c\x8f\xab\x42\xb8\x1c\xd1\x58\xc0\x2a\x59\x0c\x83\x08\x62\xe0\xc2\x2d\x91\x8e\xe4\x6b\x1c\xb9\x63\x59\x48\xd1\xd5\xc0\x17\xfa\x63\xa9\x4e\x31\x7b\x2c\x2d\x85\xf9\xec\x17\x9e\xea\x0c\xbb\xeb\x22\x8a\xac\xdb\x8e\xee\x8b\x6e\x31\x19\x3e\xee\xfd\x8f\x97\xde\x73\xdb\xb5\x3d\xed\x92\xe8\xee\x86\x2e\x98\xcd\xd0\x99\xfb\x29\xb4\x0b\x85\xb0\x74\xc5\x15\x21\xb2\x6c\xcb\x3b\xb7\x65\xc5\x85\xbf\xc1\x11\x88\x9c\xf2\xef\x84\x28\xb7\xf8\x57\x09\x33\xfb\x9f\x67\xe9\x98\x80\xc3\x16\x14\x7d\x49\x71\xf8\xfd\x55\x3f\x4a\x36\x5b\xa8\x59\xa8\xd2\x87\x09\xb6\x46\x05\x8c\xcc\x8a\xac\x2e\xab\x58\x10\x51\x92\x96\x84\x61\x4e\x17\xf2\xe0\x8c\xfa\xbd\xd1\x23\xda\xbc\x96\x1d\xc4\x6b\x77\x38\xb6\x02\xb1\x47\x8c\x9d\x9c\x9b\x8b\xf6\xcf\x00\x00\x00\xff\xff\x5d\x4f\xd2\xa6\x2b\x13\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
