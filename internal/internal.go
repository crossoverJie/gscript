package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xbf\x6e\x13\x4f\x10\xee\xef\x29\xe6\x17\xe9\x17\x9d\x15\xcb\x26\x0d\x14\xd6\x95\x91\x10\x0a\x34\x94\x96\x8b\x8d\x6f\x1c\x1f\x77\xb9\x3b\x76\xd7\x07\x8e\x65\x09\x41\x45\x15\x09\xc4\x03\x20\x51\x40\x43\x03\x0d\x0d\x6f\x93\x28\xbc\x05\x9a\xd9\x3d\xef\xde\x1f\x2b\x4a\xc7\x36\xbe\xdd\xf9\x76\xe6\x9b\x9d\x6f\x76\x3d\x1e\x83\x44\xbd\x92\x39\x08\x29\xc5\x1a\x32\xcc\xcf\xf5\x32\x48\x72\x4d\x9f\xa1\xc8\xd7\xd3\x19\x88\xc1\x66\x1b\x04\x0e\xba\x14\x6a\x39\x2f\x62\x64\x18\x4d\x08\x07\x8a\x51\xa5\x4c\x72\x9d\xe5\x21\x4d\x84\x52\x28\xf5\xc9\xcb\x95\xc8\xcc\xbc\x2c\x31\x8f\xf9\x33\x08\xe6\x99\x50\x0a\x4e\x72\x2d\xd7\x9b\x00\x00\x80\x7c\xa4\xb8\x1e\x56\x22\x5b\xe1\x84\x97\xd8\x0a\x39\xbe\xd6\xde\x9c\x83\xa5\x43\xc6\x57\xc3\x1a\x33\x30\x4e\x68\xa4\xb8\x8e\xd2\xc9\x6e\xca\xfe\xa2\xca\x2d\x90\xbf\x28\x37\xf3\x6d\xb0\xb5\x4c\x9e\x8a\x72\xe3\x82\x4c\x67\xa0\xc5\x59\x86\x10\xc1\xf4\xf8\xe1\x6c\xb3\x35\x70\x4a\x58\x25\x97\x18\x3d\x98\x04\xbc\x50\xae\x74\x58\x13\x37\x8c\x28\x9a\x47\x66\x3c\x06\x5d\xc4\x05\xcc\x65\xa1\x54\x51\xa1\x7c\x92\x20\xdc\xbc\xff\x76\xfd\xfd\xd7\x0e\x93\x2c\x42\xe2\x1c\x1d\x1c\x78\x1b\x69\x98\xf3\x76\xcc\xb7\x6e\x8b\x3d\x79\x2a\x03\x44\xa6\x08\x29\xae\x07\x93\x06\x22\xb1\x26\x46\xfd\xcf\x15\xe5\xac\x06\xe0\x70\xe6\xfc\xc8\x09\x9b\xa6\xc9\xcc\xd9\xce\x8a\x22\x83\x57\x32\xd1\x6c\x96\x75\x59\x0c\x67\x08\x11\xfe\x8b\x20\x4f\xb2\x16\x6b\xe3\x51\xe3\x45\x69\xbe\x22\xf0\xf6\xd1\x58\x14\x12\x42\x67\xb7\x4e\xa0\xe9\xa5\xce\x61\xbe\x92\x12\x73\xfd\x58\xa8\x65\x9d\xe8\x6e\xeb\xa8\x99\xb2\xcf\xad\xb1\xcd\x3b\x85\xc3\x43\xaa\x15\x2d\x35\xbd\x74\x83\xd3\x70\x18\xa3\x22\xf0\xc4\xd9\x1e\xf6\x9c\x16\x22\x53\x7b\x10\xed\x72\xd6\x63\xdb\x59\xf1\x0f\xcf\x71\x70\x8d\xd0\xbf\xb3\x2e\x20\x44\xb6\x53\x58\x95\x4c\x79\x08\xd8\x3a\x28\x3a\x24\xa6\xdc\x93\x3a\x49\xfc\xe8\xa8\x1d\xca\xc9\x10\x30\x53\xd8\xaa\xd7\x78\x0c\xd7\x57\x6f\x6f\xdf\xbc\x83\x17\x71\x7a\x3c\x7a\x04\x7f\x3e\xfe\xbe\xfd\xfc\xf5\xfa\xcb\xcf\x9b\xab\x0f\x37\x3f\x3e\xdd\xcd\xd4\x10\x25\x29\x34\x23\xb7\xd9\x58\x26\xf6\x87\x9a\xee\x1c\x77\x5d\xe8\x65\xf3\xcf\xb6\x15\xeb\x1f\xb9\x9c\xfd\x1d\xb4\x47\xf7\xd8\xa3\x77\x2a\xa3\x15\x34\x9b\x49\xe0\x7b\xb4\xdf\x53\x68\x7b\xa1\xe3\xa8\x47\xd7\x4d\x6d\x51\x26\xd8\x52\xa0\x43\xf4\xf9\xb1\xf5\xa1\x5c\xce\x51\x3f\x4f\x2e\x31\xf4\x18\xd8\x1d\x54\x5b\x77\x13\xf3\x23\x73\x9a\xe4\x29\xc6\xa7\x89\xd2\xf6\x66\x36\x0b\xcf\x8a\x18\xdd\x43\xe1\xc5\x71\x66\xef\xa5\x70\x8b\x2c\x8c\xca\x8b\xcc\x5b\x21\x82\xd6\x8b\x00\x11\x74\xde\x04\x47\x65\xd3\x0e\xb5\x48\xa4\xd2\x43\xc8\x84\xd2\x7b\x9e\x06\x11\xc7\x9d\xd8\x54\xad\x8a\x6a\x72\x0f\x4d\x7a\x41\x33\x88\xfc\xcc\xaa\x41\xf3\x3e\x66\x4e\xe4\xbd\xab\x28\x6b\x82\xac\x59\x63\xa2\xdf\x5c\x35\xbd\xbd\xe9\xa0\x46\xf6\x8c\xee\x76\xd0\xe9\x5d\xe8\x69\xde\x78\x75\x51\xfa\x72\xf0\x92\x54\x5a\x48\xf2\xc9\x94\x5b\x4d\x63\x6c\xbd\x3d\x53\xff\xf1\x60\x88\xd1\x61\xfb\x1e\xb1\x8e\x0d\xa2\x4f\xca\xf7\x97\xec\xdf\x00\x00\x00\xff\xff\xd5\x05\xd8\x10\x40\x09\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
