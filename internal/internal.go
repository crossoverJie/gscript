package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\x1c\x45\x10\xbe\xef\x53\x14\x96\x88\x66\x65\x6b\x97\x5c\xe0\x60\xcd\x01\x42\x12\x2b\x72\x12\xb0\x23\x2e\x96\x0f\x9d\x9d\xda\x9d\xc9\xce\xf6\x8c\xbb\x6b\x16\xaf\x57\x96\x10\x9c\x38\x45\x02\xf1\x00\x48\x1c\xe0\xc2\x05\x2e\x5c\x78\x1b\x5b\xe1\x2d\x50\x55\xf7\xec\xf4\xfc\x58\x56\x6e\xd9\xc3\x6a\xba\xfb\xab\xaf\xbe\xae\xfa\xba\x67\xa6\x53\x30\x48\x95\xd1\xa0\x8c\x51\x1b\xc8\x51\x2f\x28\x1d\x65\x9a\xf8\x31\x52\x7a\x73\x76\x0e\x6a\xbc\xbd\x1e\x8d\x1a\x68\xaa\x6c\x3a\x2b\x12\x14\x18\x0f\x18\x07\x56\x50\xa5\xc9\x34\xe5\x3a\xe2\x81\xb2\x16\x0d\x3d\xbe\xa8\x54\xee\xc6\x65\x89\x3a\x89\x6a\xb6\x2f\x15\xe1\xc8\x92\xc9\xf4\x02\x16\x48\x8f\x2a\x63\x50\xd3\xab\x6c\x85\x91\x9f\xa5\xab\x03\xf0\x8f\xb9\xda\x14\x15\xd5\xa1\x4f\x91\xa0\xb0\xa0\xcc\xc2\x4e\x3c\xc5\xd9\x39\x93\xbc\x3c\xfd\xdc\x2c\x6c\xd4\x11\xfc\xec\xf4\xe5\x0b\x4f\x54\x27\xe4\x29\x91\x2d\x9b\x9b\x4e\x1d\xe6\xa2\x42\xb3\x81\x6f\x33\x4a\xa1\x54\x94\x8e\x18\xc0\x0b\x4f\x91\x6a\x4d\x6f\x6c\xa1\x77\xaa\x18\x24\xb9\x98\x21\x25\x2a\x21\xcf\x5e\xf3\xf3\x09\xda\xb2\xd0\x16\x05\x3e\x7a\x22\x55\x99\x4b\x4e\xae\x19\x17\xaf\xc5\xb1\x1b\x30\xdc\x0b\x3a\x41\x2b\x0c\x29\xad\xf2\x9a\xe1\xe8\xd5\xf3\xe3\x7b\x18\x18\x5e\x6f\x9f\x17\x20\x32\x98\x2b\xca\xd6\x28\x43\x0b\x2b\xb5\x81\x62\x95\x71\x83\x55\xc2\x11\x36\x57\x36\x1d\xd7\x85\xf9\x9a\x4b\xf0\x95\xa2\x34\xea\xee\xd1\x8f\x9f\x14\x66\xf5\x8d\xca\x2b\x8c\x86\xd2\x2f\x71\xc3\xe0\x59\xae\xac\x85\x23\xa2\xf2\x51\xa1\x09\x2f\x69\x3b\x02\x80\x50\xf0\xa1\x4c\x74\x4a\xc2\xf5\x5e\x8f\x1d\x36\xc0\x73\x55\x20\x76\xe0\xf5\xf8\x70\xb7\x1c\xd6\xd5\x11\x38\x2d\x52\x45\x07\xbb\x96\xff\x4e\xdd\x5c\x1a\xe8\xe5\xe1\xda\x41\x0c\xeb\x5e\x06\x89\x0f\x33\x48\x95\xc3\x0c\x9e\xe1\x62\x57\xbd\x01\xfa\x12\xe2\xa0\xbc\x52\xd7\x26\x93\xb7\x6a\x59\x93\x86\xac\xf3\x6e\xc9\xa5\xca\x5d\xfa\x35\xc4\x41\x73\x9c\x4e\x06\xf6\x72\xac\xeb\x1c\xe2\xb3\x2f\x32\x9d\x80\x29\x2a\xc2\x11\x3b\xf8\x48\xe9\x24\xdf\x25\x5a\x21\xa5\x45\xd2\x71\xda\xbc\xd2\x33\x88\x82\xe6\x8e\x21\x95\x28\xaf\x89\x9d\xe7\xaf\x81\x3d\x8e\x88\xf7\xf6\x83\xcd\x06\x71\x30\xa3\x4b\x88\xc3\x99\xc8\x83\x1c\x5f\x34\xa3\xcb\xf1\xa1\x93\x79\x52\x69\x77\xc2\x2c\x9a\x35\x9a\x89\x88\x3d\xa9\x74\xad\x54\x25\x89\x11\x9b\x3a\xeb\x3d\xd6\x64\x36\x4e\x0e\x77\x7b\x89\x9b\x83\x35\xd7\xc5\xd1\xcb\x2a\x68\xbc\xa4\x60\x2c\xd7\xc1\xd2\xbb\xe3\xa0\xc6\x04\x75\x5e\xe2\x26\x5e\x36\xd5\x14\xbe\x38\x30\x0b\xf3\xc5\xba\x29\xae\x53\xf2\x5c\x95\xdb\x26\xc9\xd9\x39\x90\x7a\x9d\x23\xc4\x70\xf6\xf0\xd3\xf3\xed\xb5\x83\xb3\x37\x6d\x76\x85\xf1\x27\x87\xae\xf3\x65\x45\x51\x2d\xdc\x29\xe2\x6c\x81\x98\xe9\x14\xa8\x48\x0a\x98\x99\xc2\xda\x62\x8d\xe6\x59\x86\x70\xfb\xe3\x1f\x37\x7f\xfe\xb3\xc3\x64\xf3\x88\x35\xc7\x7b\x7b\x41\x60\x63\x84\x46\xf9\x75\x13\xe2\xaf\x74\x36\x3b\xc4\xee\x76\x6f\x9b\x88\x11\x99\x5f\x12\xd4\xc7\xf2\xaa\x90\x5d\x8d\xa1\xc1\xb9\xfa\x31\x89\x2c\x9d\x65\xe7\x01\xc7\x1c\x22\x84\x8f\x62\xd0\x59\xde\x91\xe6\xc2\x08\x57\xa5\x7b\x8a\x01\x0f\x5b\x80\x79\x61\x20\x6a\xd6\x3d\x09\xb4\x59\x6a\xa1\x33\xf7\x52\x39\x52\x36\xad\x77\xb3\x0b\x9d\xb4\xf7\x15\x6a\x6b\x85\x05\x5b\x7d\xf0\x80\x1b\xc2\x53\x6d\x96\x7e\x72\xfe\x35\x18\x67\x15\x08\x1c\xd8\xfd\x75\x3b\xd2\xef\x4c\x8f\x15\x42\x15\x8d\x97\x87\x23\xeb\x1e\x40\xec\xcd\x2e\xc6\x12\x41\x07\x80\x9d\x32\xb0\x13\xf7\xf7\xbd\x13\x85\x0b\x30\xb7\xd8\xa9\xf1\x74\x0a\x37\x6f\xbf\x7f\xf7\xdd\x0f\xf0\x26\x59\x3e\x9c\x7c\x06\xff\xfd\xfc\xef\xbb\x5f\x7f\xbf\xf9\xed\xef\xdb\xb7\x3f\xdd\xfe\xf5\xcb\xfd\xf9\x5d\x7a\x6e\xdf\x70\xfe\x66\x2b\xe1\xa5\xc8\xa7\x61\x81\xbb\xe3\x11\x14\xff\x83\xf5\xbb\x78\x16\xa5\x49\xc3\xae\xbf\xc3\xab\x38\xe0\x51\xf6\xa7\x37\xa1\x2c\xb3\x29\xef\xf0\xeb\x80\x2f\xfd\x2b\x00\x27\x03\x5e\x6c\x3b\x86\x77\x82\x1d\x5f\x5d\x77\x5f\x25\x2d\x1e\xdf\x1f\xde\xcb\x02\xe9\x34\xbb\xc2\x28\x50\xe0\x23\xb8\xb7\xcd\x15\x29\x9f\x29\xc7\x99\x5e\x62\x72\x9c\x59\xf2\x57\xa6\x9b\x78\x51\x24\xd8\xdc\xe0\x41\x9e\x66\x39\xb8\xc2\x9b\xc9\xa8\xfb\x15\x21\xa1\xed\xf7\xba\x74\x22\x86\xde\x65\xdd\x48\xd9\x76\x53\xcd\x33\x63\xe9\x00\x72\x65\xe9\x8e\x3b\x5b\x25\x49\x2f\x37\x77\x6b\xcd\x3d\x79\x0f\x4f\x06\x49\xf9\x73\x24\xd8\x59\xf8\xf1\xc3\xcc\xa2\x89\xd9\xfb\x8e\xf2\x4b\x90\xb7\x7b\xcc\xf2\xdb\xb3\xee\x6c\x6f\x7b\xa8\x89\xaf\xd1\xfd\x04\xbd\xb3\x0b\x03\x87\x37\xa9\x56\x65\x68\x87\x60\x93\x96\x94\x61\x4e\x91\xdc\x39\x34\x6e\x6d\xf0\xcc\xd4\xdf\x18\x02\x71\x3e\xec\xde\x23\x9e\xd8\x21\x86\xac\xfc\xfe\x96\xfd\x3f\x00\x00\xff\xff\x9a\x2c\xda\xfc\x32\x0d\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
