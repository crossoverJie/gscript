package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4f\x6f\xe4\x4a\x11\xbf\xcf\xa7\x28\x46\xe2\xc9\xd1\x46\x33\x6f\x39\x80\x44\xe4\xc3\x26\xbc\x4d\xf4\xb4\x6f\x37\x64\x02\x1c\xa2\x1c\x7a\xec\xf2\x4c\xbf\xd8\x6e\xa7\xbb\x3c\xc9\x64\x14\x09\xc1\x89\xd3\x93\x40\x7c\x00\x24\x0e\x70\xe1\x02\x17\x2e\x7c\x9b\x5d\x3d\xbe\x05\xaa\xee\xb6\xdd\xf6\x38\xda\x04\x2e\xe4\x10\x79\xba\xab\x7e\xf5\xef\x57\xd5\xdd\xf3\x39\x68\xa4\x5a\x97\x20\xb4\x16\x5b\xc8\xb1\x5c\xd1\x7a\x22\x4b\xe2\xcf\x48\x94\xdb\xab\x6b\x10\x07\xbb\xc7\xc9\xa4\x13\x5d\x0b\xb3\x4e\x54\x8a\x56\x8c\x7f\xb0\x1c\x18\x2b\x55\x69\x59\x52\x6e\x35\x5b\xbd\x4c\xe9\x42\x90\x01\x91\x24\x4a\xa7\xb2\x5c\x01\x29\x10\xe0\x96\xc1\x54\x98\xc8\x4c\xa2\x06\x51\xa6\x70\xa7\x25\xa1\x61\x01\x43\xa2\x4c\x85\x4e\x41\xd5\x54\xd5\x34\x73\xd0\x59\x64\x48\x33\x84\xd3\x3e\x04\x36\x34\x9b\xcd\xfe\x1b\x5b\x2e\x1c\x03\xb4\x46\xd0\x68\xea\x9c\x58\xde\xe1\xcf\x26\xde\x8e\x79\x96\x59\x68\xec\xd6\xc6\xda\x5c\x23\xa4\x98\x89\x3a\xa7\x76\x27\x53\x1a\x24\x19\x50\x15\x6a\x51\xa6\xe6\x59\xe1\x46\x3d\x3b\xc2\x18\xd4\xf4\xd5\x6d\x2d\x72\x97\xe0\xd7\xce\x11\xf1\xa3\xc6\x8d\x44\x6d\x50\x93\x8f\x81\x61\x97\x5b\x42\x57\xdb\xd9\x84\xbf\xaf\xae\x81\xd4\xf1\x96\xf0\x0d\xaf\x35\x51\xd9\xda\x75\xea\x9d\x92\xf3\xac\x97\x10\x52\x0b\xfb\x11\x79\xb8\x25\xeb\x26\xb9\x30\x06\xdc\xc6\x71\x2d\xf3\x14\xf5\x6e\x02\x00\xd0\x08\xd5\x19\xc4\x70\xf5\xe5\xf5\xee\xf1\x68\x62\x37\xe6\x73\x10\x55\x85\x65\x0a\x89\x2a\x09\x4b\x9b\x84\x65\x9d\x1d\x82\xa4\x5e\x65\x1c\x25\x41\x65\x60\xac\x22\x93\xce\xa6\xcd\xbb\xd1\x85\x60\xb7\x03\xa3\x84\x45\x05\x71\x3f\xde\x83\xa3\x56\xca\x99\x8f\xac\x4d\x16\x0d\xb6\x3c\xd1\xb9\x05\x82\x9d\x47\xfb\xbf\x75\xe2\x57\xec\x04\x43\x9b\x20\x15\xa3\xe8\xcb\x71\xe8\x65\x8b\xeb\x52\xe2\x23\xf1\x71\x05\x58\x5e\xa7\xcb\x7c\x9d\xb5\xaa\xae\xee\xce\x9a\x81\xe9\x66\xca\x79\xe4\xbc\x71\x6a\x55\x06\xc2\x17\x72\x2a\xa6\x13\xef\x93\xef\x6a\xc7\x9d\xcd\xa0\xb9\xbf\x5e\x7c\x78\xef\x3d\x69\x2a\xce\x4b\xbd\x86\x76\x42\xb7\x35\xea\x2d\xdc\x49\x5a\x43\x25\x68\x3d\x61\x09\xde\x38\x45\x6a\x8a\xf2\xad\x51\xe5\x61\x13\x17\x0b\x59\x00\x46\x38\xbb\xbc\x3c\x87\x5c\x2e\xf9\xfb\x02\x4d\xa5\x4a\x83\x56\x7c\xf2\xd6\x35\x9c\x35\xca\x69\xe6\x49\xd3\xc3\x68\x7f\xb0\xb8\x27\xee\x05\x1a\x8b\xb0\xa6\x22\x6f\x10\xce\x2e\xbf\x79\xf7\x19\x04\x16\x6f\x62\xe2\x0d\x88\x34\xe6\x82\xe4\x06\xed\x4f\x03\x85\xd8\x82\x2a\x24\x4f\x43\x61\xa7\x89\xc9\x85\x59\x1f\x34\x99\xf9\x39\xa7\xe0\x5c\xd0\x3a\x1a\xc6\xd8\x26\xd4\x91\x38\x93\xda\x10\x6c\x44\x5e\xa3\x1d\x04\xbc\x56\x8a\x02\x99\xfd\x45\xa5\x4a\x2c\x89\x8b\xc5\xcb\x36\xad\x6d\xb7\xbd\x55\xba\xf8\x25\xab\x45\x63\xfe\xdf\xe0\xf6\x7f\xb4\x76\xfe\x61\x71\xd9\xd8\x3a\x57\x86\x5e\x68\x0f\x34\xde\xd6\x68\x08\xb4\xb8\x83\xa5\x4a\xb7\x0d\xd6\x85\x5b\x3f\x56\xe9\x76\x2f\x37\x6e\x58\x9c\x11\x55\x27\xdc\xfa\xf7\xb4\x0b\xe9\xcf\x62\x8e\xdc\x03\x0a\x78\xb6\xb6\x5d\x11\xb0\x00\x62\x27\xbc\x09\x1a\x2d\xe4\x91\x03\x70\xa1\x58\xd6\x84\x0d\x3d\xe0\x89\x33\x03\x7b\x76\x98\x2b\x10\xc3\x66\xcf\x82\xd5\x0f\x2d\x58\x56\x85\x16\x3c\xc2\x6d\xcb\x96\x11\x78\x9e\x54\x1d\x9d\x6c\xae\xf6\x86\x46\xd5\xce\x8b\x40\x31\x1b\x56\xcc\x16\x69\x08\xbf\x81\x38\xe0\x92\xf3\x93\x05\xf7\x6c\x6c\xc6\x6c\x54\x63\xcc\x78\xd2\x4e\x9f\x47\xcf\xb0\x65\xc7\x6a\x68\x4f\x07\xec\xd9\xb7\xc1\x3c\x83\xb8\x47\xb1\xf1\x7c\xb1\x60\x37\x27\xe7\x73\x38\x96\x7c\xec\xab\x9a\x70\xb2\x26\xaa\xce\x44\x99\xe6\x6d\x3c\x05\xd2\x5a\xa5\x83\x41\x91\xd5\x65\x02\x51\xc0\xd5\x03\x58\x5b\x2d\xef\x16\x0f\x0e\x7f\xe5\x99\xb2\x46\x3c\x7d\x15\xf8\x12\xe8\x41\x42\xf7\x10\x87\x2b\x91\x17\x72\x78\x51\x42\xf7\x07\x47\xce\xcd\x8b\xba\x04\xf6\x0f\x0c\xea\x0d\xea\x99\x75\xf6\xa2\x2e\x1b\x4f\x45\x9a\xea\xa6\x0f\x17\x5b\x43\x58\x80\x32\x20\x2a\xe9\xbb\xef\xea\x1a\x4e\x91\x3e\x2c\xde\xe8\x95\x89\x58\xd0\xeb\x9d\xa8\xa2\x10\x65\xda\xc0\xf0\x48\x68\xc3\xe5\x4b\x86\x5e\xb1\xb0\x3d\xd7\xde\xca\x2e\x31\x99\xcc\xf1\x7d\x28\x6b\x27\xcb\xa1\x3d\x04\x2b\xd4\x05\x2b\x5d\x60\xa1\x36\x7b\x1a\x81\xed\x53\xa4\xbb\x34\x6a\xe7\xbf\xe9\xb9\xed\xaf\x0f\x76\x6d\xd7\xde\x0f\x4e\x91\xac\x80\x5e\x99\x59\xc0\x8e\xab\x6b\x58\x05\xd1\x0d\x8b\x1e\x44\x3e\xd2\x83\xc9\x33\x52\x30\x44\x6c\xd2\xe6\x84\x59\x24\x04\xe6\xd3\x97\x08\x4b\x92\xaa\xfc\xa9\xcd\x07\x48\xe3\x6f\x80\x89\x2c\x44\x6e\xa5\xee\x5e\x9e\xd4\xd6\x8d\xae\x20\x9d\x92\x97\xb6\x92\x03\x6f\xb4\x2d\x85\x09\xa6\x3e\xab\x4d\x5c\x40\xe3\x55\x6a\x4d\xf9\x32\xb6\x3b\x7b\xd0\xee\x90\x11\xa0\x95\x22\x4c\xdd\xa1\xc9\x46\x20\x51\x5a\xdb\x73\xbc\xb9\x74\xb3\xf9\xa4\xd6\x9a\x0f\x9b\x54\x6a\x4c\x48\xf1\xb9\x16\xd4\x62\xe5\x29\x31\x52\x41\x5e\xef\xdf\x70\x7e\x26\x08\x03\x2e\x9d\x38\xe4\x4b\x59\xb4\xe1\xd0\x43\x9b\xcb\x5c\x6c\x55\x4d\x96\x6c\x9c\xcf\x5f\x94\xf2\xbe\x93\x0a\xce\x20\x06\x65\x88\xdd\xc0\xad\xe7\xa1\x8f\xf8\x1d\x2a\xb2\x86\x17\x0d\xd3\xc8\x0e\xd5\x03\x87\x86\x48\xd6\x61\x7a\x18\xa4\xe0\x44\x15\x95\xcc\xf9\xf1\xd2\x76\x3a\xa4\x75\x51\xbd\x59\x5c\x46\x2d\xbd\xd3\xb0\xe9\x78\x77\xb1\x2d\x96\x2a\x1f\x0a\xf8\x04\x7c\x55\x92\xde\x3a\xf3\x7c\xee\xdd\xe0\xf6\xd0\x32\xcb\x19\xb6\xbb\x50\xe2\x3d\x05\xbf\xed\x4d\xf0\xc6\x9f\x93\x87\x8d\x4c\x10\xc3\x0d\x6e\xe3\x9b\x6e\x16\x5b\xbc\x38\x38\x36\x19\x2f\x2e\xbb\xd0\x9c\x27\xdf\x88\x6a\xd7\x19\xe1\xdb\xbb\x58\xe6\xc8\x8f\x86\xd7\x3f\xb6\xaf\x86\x26\x77\x46\x3e\x60\xfc\xa5\x7f\x45\x54\xb5\x7b\x22\xb1\xe3\xce\x23\xb6\x16\x38\x33\x9f\x03\xa9\x54\x41\xa2\x95\x31\xfc\xba\xf9\x5a\x22\x7c\xfa\xdd\x5f\x3f\xfe\xed\x9f\xad\x8c\xcc\x22\xf6\x39\x9e\x4e\x03\xc5\xae\x1a\x9d\xe7\x8f\x9d\x8a\x7f\xf9\x72\x3a\x21\x76\x8f\xe0\xfe\x11\xc7\x12\xd2\x6f\x59\xa9\x1f\xba\xe7\x04\x47\x75\x00\x9d\x9c\xcb\x1f\x83\xd8\xad\x2b\x79\x1d\x60\x64\x10\x21\xfc\x20\x86\x52\xe6\x03\xd7\x9c\x1a\x3f\x4e\xdc\x57\x0c\x78\xd4\x13\xe0\x7b\x5f\xd4\xed\x7b\x10\xe8\xa3\x34\x8e\xfa\x3e\x3d\x13\x66\xdd\x44\xd3\xaa\xce\xfa\x71\x85\xbe\xf5\xd4\x82\x50\xbf\xf8\x82\x0b\xc2\x4b\x7d\x94\x7d\xe3\xfc\xd7\xc9\x38\xaa\x40\xc0\xc0\xe1\xdf\xb0\x22\xfb\x95\xd9\x43\x85\xd0\x8b\x8e\xcb\xe3\x9a\x4d\x0d\x20\xf6\x64\xb7\xc4\xf2\xc3\x16\x07\x69\x60\x26\xbe\x7a\xe5\x99\x68\xb1\x00\x73\x83\x83\x1c\xcf\xe7\xf0\xf1\xbb\xdf\x7c\xff\xeb\xdf\xc2\xb7\xe9\xcd\xeb\xd9\x4f\xe0\xdf\x7f\xf8\xd7\xf7\x7f\xfa\xcb\xc7\x3f\xff\xe3\xd3\x77\xbf\xff\xf4\xf7\x3f\x7e\xde\xbe\x33\xcf\xe5\x1b\xb7\xdf\x85\x12\x5e\xdd\xb8\x1b\x56\xd8\xb6\x47\x90\xfc\xff\x5b\xbe\x5b\xce\xa2\x2d\xd2\x38\xeb\x9f\xe0\x2a\x8e\x70\x94\xf9\xe9\x49\x68\xb7\x99\x94\x4f\xf0\x75\x84\x97\x7e\x0e\xe3\x6c\x84\x8b\x7d\xc6\x70\x24\x38\xe0\xd5\x63\xaf\x83\x03\x17\x7b\x5d\x12\xb4\x09\x8e\xb4\xc7\x53\x2e\x3c\x8e\x70\xcc\xcb\x96\x32\x1f\x3a\xe1\xc9\xc0\x89\x5b\x21\x2d\xe4\x03\x8e\x1c\xb8\x4c\xa4\xe0\xa8\xe1\xb3\xe6\x9d\x2c\x6f\x30\x7d\x27\x0d\xf9\xf9\xec\x16\xde\xab\x14\xbb\xe3\x22\xf0\xac\xdb\x0e\xce\x8b\x6e\x31\x1a\x3e\xde\xdc\xe3\xb4\xf7\x9c\xb2\x65\x8f\xbb\x20\xba\xb3\xa1\x73\x66\x37\x34\x66\x9f\xba\x7c\xce\x1a\x7a\xe2\x88\x10\x69\xba\x67\x9d\xcb\xb2\xe1\xc4\xbf\xa0\x05\x02\xa3\xfc\x0e\x0c\x62\x0b\x5f\x9d\x8c\xec\x9e\xdf\xf1\x18\x81\xfd\x16\xe4\x7d\x4a\xb1\xfb\xfd\x55\x37\x4a\x76\x7b\x52\x33\x9f\xa5\xcf\x03\xec\x8d\x0a\x18\x99\x15\x7c\x41\x08\x09\x11\x04\x69\x48\x68\xc6\xb4\x2e\x0f\x7a\xd4\xed\x8d\xb6\x68\xf3\x1a\xb2\x22\x8e\xbb\xc3\xb1\xe5\x81\x9d\xc4\x58\xe7\xbc\x9c\xb4\xff\x09\x00\x00\xff\xff\x2f\x9a\x2d\x3d\xc8\x16\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
