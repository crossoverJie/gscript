package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\x1c\x45\x10\xbe\xef\x53\x14\x2b\x11\xad\x15\x6b\x4d\x38\x80\x84\x35\x07\x12\x12\x5b\x51\x7e\x8c\x6d\xe0\x60\xf9\xd0\xd9\xa9\xdd\xe9\x78\xa6\x7b\xdc\x5d\xb3\xf6\xda\xb2\x84\xe0\xc4\x29\x12\x88\x07\x40\xe2\x00\x17\x2e\x70\xe1\xc2\xdb\x24\x0a\x6f\x81\xaa\xbb\x67\xa6\x67\x76\xac\xd8\x70\xc1\x07\x6b\xb7\xfb\xab\xaf\xfe\xbe\xae\xde\xde\xda\x02\x83\x54\x19\x05\xc2\x18\xb1\x82\x1c\xd5\x82\xb2\x91\x54\xc4\x1f\x27\x42\xad\x8e\x8e\x41\x6c\x5c\x5e\x8d\x46\x2d\x34\x13\x36\x9b\xe9\x14\x1d\x8c\xbf\x30\x0e\xac\x43\x95\x46\x2a\xca\x9d\x65\x63\x37\xd7\xa6\x10\x64\x41\xcc\x66\xda\xa4\x52\x2d\x80\x34\x08\xf0\xcb\x60\x4b\x9c\xc9\xb9\x44\x03\x42\xa5\x70\x66\x24\xa1\x65\x80\x25\xa1\x52\x61\x52\xd0\x15\x95\x15\x4d\x3d\xf5\x7c\x62\xc9\x30\x85\xb7\xde\x04\x76\x34\x9d\x4e\xff\x8d\x2f\x9f\x8e\x05\xca\x10\x0c\xda\x2a\x27\xc6\x7b\xfe\xe9\x28\xf8\xb1\x37\x72\x0b\xb5\xdf\xca\x3a\x9f\x19\x42\x8a\x73\x51\xe5\xd4\xec\xcc\xb5\x01\x49\x16\x74\x89\x46\xa8\xd4\xde\x28\xdd\x49\xc7\x8f\xb0\x16\x0d\x3d\x3c\xad\x44\xee\x0b\x7c\xcf\x07\x22\x3e\xac\xc3\x10\x65\x89\xcc\x3d\x5e\x8e\x99\x94\xe3\x40\x95\x82\x9e\x83\x08\x1d\x1e\x8b\xf1\xc8\xa3\xea\xee\x7a\x8e\x65\xaf\xc9\x8f\x0f\x9e\x3f\x0b\xb5\xa8\x4b\xc1\x4b\x9d\xc6\x7a\xd0\x69\x85\x66\x05\x67\x92\x32\x28\x05\x65\x23\x46\xf0\xc6\x0e\x52\x5d\xb5\x97\x56\xab\xcd\xc0\xe6\x40\x8e\x80\x19\x76\x0f\x0f\xf7\x20\x97\x2f\xf8\xf3\x3e\xda\x52\x2b\x8b\x0e\x3e\x7a\xe4\x0b\xef\x9c\xb2\xd0\x58\x71\x1d\x8e\xe6\x0b\xc3\x99\xd0\x53\x38\x86\x8c\x8a\xbc\x66\xd8\x3d\x7c\xfa\xe4\x1d\x0c\x0c\xaf\x73\xe2\x0d\x98\x18\xcc\x05\xc9\x25\xba\xaf\x16\x0a\xb1\x02\x5d\x48\x3e\x15\xc2\xa9\xca\xe6\xc2\x66\x1b\x75\x65\x3e\xe7\x12\xec\x09\xca\x26\xfd\x1c\x9b\x82\x7a\x99\xcd\xa5\xb1\x04\x4b\x91\x57\xe8\x04\xc1\x6b\x4a\x14\x98\xc2\x4c\x17\xa5\x56\xa8\x88\x9b\xc5\xcb\xae\xac\x8d\x0c\x1f\x69\x53\x7c\xc9\x66\x93\xa1\xf8\x4f\x70\xf5\x1f\xbd\xed\x3d\x3f\x38\xac\x7d\xed\x69\x4b\xb7\xf4\x07\x06\x4f\x2b\xb4\x04\x46\x9c\xc1\x0b\x9d\xae\x6a\xae\x7d\xbf\x7e\x5f\xa7\xab\xb5\xda\xcc\x72\x61\x2d\xec\x12\x95\x0f\xb4\x22\x3c\xa7\xcb\x11\x00\xc4\x0d\xda\x76\x0b\x3d\x09\x04\xb5\xba\xad\x08\xcf\x2a\x80\xc4\x83\x97\x1b\xdb\xcd\x76\xac\x23\x4f\xe0\x53\x71\xaa\xf1\xb0\x2b\xf7\xbf\xa7\x13\xef\x06\xd6\xfc\xb0\x56\x20\x81\xe5\x9a\x07\x67\x1f\x7b\x70\xaa\x8a\x3d\x04\x86\xd3\x46\x2d\x03\xf4\x25\x24\x91\x9c\x5c\xad\x5a\x4f\xa1\xd8\x65\x4d\x1a\xb3\xce\xfb\x1d\x73\x4d\xea\xd3\x2f\x21\x89\xb4\xe4\xe3\x64\xe0\x9a\x8f\xe5\x90\x8f\x72\x48\x19\xd7\xfa\xe9\xea\xe8\x06\xbe\xf8\x5f\xc7\x9f\x89\xd4\xb3\xee\x83\x75\x06\x49\x47\x62\xc3\xf5\x62\x60\x9d\x8e\x1b\x13\xf7\x25\x8f\x7f\x5d\x11\x8e\x32\xa2\x72\x57\xa8\x34\x6f\xf2\x29\x90\x32\x9d\xf6\x06\xc5\xbc\x52\x33\x98\x44\x5a\xdd\x80\xcc\x59\x85\xb0\x78\x70\x84\xab\x6f\xcc\x16\xc9\xf8\x6e\x14\x4b\x64\x07\x33\x3a\x87\x24\x5e\x99\x04\x90\xe7\x9b\xcc\xe8\x7c\x63\xdb\x87\xb9\x5f\x29\xe0\xf8\xc0\xa2\x59\xa2\x99\xba\x60\xf7\x2b\x55\x47\x2a\xd2\xd4\xd4\xe7\xf0\x60\x65\x09\x0b\xd0\x16\x44\x29\xc3\xe9\x3b\x3a\x86\x1d\xa4\xe7\x07\x9f\x9a\x85\x9d\x30\x30\xd8\x3d\xd0\x45\x21\x54\x5a\xd3\xf0\x48\x68\xd2\xe5\xcb\xc6\x2c\x18\xfc\x15\xdf\x4d\x8f\x64\x5b\x98\xb9\xcc\xf1\x59\x8c\x75\x93\x65\x13\xf8\xcc\x94\x68\x0a\x36\xda\xc7\x42\x2f\xd7\x2c\x9a\x71\x6f\x3b\x51\xfa\x01\xe0\x23\xbf\x1c\xd5\x75\xdc\x41\x72\x00\xb3\xb0\xd3\x48\x0c\x47\xc7\xb0\x88\x92\xe9\xf7\x38\x4a\x74\xe0\xc8\xcd\x6e\x90\x71\x9f\xb1\xae\x92\x07\x33\x24\x26\xe6\xcb\x96\x08\x15\x49\xad\x3e\x71\xe9\x83\xb4\xe1\xe2\x9f\xc9\x42\xe4\x0e\x75\x76\xfb\x1a\x36\x61\xb4\xf5\x6f\x8d\x02\xda\x21\x7b\xd1\x18\x57\x79\x1b\x0d\x79\x36\x1b\xf9\x84\x86\x9b\xd2\xb8\x0a\x5d\x6b\x76\xda\xc3\xc2\x4d\xfb\x4c\x10\xd6\xd2\xd9\x41\x7a\x50\x19\x83\x8a\x0e\x65\xd1\x50\xd2\x45\x93\x4f\x2e\x56\xba\x22\xd7\x70\xce\xe9\x0b\x25\xcf\x5b\x54\x34\xf6\x99\x94\x29\x3a\x33\x7f\x71\x53\xf6\x81\xee\xc7\x86\x6c\x11\xa0\x71\x95\x38\xa0\xaa\x17\x50\x9f\xc9\x05\x4c\x17\x71\x09\x7c\xc0\x0f\x15\x99\x95\x87\xf3\xd5\x70\x82\xab\x4d\xd7\x0d\x0f\x74\xbb\xa0\xf0\x9c\xa2\xef\xee\xc7\xd2\x49\xb8\x4a\x36\x6b\x4c\xe4\xf3\x04\x57\xc9\x49\x3b\xae\x1c\x5f\x12\xdd\x2c\xcc\x97\xa8\x36\x14\x1f\xc9\x53\x51\x5e\xb6\x4e\x8e\x8e\x81\xc4\x8b\x1c\x21\x81\xa3\x7b\x1f\x1d\x5f\x5e\x6d\x37\xb9\x5a\x79\x81\xc9\x07\xdb\xfe\x64\x95\x95\xff\x35\xc9\x81\xfb\x88\xd8\x5b\x14\xcc\xd6\x16\x90\x4e\x35\xcc\x8c\xb6\x56\x2f\xd1\x3c\x96\x08\x6f\xbe\xfb\xf5\xf5\x6f\x7f\x36\x18\x39\x9f\x70\xcc\xc9\x78\x1c\x19\xb6\xd5\x6b\x23\xbf\x6a\x4d\xc2\x23\x81\x6f\x46\x48\xfc\x7b\xa1\x7b\x0b\x30\x42\x86\x2d\x87\x7a\xdf\x3d\x3e\x5c\x56\x1b\xd0\xe2\x7c\xfd\x98\xc4\x6d\x1d\xc9\xe3\x88\x63\x0e\x13\x84\xf7\x12\x50\x32\xef\x85\xe6\xcd\x08\x8b\xd2\x7f\x4a\x00\xb7\x3b\x00\xfe\x69\x34\x69\xf7\x03\x09\x74\x59\xea\x40\x67\x5e\x66\xbb\xc2\x66\x75\x36\x8d\xe9\xb4\x9b\x57\x1c\x5b\xc7\x2c\x4a\xf5\xce\x1d\x6e\x08\x2f\x75\x59\xd6\x9d\xf3\x5f\x8b\xf1\x52\x81\x48\x81\xfd\xbf\x7e\x47\xd6\x3b\xb3\xc6\x0a\x71\x14\xad\x96\x87\x2d\xeb\x1e\x40\x12\xc4\xee\x84\x15\x06\x14\xf6\xca\xc0\x4a\xbc\x7b\x37\x28\xd1\x71\x01\xe6\x16\x7b\x35\xde\xda\x82\xd7\xaf\xbe\x79\xfb\xf5\xb7\xf0\x32\x3d\xb9\x37\xfd\x18\xfe\xfe\xe1\xaf\xb7\x3f\xfd\xf2\xfa\xe7\x3f\xde\xbc\xfa\xfe\xcd\xef\x3f\xbe\xdb\xbf\x77\xcf\xed\x1b\xf6\xdf\xa6\x12\xff\xba\xe1\xd3\xb0\xc0\xe6\x78\x44\xc5\xff\xdf\xea\xdd\x69\x16\x5d\x93\x86\x55\x7f\x8d\x56\x71\x40\xa3\xac\xcf\x20\x42\xb7\xcd\xa2\xbc\x46\xaf\x03\xba\x0c\x73\x13\xa7\x03\x5a\xec\x2a\x86\x33\xc1\x9e\xae\xae\x3a\x27\x38\x0a\xb1\x73\x4a\xa2\x63\x82\x03\xc7\xe3\xba\x10\xae\x06\x34\x16\xb0\x4a\xe6\xfd\x20\x82\x18\xb8\x70\x0b\xa4\x03\x79\x81\x03\x3f\x33\x58\x48\xd1\xd5\xc0\xd7\xe3\x13\xa9\x4e\x30\x7d\x22\x2d\x85\xf9\xec\x17\x9e\xe9\x14\xdb\xeb\x22\x8a\xac\xdd\x8e\xee\x8b\x76\x71\xd2\x7f\xdf\xf8\xf7\x5b\xe7\xc5\xe1\xda\x9e\xb4\x49\xb4\x77\x43\x1b\xcc\x65\xdf\x99\x7b\x0d\xf2\xbd\x68\xe9\x9a\x2b\x42\xa4\xe9\x9a\x77\x6e\xcb\x92\x0b\x7f\x8b\x23\x10\x39\xe5\xa7\x52\x94\x5b\xfc\x30\x63\x66\xff\x42\x4d\x86\x04\x1c\xb6\x20\xef\x4a\x8a\xc3\xef\xae\xfa\x51\x72\xb9\x86\x9a\x86\x2a\xbd\x9b\x60\x6d\x54\xc0\xc0\xac\x48\xab\xa2\x8c\x05\x11\x25\x69\x49\x18\xe6\x74\x21\xf7\xce\xa8\xdf\x1b\x3c\xa2\xf5\x83\xc1\x41\xbc\x76\xfb\x63\x2b\x10\x7b\xc4\xd0\xc9\xb9\xbd\x68\xff\x09\x00\x00\xff\xff\x29\x8e\xcb\xf8\xf3\x13\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
