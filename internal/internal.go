package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\x24\x39\x15\xbf\xf7\xa7\x78\xb4\xc4\xaa\x7a\x93\xed\x24\x7b\x00\x89\x6c\x21\x6d\x86\x9d\x89\x56\xb3\x33\x43\x12\xe0\x10\xe5\xe0\xaa\x7a\xdd\xed\x49\x95\x5d\x63\xbb\x3a\xe9\x89\x22\x21\x38\x71\x5a\x09\xc4\x07\x40\xe2\x00\x17\x2e\x70\xe1\xc2\xb7\x99\xd1\xf2\x2d\xd0\xb3\x5d\x55\x2e\x57\x65\x27\x03\x17\xe6\xb0\xdb\xb1\xdf\x9f\xdf\x7b\xef\xe7\xf7\xec\x3a\x38\x00\x85\xa6\x51\x02\x98\x52\x6c\x07\x25\x8a\xb5\xd9\xcc\xb8\x30\xf4\x33\x61\x62\x77\x79\x05\x6c\x71\x77\x3f\x9b\xc5\xa2\x39\xab\xad\x5c\xce\xea\x58\xce\xad\xcb\x7a\x97\x64\x3b\x83\x97\x57\x50\x68\xb3\x0f\xfe\xb7\x56\x79\x64\x6f\xc3\xf4\x26\x97\x05\x5a\x35\xfa\x83\xec\x81\xb6\x52\xb5\xe2\xc2\x94\x16\x49\x67\x7f\x25\x55\xc5\x8c\x06\x96\xe7\x52\x15\x5c\xac\xc1\x48\x60\xe0\x96\x41\xd7\x98\xf3\x15\x47\x05\x4c\x14\x70\xa3\xb8\x41\x4d\x02\xda\x30\x51\x30\x55\x80\x6c\x4c\xdd\x98\xa5\x33\xbd\x4a\xb4\x51\x64\xc2\x69\xef\x03\x39\x5a\x2e\x97\xff\x8d\x2f\x17\x8e\x06\xb3\x41\x50\xa8\x9b\xd2\x90\xbc\xb3\xbf\x9c\x79\x3f\xfa\x51\x6e\xa1\xf5\xdb\x68\xeb\x73\x83\x50\xe0\x8a\x35\xa5\xe9\x76\x56\x52\x01\x37\x1a\x64\x8d\x8a\x89\x42\x3f\x2a\xdc\x64\xe0\x87\x69\x8d\xca\x7c\xf5\xa6\x61\xa5\x4b\xf0\x91\x03\xc2\x3e\x6f\x61\xe4\x72\x8b\xca\xf8\x18\xc8\x2c\x15\xd1\x11\x60\x39\xf3\x05\x35\xf2\x64\x67\xf0\x4b\x5a\x6b\xa3\xb2\xb5\xeb\xd5\x7b\x25\x87\x6c\x90\x10\x23\xcf\xed\x8f\x96\x2b\x19\xe9\xe6\x25\xd3\x1a\xdc\xc6\x49\xc3\xcb\x02\xd5\xdd\x0c\x00\x5a\x12\x65\xcd\x0a\x52\xb8\x3c\xbc\xba\xbb\x3f\x9e\xd9\x8d\x83\x03\x60\x75\x8d\xa2\x80\x5c\x0a\x83\xc2\x26\x21\x6b\x56\xfb\xc0\xcd\xa0\x32\x8e\xe2\x20\x57\xa0\xad\x22\x91\xce\xa6\xcd\xc3\xe8\x43\xb0\xdb\x81\x53\x83\x55\x0d\xe9\x30\xde\xc5\x71\x27\xe5\xdc\x27\xd6\x27\x89\x06\x5b\x9e\xe8\x74\xa4\x82\x9d\x7b\xfb\xdf\x08\x7d\xf6\x61\xdc\xd9\xb2\x03\xfe\x2b\x02\x4e\x70\x74\x90\xbe\x49\x44\xd9\x34\x9c\xac\xc3\x62\xff\xb7\x56\xf2\x26\x21\xc3\x22\x30\xc3\x57\x90\x08\xf8\x29\x1c\x2e\xa0\x5f\xf4\xa8\x6f\x36\x28\x08\x9e\x42\xe0\x1a\x84\x34\x80\x42\x36\xeb\x0d\xe8\x9a\xe5\x04\x7a\x65\x96\x03\x1d\x32\x46\x2d\x23\x6b\x56\x0b\xf8\xcc\x61\xa0\x9f\x5f\x80\x88\xcd\x07\xa9\x17\x78\x73\xe2\x4a\xde\x2a\xec\xc3\xe7\x9f\xb6\x76\xf6\x84\xe5\x41\xac\x6b\x3b\x90\xd3\xdc\xa7\x94\x2e\xc6\x22\x8e\x47\x4e\x66\xb8\x7b\xdf\xfd\x75\xdf\x16\xc9\xe7\xc8\x13\xc4\xd3\x25\xc8\x93\x4f\x6b\x4f\xe8\xce\xe5\xfd\xec\x7e\x36\xe0\xb4\xbe\x0b\x4d\xbd\x96\x5c\x78\xde\x5d\x5e\x01\x96\x58\xe9\xfd\x76\x4f\x63\x1d\x95\x82\x32\x60\x65\x16\x90\xa6\xe3\xa2\x78\x14\xf3\x79\x1f\xcf\xfd\xf7\xe8\x1f\x3d\xa0\x6f\x25\x2e\x0f\xaf\xa6\xac\xc4\x07\x23\xd3\xf1\xb1\xc0\x90\xfd\x96\x4f\x90\xba\x5a\xeb\x05\x7c\x3a\xc0\xf0\xd9\x51\x20\x4a\x4d\xcd\xf2\x8f\xa7\x87\xc7\xc0\xe1\x0b\xe8\x25\x8f\x81\xef\xed\xc5\x68\xdb\x2c\x41\xea\x11\xf3\xab\x61\x1d\x1f\x84\x18\xb1\x81\x00\x0a\xd8\x6b\x41\x7e\x6f\xd8\x83\xbe\x04\x3a\x83\x74\xb8\x94\x04\xea\x3a\x5b\xda\x43\x25\xc2\x35\xdf\xfb\xb9\xd2\xa6\x03\x1e\xa6\x5a\x67\xcb\xb0\x25\x59\xc1\xb1\xbe\x42\xd2\xd6\xd9\xb2\xa5\xe2\xe8\x84\x2b\x34\xbe\x3d\x5a\x06\x76\x5d\x46\xc3\x7c\x3b\xa7\x46\x43\x8d\x85\xba\x8e\x5c\x01\xf3\x1d\x7a\xce\xe6\x33\xdf\x38\xfc\x58\x77\x43\x61\x1b\x4d\xed\xaf\xcf\x5f\xbe\xf0\x48\xda\x56\x4e\x4b\x83\x49\xed\x84\xde\x34\xa8\x76\x70\xc3\xcd\x06\x6a\x66\x36\x33\x92\xa0\x8d\x67\x68\xda\x6e\xfb\x5a\x4b\xd1\x51\x9e\x84\xac\x01\xb2\x70\x7a\x71\xf1\x0a\x4a\x9e\xd1\xef\x33\xd4\xb5\x14\x1a\xad\xf8\xec\xa9\x9b\xa4\xd6\xa9\xbb\x70\x14\x38\xb0\xd1\xfd\x41\xe2\x7e\x22\x9d\xa1\xb6\x16\x36\xa6\x2a\x5b\x0b\xa7\x17\xdf\x3c\xff\x80\x05\x12\x6f\x63\xa2\x0d\x48\x14\x96\xcc\xf0\x2d\xda\x3f\x35\x54\x6c\x07\xb2\xe2\x74\x6d\x62\xf6\x9a\xa0\x4b\xa6\x37\x8b\x36\x33\x3f\xa7\x14\xbc\x62\x66\x93\xc4\x31\x76\x09\x75\x5d\xde\x71\x62\xcb\xca\x06\xed\x61\xa0\x35\xc1\x2a\xa4\xb1\x56\xd5\x52\xa0\x30\x54\x2c\x5a\xb6\x69\xed\xc6\xe8\x53\xa9\xaa\x5f\x92\x5a\x32\x85\xff\x1a\x77\xff\xa3\xb7\x57\x2f\xcf\x2f\x5a\x5f\xaf\xa4\x36\x1f\xe9\x0f\x14\xbe\x69\x50\x1b\x50\xec\x06\x32\x59\xec\x5a\x5b\x67\x6e\xfd\x44\x16\xbb\x51\x6e\x5c\xc7\x3c\x35\xa6\x7e\x42\x33\xfd\xd6\x0c\xba\x26\x89\x39\xc6\x47\x14\xf0\x6c\x8d\x8f\x0b\xb1\x00\x52\x27\xbc\x0d\xce\x4a\xc8\x23\x67\xc0\x85\x62\x59\x13\x4e\xea\x88\x27\xce\x0d\x8c\xfc\x10\x57\x20\x85\xed\xc8\x83\xd5\x0f\x3d\x58\x56\x85\x1e\xbc\x85\x37\x1d\x5b\x26\xcc\xd3\x15\xa4\xa7\x93\xcd\xd5\xe8\xdc\xd7\xc7\x13\x03\x6b\x15\x57\xcc\x16\x29\x36\xbf\x85\x34\xe0\x92\xc3\x49\x82\x23\x1f\xdb\x29\x1f\xf5\x14\x33\x1e\xf4\x33\xe4\xd1\x23\x7c\xd9\x2e\x3c\x1b\xb4\xc0\x9e\x3d\x63\x1f\xc4\x33\x48\x07\x14\x9b\xce\x17\x09\xf6\x93\xfa\xe0\x00\x4e\x38\xdd\xe7\x65\x63\x70\xb6\x31\xa6\x3e\x65\xa2\x28\xbb\x78\x2a\x34\x1b\x59\x44\x8d\x62\xd5\x88\x1c\x92\x80\xab\x0b\xd8\x58\x2d\x0f\x8b\x1a\x87\x7f\xcb\xcc\x49\x23\x9d\xef\x05\x58\x02\x3d\xc8\xcd\x2d\xa4\xe1\x4a\xdb\xd8\x9d\xbd\x24\x37\xb7\x8b\x63\x07\xf3\xac\x11\x40\xf8\x40\xa3\xda\xa2\x5a\x5a\xb0\x67\x4d\x7b\x99\x00\x56\x14\xaa\x3d\x87\xe7\x3b\x6d\xb0\x02\xa9\x81\xd5\x7c\xd6\xdd\x36\x9e\xa1\x79\x79\xfe\xa5\x5a\xeb\x84\x04\xbd\xde\x13\x59\x55\x4c\x14\xad\x19\x6a\x09\x5d\xb8\xf4\x7a\x50\x6b\x12\xb6\x97\xcf\xa7\xbc\x4f\xcc\x8a\x97\xf8\x22\x94\xb5\x9d\x65\xdf\x5e\x00\x6a\x54\x15\x29\x9d\x61\x25\xb7\x23\x8d\xc0\xf7\x33\x34\x37\x45\xd2\xf5\x7f\x3d\x80\xed\xef\x50\x76\xed\xae\xbb\xf8\x3f\x43\x63\x05\xd4\x5a\x2f\x03\x76\x5c\x5e\xc1\x3a\x88\x2e\x2e\x7a\x10\xf9\xc4\x19\xcc\x1f\x91\x82\xd8\x62\x9b\x36\x27\x4c\x22\xa1\x61\x9a\xbe\xc6\xa0\x30\x5c\x8a\x9f\xd8\x7c\xd0\x95\xd9\x3d\xed\x72\x5e\xb1\xd2\x4a\xdd\x7c\x7c\x52\x3b\x18\x7d\x41\x7a\x25\x2f\x6d\x25\x23\x34\xca\x96\x42\x07\x5d\x9f\xd4\x66\x2e\xa0\xe9\x2a\x75\xae\x7c\x19\xbb\x9d\x91\x69\x37\x64\x18\x28\x29\x0d\x16\x6e\x68\x92\x13\xc8\xa5\x52\x76\x8e\xb7\xaf\x69\x72\x9f\x37\x4a\xd1\xb0\x29\xb8\xc2\xdc\x48\x9a\x6b\x41\x2d\xd6\x9e\x12\x13\x15\xa4\xf5\xe3\xc1\x0d\xe7\x67\xcc\x60\xc0\xa5\x27\xce\xf2\x05\xaf\xba\x70\xcc\xdb\x2e\x97\x25\xdb\xc9\xc6\x58\xb2\x51\x3e\x7f\x21\xf8\x6d\x2f\x15\xcc\x20\x32\x4a\x26\xee\x22\x58\x8f\xb3\x3e\x81\x3b\x54\x24\x0d\x2f\x1a\xa6\x91\x00\x35\x11\xa0\xd8\x92\x05\x6c\xde\x46\x29\x78\x22\xab\x9a\x97\xa8\x82\x93\x0e\x45\x53\xd5\x5f\x9e\x5f\x24\x1d\xbd\x8b\xf0\xd0\xd1\xee\xf9\xae\xca\x64\x19\x0b\xf8\x04\x7c\x25\x8c\xda\x39\xf7\x34\xf7\xae\x71\xb7\x6f\x99\xe5\x1c\xdb\x5d\x10\x78\x6b\x82\xbf\xed\x4d\xf0\xda\xcf\xc9\xfd\x56\x26\x88\xe1\x1a\x77\xe9\x75\xdf\x8b\xad\xbd\x34\x18\x9b\x64\x2f\x15\x7d\x68\x0e\xc9\x37\xac\xbe\xeb\x9d\xd0\xb3\x9c\x65\x25\xd2\xd3\xf0\xe8\x47\xdd\x33\x90\x72\xa7\xf9\x5b\x4c\x0f\xfd\xfd\xb7\x6e\xdc\xb7\x0f\x02\xee\x10\x91\xb7\x00\xcc\xc1\x01\x18\x59\x48\xc8\x95\xd4\x5a\x6e\x51\x7d\xcd\x11\xde\xff\xee\xaf\xef\xfe\xf6\xcf\xe0\xf5\x94\x10\xe6\x74\x3e\x5f\x4c\xbd\x99\x26\x1f\x5c\xfe\x93\x16\xa5\x13\x52\xf7\x75\x6b\x38\xe2\xec\x6b\xc7\x6f\x59\xa9\x1f\xba\xef\x04\x14\xd5\x02\x7a\x39\x97\x3f\x32\x62\xb7\x06\x0f\x1d\x7a\xd6\x21\xfc\x20\x05\xc1\xcb\x08\x9a\x53\x33\x58\xd5\xee\x57\x0a\x38\x7c\xf8\xd8\x27\x57\xbf\xef\x8d\x4c\x3c\xc5\xed\xcd\xc7\xd1\xf6\x94\xe9\x4d\x1b\x4d\xa7\xba\x1c\xc6\x15\x62\x1b\xa8\x05\xa1\x7e\xf2\x09\x15\x84\x96\x86\x56\xc6\xce\xe9\x5f\x2f\xe3\xa8\x02\x01\x03\xe3\x7f\x71\x45\xc6\x95\x19\x59\x85\x10\x45\xcf\xe5\x69\xcd\xb6\x06\x90\x7a\xb2\x5b\x62\xf9\x66\x8b\x51\x1a\x88\x89\x7b\x7b\x9e\x89\xd6\x16\x60\xa9\x71\xfc\x35\xe5\xdd\xb7\xbf\xf9\xee\xd7\xbf\x85\xd7\xc5\xf5\xd1\xf2\xc7\xf0\xef\x3f\xfc\xeb\xbb\x3f\xfd\xe5\xdd\x9f\xff\xf1\xfe\xdb\xdf\xbf\xff\xfb\x1f\x3f\xec\xdf\xb9\xa7\xf2\x4d\xfb\xef\x43\x09\xaf\x6e\x74\x1a\xd6\xd8\x1d\x8f\xc1\xd7\x86\xff\x53\xbe\x5b\xce\xa2\x2d\xd2\x34\xeb\x1f\xe0\x2a\x4e\x70\x94\xf8\xe9\x49\x68\xb7\x89\x94\x0f\xf0\x75\x82\x97\xed\xd7\x92\xe5\x04\x17\x87\x8c\xa1\x48\x30\xe2\xd5\xf0\xc3\x4c\x00\x71\x70\x4a\x82\x63\x82\x13\xc7\xe3\x21\x08\xf7\x13\x1c\xf3\xb2\x82\x97\x31\x08\x4f\x06\x4a\xdc\x1a\xcd\x39\x7f\x8b\x13\x03\x97\x88\x14\x8c\x1a\x9a\x35\xcf\xb9\xb8\xc6\xe2\x39\xd7\xc6\xf7\x67\xb7\xf0\x42\x16\xd8\x8f\x8b\x00\x59\xbf\x1d\xcc\x8b\x7e\x31\x89\x1f\x6f\xee\x71\x3a\x78\x4e\xd9\xb2\xa7\x7d\x10\xfd\x6c\xe8\xc1\xdc\xc5\xce\xec\x53\x97\xe6\xac\x36\x0f\x8c\x08\x56\x14\x23\xef\x54\x96\x2d\x25\xfe\x23\x8e\x40\xe0\x94\xde\x81\x41\x6c\xe1\xab\x93\x2c\xfb\x0f\x40\x53\x04\x6e\xbf\x0d\x95\x43\x4a\x11\xfc\xe1\xaa\x6b\x25\x77\x23\xa9\xa5\xcf\xd2\x87\x0d\x8c\x5a\x05\x4c\xf4\x0a\xba\x20\x84\x84\x08\x82\xd4\x86\x29\xb2\x69\x21\x47\x67\xd4\xed\x4d\x1e\xd1\xf6\x35\x64\x45\x1c\x77\xe3\xb6\xe5\x0d\x3b\x89\xa9\x93\xf3\xf1\xa4\xfd\x4f\x00\x00\x00\xff\xff\xdb\xa1\x05\x77\xf1\x1a\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
