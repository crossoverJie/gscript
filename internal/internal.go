package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\xdc\x46\x12\xbe\xcf\x53\xd4\x0e\xb0\x06\x05\x0b\xa3\xf5\x1e\x76\x81\x15\x78\xb0\xb5\xb6\x04\xc3\x3f\x5a\x8d\x36\x39\x08\x3a\xb4\x86\x35\x33\x6d\x91\x6c\xaa\xbb\x38\x12\x35\x10\x10\x24\xa7\x9c\x0c\x24\xc8\x03\x04\xc8\x21\xb9\xe4\x92\x5c\x72\xc9\xdb\xd8\x70\xde\x22\xa8\xee\x26\xd9\xe4\x50\xb0\x94\x5c\xa2\x83\xc0\xe9\xfe\xea\xab\xbf\xaf\xbb\xc8\x9d\x1d\xd0\x48\xa5\xce\x41\x68\x2d\x2a\x48\x31\x5f\xd0\x72\x24\x73\xe2\xc7\x48\xe4\xd5\xc9\x29\x88\xad\xf5\xcd\x68\xd4\x42\x97\xc2\x2c\x67\x2a\x41\x0b\xe3\x1f\x8c\x03\x63\x51\x85\x96\x39\xa5\xd6\xb2\xb1\x9b\x2b\x9d\x09\x32\x20\x66\x33\xa5\x13\x99\x2f\x80\x14\x08\x70\xcb\x60\x0a\x9c\xc9\xb9\x44\x0d\x22\x4f\xe0\x52\x4b\x42\xc3\x00\x43\x22\x4f\x84\x4e\x40\x95\x54\x94\x34\x71\xd4\xf3\xc8\x90\x66\x0a\x67\xbd\x0d\xec\x68\x32\x99\xfc\x11\x5f\x2e\x1d\x03\xb4\x44\xd0\x68\xca\x94\x18\xef\xf8\x27\x23\xef\xc7\xdc\xc9\x2d\xd4\x7e\x4b\x63\x7d\x2e\x11\x12\x9c\x8b\x32\xa5\x66\x67\xae\x34\x48\x32\xa0\x0a\xd4\x22\x4f\xcc\x9d\xd2\x8d\x3a\x7e\x84\x31\xa8\xe9\xe9\x45\x29\x52\x57\xe0\x47\x2e\x10\xf1\x4f\xbb\x7d\x56\x11\x9e\x9c\x02\xa9\x27\x15\xe1\x63\xee\x67\x1d\xb5\xed\x8d\x7f\x26\x35\xb5\x0f\x91\x87\x9f\xd5\x29\x88\xa2\x40\x8e\x6b\xbc\x1a\x73\x40\x9c\x03\xe6\x09\xa8\x39\x08\xaf\x8e\xb1\x18\x8f\x1c\xaa\x56\x86\xf3\xbf\xea\x09\xe4\xf9\xf4\xf5\x2b\x5f\xc7\xda\x2b\x2f\x75\x44\xe1\x40\x17\x25\xea\x0a\x2e\x25\x2d\xa1\x10\xb4\x1c\x31\x82\x37\xf6\x91\xea\xd8\xdf\x18\x95\x6f\x7b\x36\x0b\xb2\x04\xcc\x70\x70\x7c\x7c\x08\xa9\x3c\xe3\xe7\x23\x34\x85\xca\x0d\x5a\xf8\xe8\x99\x6b\x9a\x75\xca\x22\x65\xb5\x76\x38\x9a\x1f\x0c\x67\x42\x47\x61\x19\x96\x94\xa5\x35\xc3\xc1\xf1\xcb\x17\x1f\x61\x60\x78\x9d\x13\x6f\x40\xa4\x31\x15\x24\x57\x68\x7f\x1a\xc8\x44\x05\x2a\x93\x7c\xa2\x84\x55\xa4\x49\x85\x59\x6e\xd5\x95\xf9\x1f\x97\xe0\x50\xd0\x32\xea\xe7\xd8\x14\xd4\x49\x74\x2e\xb5\x21\x58\x89\xb4\x44\x2b\x26\x5e\xcb\x45\x86\x09\xcc\x54\x56\xa8\x1c\x73\xe2\x66\xf1\xb2\x2d\x6b\x23\xe1\x67\x4a\x67\x9f\xb0\x59\x34\x14\xff\x39\x56\x7f\xd2\xdb\xe1\xeb\xe9\x71\xed\xeb\x50\x19\xba\xa7\x3f\xd0\x78\x51\xa2\x21\xd0\xe2\x12\xce\x54\x52\xd5\x5c\x47\x6e\xfd\x89\x4a\xaa\x8d\xda\xcc\x52\x61\x0c\x1c\x10\x15\x7b\x2a\x27\xbc\xa2\xf5\x08\x00\xc2\x06\xed\xda\x85\x9e\x04\xbc\x5a\xed\x56\x80\x67\x15\x40\xec\xc0\xab\xad\xdd\x66\x3b\xd4\x91\x23\x70\xa9\x58\xd5\x38\xd8\x8d\xfd\xdf\xd3\x89\x73\x03\x1b\x7e\x58\x2b\x10\xc3\x6a\xc3\x83\xb5\x0f\x3d\x58\x55\x85\x1e\x3c\xc3\x45\xa3\x96\x01\xfa\x02\xe2\x40\x4e\xb6\x56\xad\x27\x5f\xec\xa2\x26\x0d\x59\xe7\xfd\x8e\xd9\x26\xf5\xe9\x57\x10\x07\x5a\x72\x71\x32\x70\xc3\xc7\x6a\xc8\x47\x31\xa4\x8c\x5b\xfd\x74\x75\x74\x07\x5f\xfc\xaf\xe3\x4f\x07\xea\xd9\xf4\xc1\x3a\x83\xb8\x23\xb1\xe1\x7a\x31\xb0\x4e\xc7\x5e\x13\x4f\x24\x8f\x0e\x55\x12\x8e\x96\x44\xc5\x81\xc8\x93\xb4\xc9\x27\x43\x5a\xaa\xa4\x77\x51\xcc\xcb\x7c\x06\x51\xa0\xd5\x2d\x58\x5a\x2b\x1f\x16\x5f\x1c\x7e\x6c\x8e\xd9\x22\x1e\x3f\x0c\x62\x09\xec\x60\x46\x57\x10\x87\x2b\x91\x07\x39\xbe\x68\x46\x57\x5b\xbb\x2e\xcc\xa3\x32\x07\x8e\x0f\x0c\xea\x15\xea\x89\x0d\xf6\xa8\xcc\xeb\x48\x45\x92\xe8\xfa\x1c\x4e\x2b\x43\x98\x81\x32\x20\x0a\xe9\x4f\xdf\xc9\x29\xec\x23\xbd\x9e\x3e\xd6\x0b\x13\x05\xe3\x63\x4f\x65\x99\xc8\x93\x9a\x86\xaf\x84\x26\x5d\x1e\x54\x7a\xc1\xe0\x4f\x79\xae\x3d\x93\x6d\x61\xe6\x32\xc5\x57\x21\xd6\xde\x2c\xdb\xc0\x67\xa6\x40\x9d\xb1\xd1\x11\x66\x6a\xb5\x61\x11\xf8\xde\x47\xba\x4c\xa2\xe6\xfe\x37\x9d\xb0\xdd\x8d\xe0\x52\x59\x8f\xea\xc2\xee\x23\x59\x80\x5e\x98\x49\xa0\x8e\x93\x53\x58\x04\xd9\xf5\x9b\x1e\x64\x3e\x70\x06\x67\x77\x28\x41\x9f\xb1\x2e\x9b\x03\x33\x24\x24\xe6\xe9\x4b\x84\x39\x49\x95\xff\xc7\xd6\x03\xa4\xf1\x6f\x11\x33\x99\x89\xd4\xa2\x2e\xef\x5f\xd4\x26\x8c\xb6\x21\xad\x91\x47\x5b\x64\x2f\x1a\x6d\x5b\x61\x82\x5b\x9f\xcd\x46\x2e\xa1\xe1\x2e\x35\xae\x7c\x1b\x9b\x9d\x0d\x6a\x37\x64\x04\x68\xa5\x08\x13\x37\x34\xd9\x09\xcc\x94\xd6\x76\x8e\xd7\x2f\x6e\xec\x7e\x56\x6a\xcd\xc3\x26\x91\x1a\x67\xa4\x78\xae\x05\xbd\x58\x78\x49\x0c\x74\x90\xd7\xdb\x93\xcb\x82\xf9\xaf\x20\x0c\xb4\xb4\xe7\x98\x8f\x65\xd6\xa4\x43\xd7\x4d\x2d\x53\x51\xa9\x92\xac\xd8\xb8\x9e\xff\xcf\xe5\x55\x8b\x0a\x66\x10\x93\x32\xc5\xba\x17\xd6\xdd\xd8\x07\xe2\x0e\x0d\xd9\xc2\x43\xc3\x32\x72\x40\x65\x2f\xa0\x3e\x93\x0d\x98\xae\x7b\x25\xd8\x53\x59\x21\x53\x7e\x01\x6e\x4e\x3a\x24\x65\x56\x3c\x9e\x1e\x47\x8d\xbc\x93\xf0\xd0\xf1\xee\xb4\xca\xce\x54\xda\x07\xf8\x02\x3c\xcd\x49\x57\xce\x3d\xcf\xbd\x73\xac\xb6\xad\xb2\x9c\x63\xbb\x0b\x39\x5e\x51\xf0\xdb\xbe\x09\x9e\xfb\x39\xb9\x5d\x63\x82\x1c\xce\xb1\x8a\xcf\xdb\xbb\xd8\xf2\xc5\xc1\xd8\x64\xbe\x38\x6f\x53\x73\x91\xbc\x14\xc5\xba\x75\xc2\xaf\xc2\xe2\x2c\x45\x88\xe1\xe4\xd1\xbf\x4e\xd7\x37\xbb\x4d\xed\x8c\xbc\xc6\xf8\x1f\xbb\xee\x96\x28\x4a\xf7\x9a\xcd\x81\xbb\x88\xd8\x5b\x10\xcc\xce\x0e\x90\x4a\x14\xcc\xb4\x32\x46\xad\x50\x3f\x97\x08\xef\xbf\xfc\xe1\xdd\x8f\xbf\x34\x18\x39\x8f\x38\xe6\x78\x3c\x0e\x0c\xdb\x6e\xb4\x91\xdf\xb4\x26\xfe\xeb\x89\xcb\x09\xb1\xfb\x90\xea\x8e\x38\x46\x48\xbf\x65\x51\x7f\xb7\x5f\x65\x36\xab\x2d\x68\x71\xae\x7e\x4c\x62\xb7\x4e\xe4\x69\xc0\x31\x87\x08\xe1\x6f\x31\xe4\x32\xed\x85\xe6\xcc\x08\xb3\xc2\x3d\xc5\x80\xbb\x1d\x00\xbf\xf7\x45\xed\xbe\x27\x81\x2e\x4b\x1d\xa8\x3f\xa7\x07\xc2\x2c\xeb\x6c\x1a\xd3\x49\x37\xaf\x30\xb6\x8e\x59\x90\xea\x83\x07\xdc\x10\x5e\xea\xb2\x6c\x3a\xe7\xbf\x16\xe3\xa4\x02\x81\x02\xfb\x7f\xfd\x8e\x6c\x76\x66\x83\x15\xc2\x28\x5a\x2d\x0f\x5b\xd6\x3d\x80\xd8\x8b\xdd\x0a\xcb\x5f\xb6\xd8\x2b\x03\x2b\xf1\xe1\x43\xaf\x44\xcb\x05\x98\x1a\xec\xd5\x78\x67\x07\xde\xbd\xfd\xfc\xc3\x67\x5f\xc0\x9b\xe4\xfc\xd1\xe4\xdf\xf0\xdb\xd7\xbf\x7e\xf8\xf6\xfb\x77\xdf\xfd\xfc\xfe\xed\x57\xef\x7f\xfa\xe6\xe3\xfe\x9d\x7b\x6e\xdf\xb0\xff\x36\x95\xf0\xd5\x8d\x4f\xc3\x02\x9b\xe3\x11\x14\xff\x2f\xab\x77\xab\x59\xb4\x4d\x1a\x56\xfd\x2d\x5a\xc5\x01\x8d\xb2\x3e\xbd\x08\xed\x36\x8b\xf2\x16\xbd\x0e\xe8\xd2\xdf\xc3\x38\x19\xd0\x62\x57\x31\x9c\x09\xf6\x74\x75\xd3\x39\xc1\x41\x88\x9d\x53\x12\x1c\x13\x1c\x38\x1e\xb7\x85\x70\x33\xa0\x31\x8f\xcd\x65\xda\x0f\xc2\x8b\x81\x0b\xb7\x40\x9a\xca\x6b\x1c\x18\xb8\x2c\xa4\x60\xd4\xf0\xac\x79\x21\xf3\x73\x4c\x5e\x48\x43\xfe\x7e\x76\x0b\xaf\x54\x82\xed\xb8\x08\x22\x6b\xb7\x83\x79\xd1\x2e\x46\xfd\x8f\x37\xf7\x71\xda\xf9\x9c\xb2\x6d\x8f\xdb\x24\xda\xd9\xd0\x06\xb3\xee\x3b\xb3\x9f\xba\x3c\x67\x0d\xdd\x32\x22\x44\x92\x6c\x78\xe7\xb6\xac\xb8\xf0\xf7\x38\x02\x81\x53\xfe\x0e\x0c\x72\x0b\xbf\x3a\x99\xd9\x7d\x7e\xc7\x43\x02\xf6\x5b\x90\x76\x25\xc5\xe1\x77\x57\xdd\x55\xb2\xde\x40\x4d\x7c\x95\x3e\x4e\xb0\x71\x55\xc0\xc0\x5d\xc1\x2f\x08\xa1\x20\x82\x24\x0d\x09\xcd\x9c\x36\xe4\xde\x19\x75\x7b\x83\x47\xb4\xfe\x1a\xb2\x10\xa7\xdd\xfe\xb5\xe5\x89\x1d\x62\xe8\xe4\xdc\x5f\xb4\xbf\x07\x00\x00\xff\xff\xc0\xd1\xe0\xb8\x0c\x15\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
