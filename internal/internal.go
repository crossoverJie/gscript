package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x31\x6f\xdb\x3a\x10\xde\xf5\x2b\xee\x05\x78\x81\x8c\x18\xd6\xcb\xf2\xde\x60\x68\x0c\x5e\x11\xa4\xe9\x90\xd1\xf0\xc0\x58\x67\x5b\xb1\x22\x29\x24\xed\xd4\x31\x0c\x14\xed\xd4\x29\x40\x8b\xfe\x80\x02\x1d\xda\xa5\x4b\xbb\x74\xe9\xbf\x49\x90\xfe\x8b\xe2\x8e\x94\x49\xc9\x32\x82\x6c\xe5\x12\x93\xf7\xdd\xdd\x77\xbc\xef\xc4\x44\x11\x48\xd4\x73\x99\x83\x90\x52\x2c\x21\xc3\x7c\xa2\xa7\x41\x9a\x6b\xfa\x19\x8a\x7c\x39\x18\x82\xe8\xac\xd6\x41\xe0\xa0\x53\xa1\xa6\xa3\x22\x41\x86\xd1\x86\x70\xa0\x18\x55\xca\x34\xd7\x59\x1e\xd2\x46\x28\x85\x52\x1f\x5d\xcd\x45\x66\xf6\x65\x89\x79\x12\x36\xa2\x1d\x9f\xbd\x38\x05\xa5\x65\x9a\x4f\x02\xf3\x87\x8f\x38\x26\x67\x8e\x22\x83\xb9\x9a\xa3\x5c\xc2\x75\xaa\xa7\x50\x0a\x3d\x0d\x08\x40\x86\xff\x51\x87\xd6\xf1\x42\x15\x79\xd7\x06\x63\x10\xe7\x1a\x65\x42\x29\x38\xca\xb5\x5c\xae\x02\x00\x00\xf2\x9c\xe1\xb2\xbb\x10\xd9\x1c\xfb\x7c\xc4\x56\xc8\xf1\xa5\xf6\xf6\xcc\x61\xd6\x65\xfc\xa2\x5b\x61\x3a\x26\x08\xad\x19\x2e\xe3\x59\x7f\xb3\xe5\x78\xf1\xc2\x1d\x50\xbc\x38\x37\xfb\x75\xb0\xb6\x4c\x9e\x8b\x72\xe5\x92\x0c\x86\xa0\xc5\x79\x86\x10\xc3\xe0\xf0\xdf\xe1\x6a\x6d\xe0\x74\xb7\x2a\xbd\xc1\xf8\x9f\x7e\xc0\x07\xe5\x5c\x87\x15\x71\xc3\x88\xb2\x79\x64\xa2\x08\x74\x91\x14\x30\x92\x85\x52\xc5\x02\xe5\x71\x8a\x70\xff\xf6\xcb\xdd\xd7\x1f\x1b\x4c\x3a\x0e\x89\x73\xbc\xb7\xe7\x39\xd2\x32\xcd\x70\xcc\xd7\xce\xc5\x36\x99\x3a\x0e\xb1\xe9\xf7\x0c\x97\x9d\x7e\x0d\x91\x5a\x13\xa3\xfe\x66\xf1\x70\x55\x1d\x70\x38\x73\x7f\x14\x84\x4d\x83\x74\xe8\x6c\xe7\x45\x91\xc1\xb5\x4c\x35\x9b\x65\xd5\x16\xc3\x19\x42\x84\xbf\x62\xc8\xd3\xac\xc1\xda\x44\xd4\x78\x59\x9a\x5f\x31\x78\x7e\xb4\xc6\x85\x84\xd0\xd9\x6d\x10\xa8\x47\xa9\x6a\x18\xcd\xa5\xc4\x5c\x3f\x13\x6a\x5a\x15\xba\x71\xed\xd5\x4b\xf6\xb9\xd5\xdc\xbc\x5b\xd8\xdf\xa7\x5e\xd1\x51\x3d\xca\x76\x72\x5a\x0e\x63\x54\x04\x9e\x38\x9b\xcb\xde\xd3\x58\x64\x6a\x07\xa2\xd9\xce\x6a\xad\xb7\x4e\xfc\xcb\x73\x1c\xdc\x20\xb4\x7b\x56\x0d\x84\xd8\x4e\x0a\xab\x92\x29\x77\x01\x1b\x17\x45\x97\xc4\x94\x5b\x4a\x27\x89\x1f\x1c\x34\x53\x39\x19\x02\x66\x0a\x1b\xfd\x8a\x22\xb8\xbb\x7d\xfd\xf0\xea\x0d\x5c\x24\xb3\xc3\xde\x7f\xf0\xeb\xfd\xcf\x87\x8f\x9f\xef\x3e\x7d\xbf\xbf\x7d\x77\xff\xed\xc3\xe3\x4c\x0d\x51\x92\x42\x3d\x73\x93\x8d\x65\x62\xff\xd0\xd0\x4d\x70\x33\x85\x5e\x35\x7f\xec\x58\xb1\xfe\x91\xdb\xd9\x3e\x41\x3b\x74\x8f\x2d\x7a\xa7\x36\x5a\x41\xb3\x99\x04\xbe\x43\xfb\x2d\x8d\xb6\x5f\x7b\xec\xb5\xe8\xba\xae\x2d\xaa\x04\x1b\x0a\x74\x88\xb6\x38\xb6\x3f\x54\xcb\x04\xf5\x59\x7a\x83\xa1\xc7\xc0\x7a\x50\x6f\xdd\x97\x98\x5f\xa0\x93\x34\x9f\x61\x72\x92\x2a\x6d\xbf\xcc\xe6\xe0\xb4\x48\xd0\x3d\x14\x5e\x1e\x67\xf6\x5e\x0a\x77\xc8\xc2\x58\x78\x99\xd9\x15\x62\x68\xbc\x08\x10\xc3\xd6\x9b\xe0\xa8\xac\x9a\xa9\xc6\xa9\x54\xba\x0b\x99\x50\x7a\xc7\xd3\x20\x92\x64\x2b\x37\x75\x6b\x41\x3d\x79\x82\x26\xbd\xa4\x19\xc4\x7e\x65\x8b\x4e\xfd\x7b\xcc\x9c\x28\xfa\xb6\xa2\xac\x09\xb2\x7a\x8f\x89\x7e\xfd\xd4\xcc\xf6\x6a\x0b\xd5\xb3\x77\xf4\x78\x80\xad\xd9\x85\x96\xe1\x4d\xe6\x97\xa5\x2f\x07\xaf\x48\xa5\x85\xa4\x98\x4c\xb9\x31\x34\xc6\xd6\x3a\x33\xd5\xff\x38\x0c\x31\x3a\x6c\x7e\x47\x6c\x60\x83\x68\x93\xf2\xd3\x25\xfb\x3b\x00\x00\xff\xff\x11\xcf\x4b\x39\xab\x09\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
