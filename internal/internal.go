package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x46\x10\xbd\xeb\x2b\xa6\x06\x1a\x50\xb0\x20\x36\x97\xf6\x60\xf0\xd2\x34\xad\x11\x38\x29\xe0\xe4\x66\xf8\xb0\x16\x47\xe2\x46\xf4\x92\xd9\x5d\x2a\x96\x05\x01\x45\x7b\xea\x29\x40\x8b\x7e\x40\x81\x1e\xda\x4b\x2f\xed\xa5\x97\xfe\x8d\x8d\xf4\x2f\x8a\x99\x5d\x6a\x97\x14\x05\x23\xb7\xf0\x60\x8b\xbb\x6f\x66\xde\xcc\xbc\xd9\x65\x9a\x82\x46\xdb\x68\x05\x42\x6b\xb1\x86\x12\xd5\xc2\x16\x23\xa9\x2c\xfd\x4c\x84\x5a\x5f\x5c\x82\x18\x6f\xb6\xa3\x51\x80\x16\xc2\x14\xb3\x2a\x47\x86\xd1\x0b\xe1\xc0\x30\xaa\xd6\x52\xd9\x52\x25\xf4\x22\x8c\x41\x6d\x9f\xbe\x69\x44\xe9\xde\xeb\x1a\x55\x9e\xb4\xde\xbe\x12\x16\x47\xc6\x6a\xa9\x16\xb0\x40\xfb\xa4\xd1\x1a\x95\x7d\x25\xaf\x31\xf1\xab\xf6\x76\x02\xfe\x67\x29\xd6\x55\x63\x7b\x44\x9e\xbd\xfc\xf6\x85\x07\xb4\x8e\x68\x89\xe9\x30\xe9\x34\x75\x98\x37\x0d\xea\x35\xbc\x95\xb6\x80\x5a\xd8\x62\x44\x00\xda\xf8\x06\x6d\x1b\xeb\xb5\xa9\xd4\x2e\x1a\x81\x38\x16\x79\x28\xac\xad\xa1\x94\x57\xf4\xfb\x1c\x4d\x5d\x29\x83\x0c\x1f\x7d\xcd\xd9\xce\x39\x26\xd5\x82\x8a\xd2\xf1\xb1\x7b\x21\xb8\x27\x74\x8e\x86\x3d\x14\xf6\xba\x6c\x3d\x9c\xbe\x7a\x7e\xf6\x80\x07\x82\x93\x87\x59\x29\x8c\x81\x53\x6b\xeb\x27\x95\xb2\x78\x63\x37\x23\x00\x88\x4d\x4e\x78\xa1\x47\x8a\x32\x5e\x8d\x1d\x36\xc2\x13\x2f\xc8\x1c\x78\x35\x3e\xd9\x6d\xc7\x99\x39\x07\x8e\x0c\xe7\xe1\x60\x5b\xfe\xdb\x63\x7e\x20\x0c\x91\x87\x0c\x56\x7b\x01\xd8\x3c\x0e\xc0\x69\xb6\x01\xb8\x5e\x5f\x4a\x95\x83\xae\x1a\x8b\x23\xea\xc4\xa9\x50\x79\xb9\x53\x88\x33\x9a\x37\x6a\x06\xab\x4a\xe6\x49\x54\x97\x31\x14\x0c\xf5\x6c\xd2\x14\x5a\x6d\x1e\x91\x55\x76\x74\xcc\x5d\x76\xb1\x22\x3b\x98\xd9\x1b\xc8\xe2\x95\xc4\x83\x9c\xbf\x64\x66\x6f\xc6\x27\x8e\xdb\x79\xa3\x9c\x3c\x0c\xea\x15\xea\x29\x33\x3c\x6f\x54\x4b\x4f\xe4\xb9\x66\x1d\xb9\xae\x3d\x55\x56\xaf\x1d\x1d\x2a\xd4\x12\xd7\x93\x95\x28\x1b\x74\xee\x79\x17\x14\xde\xd8\xe8\x9d\xb5\xbc\xf4\x85\x9d\xb4\x98\xa8\xc2\x4b\x5c\x67\xcb\x50\x57\xf6\x97\x45\x85\x26\x7f\x99\x0a\x15\x75\x4c\x9e\x8b\x7a\x13\x82\x5c\x5c\x82\x15\x57\x25\x42\x06\x17\x8f\x3f\xbf\xdc\x6c\x1d\x9c\xda\x6a\xe4\x2d\x66\x9f\x9d\x8c\x78\xa1\x6e\x6c\xd2\x12\x77\x8c\x28\x5a\x44\x26\x4d\xc1\x56\x79\x05\x33\x5d\x19\x53\xad\x50\x3f\x93\x08\xf7\x3f\xfe\x71\xf7\xe7\x3f\x3b\x8c\x9c\x27\xc4\x39\x3b\x3a\x8a\x0c\xe9\x71\x43\x1d\x98\x6f\x83\x89\x3f\x67\x48\x28\x90\xb9\x23\x67\x89\xeb\x48\xaf\x84\x90\x7e\x8b\x51\x9f\xf2\xf9\xc5\x59\x8d\x21\xe0\x5c\xfd\xc8\x09\x6f\x5d\xc8\xcb\xb0\x77\x55\x55\x25\xbc\xd5\xd2\xf2\xb6\x6e\xdb\xe2\x38\x43\x82\xf0\x49\x06\x4a\x96\x3d\xd6\xce\xa3\xc5\xeb\xda\xfd\xca\x20\xb2\xa3\x67\x5e\x69\x48\xc2\xbe\x77\x02\x5d\x2f\x6d\x0e\x33\x77\x08\x9e\x0a\x53\xb4\x89\xee\x4c\xa7\xdd\x94\x63\x6e\x1d\xb3\xa8\x0a\x8f\x1e\x51\xaf\x68\xa9\xeb\x65\x3f\x38\x3d\x01\xe3\x54\x04\x91\x38\xfb\x8f\xaf\xd3\x5c\x94\xe6\x00\xa2\xdf\xce\xf6\xd9\xee\xad\xc4\xc5\x0b\x1c\xc2\x20\x0c\x5b\xb6\x0d\x84\xcc\x4f\x0a\xab\x92\x29\x4f\x00\x7b\x85\xa2\x22\x31\xe5\x81\xd4\x49\xe2\xc7\xc7\xfd\x50\x41\x86\x80\xa5\xc1\x5e\xbf\xd2\x14\xee\xde\x7d\xff\xfe\xbb\x1f\xe0\x75\xbe\x7c\x3c\xfd\x02\xfe\xfb\xf9\xdf\xf7\xbf\xfe\x7e\xf7\xdb\xdf\xf7\xef\x7e\xba\xff\xeb\x97\x87\x99\x3a\xa2\x24\x85\x6e\xe4\x3e\x1b\xcf\xc4\xff\xa3\xa1\x5b\xe0\x6e\x0a\xa3\x6c\x3e\xda\xb1\x62\xfd\x23\xb7\x73\x78\x82\x0e\xe8\x1e\x07\xf4\x4e\x6d\xf4\x82\xe6\x6d\x12\xf8\x01\xed\x0f\x34\xda\x7f\x35\xe0\x74\x40\xd7\x5d\x6d\x51\x26\xd8\x53\x60\x40\x0c\xf9\xf1\xfd\xa1\x5c\x16\x68\x5f\xca\x5b\x4c\x22\x06\xde\x82\x7a\x1b\x4e\x62\xfe\xb8\x38\x93\x6a\x89\xf9\x99\x34\xd6\x9f\xcc\x6e\xe1\x45\x95\x63\xb8\x28\xa2\x38\x61\x3b\xba\x29\xc2\x62\xd2\xbf\x80\xd9\xb4\x7b\xf5\x72\x27\x32\xd8\xbb\x13\x02\x95\x4d\x3f\xd4\x5c\x6a\x63\x27\x50\x0a\x63\x0f\x5c\x0d\x22\xcf\xf7\x62\x53\xb7\x56\xd4\x93\x0f\xd0\x64\x14\x94\xbe\x18\xa2\xcc\xe2\xcf\x13\xf2\xcc\x9c\xc8\xfb\xbe\xa2\xfc\x16\x94\xdd\x1e\x13\xfd\xee\xaa\x9b\xed\xcd\x1e\x6a\xea\x6b\xf4\xb0\x83\xbd\xd9\x85\x81\xe1\xcd\x9b\xeb\x3a\x96\x43\x94\xa4\xb1\x42\x93\x4f\xa6\xdc\x1b\x1a\xb7\x37\x38\x33\xed\xa7\x0c\x43\x9c\x0e\xfb\xe7\x88\x77\xec\x10\x43\x52\xfe\x70\xc9\xfe\x1f\x00\x00\xff\xff\x62\xf8\xbf\x46\x2e\x0c\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
