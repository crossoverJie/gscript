package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\x24\x39\x15\xbf\xf7\xa7\x78\xb4\xc4\xaa\x7a\x93\xed\x24\x7b\x00\x89\x6c\x21\x6d\x86\x9d\x89\x56\xb3\x33\x43\x12\xe0\x10\xe5\xe0\xaa\x7a\xdd\xed\x49\x95\x5d\x63\xbb\x3a\xe9\x89\x22\x21\x38\x71\x5a\x09\xc4\x07\x40\xe2\x00\x17\x2e\x70\xe1\xc2\xb7\x99\xd1\xf2\x2d\xd0\xb3\x5d\x55\x2e\x57\x65\x27\x03\x17\xe6\xb0\xdb\xb1\xdf\x9f\xdf\x7b\xef\xe7\xf7\xec\x3a\x38\x00\x85\xa6\x51\x02\x98\x52\x6c\x07\x25\x8a\xb5\xd9\xcc\xb8\x30\xf4\x33\x61\x62\x77\x79\x05\x6c\x71\x77\x3f\x9b\xc5\xa2\x39\xab\xad\x5c\xce\xea\x58\xce\xad\xcb\x7a\x97\x64\x3b\x83\x97\x57\x50\x68\xb3\x0f\xfe\xb7\x56\x79\x64\x6f\xc3\xf4\x26\x97\x05\x5a\x35\xfa\x83\xec\x81\xb6\x52\xb5\xe2\xc2\x94\x16\x49\x67\x7f\x25\x55\xc5\x8c\x06\x96\xe7\x52\x15\x5c\xac\xc1\x48\x60\xe0\x96\x41\xd7\x98\xf3\x15\x47\x05\x4c\x14\x70\xa3\xb8\x41\x4d\x02\xda\x30\x51\x30\x55\x80\x6c\x4c\xdd\x98\xa5\x33\xbd\x4a\xb4\x51\x64\xc2\x69\xef\x03\x39\x5a\x2e\x97\xff\x8d\x2f\x17\x8e\x06\xb3\x41\x50\xa8\x9b\xd2\x90\xbc\xb3\xbf\x9c\x79\x3f\xfa\x51\x6e\xa1\xf5\xdb\x68\xeb\x73\x83\x50\xe0\x8a\x35\xa5\xe9\x76\x56\x52\x01\x37\x1a\x64\x8d\x8a\x89\x42\x3f\x2a\xdc\x64\xe0\x87\x69\x8d\xca\x7c\xf5\xa6\x61\xa5\x4b\xf0\x91\x03\xc2\x3e\x6f\x61\xe4\x72\x8b\xca\xf8\x18\xc8\x2c\x15\xd1\x11\x60\x39\xf3\x05\x35\xf2\x64\x67\xf0\x4b\x5a\x6b\xa3\xb2\xb5\xeb\xd5\x7b\x25\x87\x6c\x90\x10\x23\xcf\xed\x8f\x96\x2b\x19\xe9\xe6\x25\xd3\x1a\xdc\xc6\x49\xc3\xcb\x02\xd5\xdd\x0c\x00\x5a\x12\x65\xcd\x0a\x52\xb8\x3c\xbc\xba\xbb\x3f\x9e\xd9\x8d\x83\x03\x60\x75\x8d\xa2\x80\x5c\x0a\x83\xc2\x26\x21\x6b\x56\xfb\xc0\xcd\xa0\x32\x8e\xe2\x20\x57\xa0\xad\x22\x91\xce\xa6\xcd\xc3\xe8\x43\xb0\xdb\x81\x53\x83\x55\x0d\xe9\x30\xde\xc5\x71\x27\xe5\xdc\x27\xd6\x27\x89\x06\x5b\x9e\xe8\x74\xa4\x82\x9d\x7b\xfb\xdf\x08\x7d\xf6\x61\xdc\xd9\xb2\x03\xfe\x2b\x02\x4e\x70\x74\x90\xbe\x49\x44\xd9\x34\x9c\xac\xc3\x62\xff\xb7\x56\xf2\x26\x21\xc3\x22\x30\xc3\x57\x90\x08\xf8\x29\x1c\x2e\xa0\x5f\xf4\xa8\x6f\x36\x28\x08\x9e\x42\xe0\x1a\x84\x34\x80\x42\x36\xeb\x0d\xe8\x9a\xe5\x04\x7a\x65\x96\x03\x1d\x32\x46\x2d\x23\x6b\x56\x0b\xf8\xcc\x61\xa0\x9f\x5f\x80\x88\xcd\x07\xa9\x17\x78\x73\xe2\x4a\xfe\xf9\xa7\xad\xf6\x9e\xb0\xd5\x8f\x35\x6c\xdf\x71\xf2\xfb\x94\xc8\xc5\x58\xc4\xb1\xc7\xc9\x0c\x77\xef\xbb\xbf\xee\xdb\xd2\xf8\xcc\x78\x5a\x78\x92\x04\xd9\xf1\xc9\xec\x69\xdc\xb9\xbc\x9f\xdd\xcf\x06\x4c\xd6\x77\xa1\xa9\xd7\x92\x0b\xcf\xb6\xcb\x2b\xc0\x12\x2b\xbd\xdf\xee\x69\xac\xa3\x02\x50\xa2\xac\xcc\x02\xd2\x74\x5c\x0a\x8f\x62\x3e\xef\xe3\xb9\xff\x1e\xfd\xa3\x07\xf4\xad\xc4\xe5\xe1\xd5\x94\x95\xf8\x38\x64\x3a\x3e\x0c\x18\x72\xde\xb2\x08\x52\x57\x61\xbd\x80\x4f\x07\x18\x3e\x3b\x0a\x44\xa9\x95\x59\xd6\xf1\xf4\xf0\x18\x38\x7c\x01\xbd\xe4\x31\xf0\xbd\xbd\x18\x6d\x9b\x25\x48\x3d\x62\x7e\x35\xac\xe3\x83\x10\x23\x36\x10\x40\x01\x7b\x2d\xc8\xef\x0d\x7b\xd0\x8d\x40\x67\x90\x0e\x97\x92\x40\x5d\x67\x4b\x7b\x94\x44\xb8\xe6\x3b\x3e\x57\xda\x74\xc0\xc3\x54\xeb\x6c\x19\x36\x22\x2b\x38\xd6\x57\x48\xda\x3a\x5b\xb6\x54\x1c\x9d\x6b\x85\xc6\x37\x45\xcb\xc0\xae\xb7\x68\x98\x6f\xe7\xd4\x5e\xa8\x9d\x50\xaf\x91\x2b\x60\xbe\x2f\xcf\xd9\x7c\xe6\xdb\x85\x1f\xe6\x6e\x14\x6c\xa3\x59\xfd\xf5\xf9\xcb\x17\x1e\x49\xdb\xc0\x69\x69\x30\x9f\x9d\xd0\x9b\x06\xd5\x0e\x6e\xb8\xd9\x40\xcd\xcc\x66\x46\x12\xb4\xf1\x0c\x4d\xdb\x63\x5f\x6b\x29\x3a\xca\x93\x90\x35\x40\x16\x4e\x2f\x2e\x5e\x41\xc9\x33\xfa\x7d\x86\xba\x96\x42\xa3\x15\x9f\x3d\x75\xf3\xd3\x3a\x75\xd7\x8c\x02\x07\x36\xba\x3f\x48\xdc\xcf\xa1\x33\xd4\xd6\xc2\xc6\x54\x65\x6b\xe1\xf4\xe2\x9b\xe7\x1f\xb0\x40\xe2\x6d\x4c\xb4\x01\x89\xc2\x92\x19\xbe\x45\xfb\xa7\x86\x8a\xed\x40\x56\x9c\x2e\x4b\xcc\x5e\x0e\x74\xc9\xf4\x66\xd1\x66\xe6\xe7\x94\x82\x57\xcc\x6c\x92\x38\xc6\x2e\xa1\xae\xb7\x3b\x4e\x6c\x59\xd9\xa0\x3d\x0c\xb4\x26\x58\x85\x34\xcc\xaa\x5a\x0a\x14\x86\x8a\x45\xcb\x36\xad\xdd\xf0\x7c\x2a\x55\xf5\x4b\x52\x4b\xa6\xf0\x5f\xe3\xee\x7f\xf4\xf6\xea\xe5\xf9\x45\xeb\xeb\x95\xd4\xe6\x23\xfd\x81\xc2\x37\x0d\x6a\x03\x8a\xdd\x40\x26\x8b\x5d\x6b\xeb\xcc\xad\x9f\xc8\x62\x37\xca\x8d\xeb\x98\xa7\xc6\xd4\x4f\x68\x92\xdf\x9a\x41\xd7\x24\x31\xc7\xf8\x88\x02\x9e\xad\xf1\x71\x21\x16\x40\xea\x84\xb7\xc1\x59\x09\x79\xe4\x0c\xb8\x50\x2c\x6b\xc2\xf9\x1c\xf1\xc4\xb9\x81\x91\x1f\xe2\x0a\xa4\xb0\x1d\x79\xb0\xfa\xa1\x07\xcb\xaa\xd0\x83\xb7\xf0\xa6\x63\xcb\x84\x79\xba\x78\xf4\x74\xb2\xb9\x1a\x9d\xfb\xfa\x78\x62\x60\xad\xe2\x8a\xd9\x22\xc5\xe6\xb7\x90\x06\x5c\x72\x38\x49\x70\xe4\x63\x3b\xe5\xa3\x9e\x62\xc6\x83\x7e\x86\x3c\x7a\x84\x2f\xdb\x85\x67\x83\x16\xd8\xb3\x67\xec\x83\x78\x06\xe9\x80\x62\xd3\xf9\x22\xc1\x7e\x52\x1f\x1c\xc0\x09\xa7\x5b\xbc\x6c\x0c\xce\x36\xc6\xd4\xa7\x4c\x14\x65\x17\x4f\x85\x66\x23\x8b\xa8\x51\xac\x1a\x91\x43\x12\x70\x75\x01\x1b\xab\xe5\x61\x51\xe3\xf0\x2f\x98\x39\x69\xa4\xf3\xbd\x00\x4b\xa0\x07\xb9\xb9\x85\x34\x5c\x69\x1b\xbb\xb3\x97\xe4\xe6\x76\x71\xec\x60\x9e\x35\x02\x08\x1f\x68\x54\x5b\x54\x4b\x0b\xf6\xac\x69\x2f\x13\xc0\x8a\x42\xb5\xe7\xf0\x7c\xa7\x0d\x56\x20\x35\xb0\x9a\xcf\xba\xdb\xc6\x33\x34\x2f\xcf\xbf\x54\x6b\x9d\x90\xa0\xd7\x7b\x22\xab\x8a\x89\xa2\x35\x43\x2d\xa1\x0b\x97\xde\x0c\x6a\x4d\xc2\xf6\xca\xf9\x94\xf7\x89\x59\xf1\x12\x5f\x84\xb2\xb6\xb3\xec\xdb\x0b\x40\x8d\xaa\x22\xa5\x33\xac\xe4\x76\xa4\x11\xf8\x7e\x86\xe6\xa6\x48\xba\xfe\xaf\x07\xb0\xfd\x1d\xca\xae\xdd\x75\xd7\xfd\x67\x68\xac\x80\x5a\xeb\x65\xc0\x8e\xcb\x2b\x58\x07\xd1\xc5\x45\x0f\x22\x9f\x38\x83\xf9\x23\x52\x10\x5b\x6c\xd3\xe6\x84\x49\x24\x34\x4c\xd3\xd7\x18\x14\x86\x4b\xf1\x13\x9b\x0f\xba\x28\xbb\x07\x5d\xce\x2b\x56\x5a\xa9\x9b\x8f\x4f\x6a\x07\xa3\x2f\x48\xaf\xe4\xa5\xad\x64\x84\x46\xd9\x52\xe8\xa0\xeb\x93\xda\xcc\x05\x34\x5d\xa5\xce\x95\x2f\x63\xb7\x33\x32\xed\x86\x0c\x03\x25\xa5\xc1\xc2\x0d\x4d\x72\x02\xb9\x54\xca\xce\xf1\xf6\x0d\x4d\xee\xf3\x46\x29\x1a\x36\x05\x57\x98\x1b\x49\x73\x2d\xa8\xc5\xda\x53\x62\xa2\x82\xb4\x7e\x3c\xb8\xe1\xfc\x8c\x19\x0c\xb8\xf4\xc4\x59\xbe\xe0\x55\x17\x8e\x79\xdb\xe5\xb2\x64\x3b\xd9\x18\x4b\x36\xca\xe7\x2f\x04\xbf\xed\xa5\x82\x19\x44\x46\xc9\xc4\x5d\x04\xeb\x71\xd6\x27\x70\x87\x8a\xa4\xe1\x45\xc3\x34\x12\xa0\x26\x02\x14\x5b\xb2\x80\xcd\xdb\x28\x05\x4f\x64\x55\xf3\x12\x55\x70\xd2\xa1\x68\xaa\xfa\xcb\xf3\x8b\xa4\xa3\x77\x11\x1e\x3a\xda\x3d\xdf\x55\x99\x2c\x63\x01\x9f\x80\xaf\x84\x51\x3b\xe7\x9e\xe6\xde\x35\xee\xf6\x2d\xb3\x9c\x63\xbb\x0b\x02\x6f\x4d\xf0\xb7\xbd\x09\x5e\xfb\x39\xb9\xdf\xca\x04\x31\x5c\xe3\x2e\xbd\xee\x7b\xb1\xb5\x97\x06\x63\x93\xec\xa5\xa2\x0f\xcd\x21\xf9\x86\xd5\x77\xbd\x13\x7a\x8c\xb3\xac\x44\x7a\x10\x1e\xfd\xa8\x7b\x06\x52\xee\x34\x7f\x8b\xe9\xa1\xbf\xff\xd6\x8d\xfb\xe2\x41\xc0\x1d\x22\xf2\x16\x80\x39\x38\x00\x23\x0b\x09\xb9\x92\x5a\xcb\x2d\xaa\xaf\x39\xc2\xfb\xdf\xfd\xf5\xdd\xdf\xfe\x19\xbc\x9e\x12\xc2\x9c\xce\xe7\x8b\xa9\x37\xd3\xe4\x83\xcb\x7f\xc8\xa2\x74\x42\xea\xbe\x69\x0d\x47\x9c\x7d\xed\xf8\x2d\x2b\xf5\x43\xf7\x75\x80\xa2\x5a\x40\x2f\xe7\xf2\x47\x46\xec\xd6\xe0\xa1\x43\xcf\x3a\x84\x1f\xa4\x20\x78\x19\x41\x73\x6a\x06\xab\xda\xfd\x4a\x01\x87\x0f\x1f\xfb\xe4\xea\xf7\xbd\x91\x89\x07\xb8\xbd\xf9\x38\xda\x9e\x32\xbd\x69\xa3\xe9\x54\x97\xc3\xb8\x42\x6c\x03\xb5\x20\xd4\x4f\x3e\xa1\x82\xd0\xd2\xd0\xca\xd8\x39\xfd\xeb\x65\x1c\x55\x20\x60\x60\xfc\x2f\xae\xc8\xb8\x32\x23\xab\x10\xa2\xe8\xb9\x3c\xad\xd9\xd6\x00\x52\x4f\x76\x4b\x2c\xdf\x6c\x31\x4a\x03\x31\x71\x6f\xcf\x33\xd1\xda\x02\x2c\x35\x8e\xbf\xa1\xbc\xfb\xf6\x37\xdf\xfd\xfa\xb7\xf0\xba\xb8\x3e\x5a\xfe\x18\xfe\xfd\x87\x7f\x7d\xf7\xa7\xbf\xbc\xfb\xf3\x3f\xde\x7f\xfb\xfb\xf7\x7f\xff\xe3\x87\xfd\x3b\xf7\x54\xbe\x69\xff\x7d\x28\xe1\xd5\x8d\x4e\xc3\x1a\xbb\xe3\x31\xf8\xda\xf0\x7f\xca\x77\xcb\x59\xb4\x45\x9a\x66\xfd\x03\x5c\xc5\x09\x8e\x12\x3f\x3d\x09\xed\x36\x91\xf2\x01\xbe\x4e\xf0\xb2\xfd\x5a\xb2\x9c\xe0\xe2\x90\x31\x14\x09\x46\xbc\x1a\x7e\x98\x09\x20\x0e\x4e\x49\x70\x4c\x70\xe2\x78\x3c\x04\xe1\x7e\x82\x63\x5e\x56\xf0\x32\x06\xe1\xc9\x40\x89\x5b\xa3\x39\xe7\x6f\x71\x62\xe0\x12\x91\x82\x51\x43\xb3\xe6\x39\x17\xd7\x58\x3c\xe7\xda\xf8\xfe\xec\x16\x5e\xc8\x02\xfb\x71\x11\x20\xeb\xb7\x83\x79\xd1\x2f\x26\xf1\xe3\xcd\x3d\x4e\x07\xcf\x29\x5b\xf6\xb4\x0f\xa2\x9f\x0d\x3d\x98\xbb\xd8\x99\x7d\xea\xd2\x9c\xd5\xe6\x81\x11\xc1\x8a\x62\xe4\x9d\xca\xb2\xa5\xc4\x7f\xc4\x11\x08\x9c\xd2\x3b\x30\x88\x2d\x7c\x75\x92\x65\xff\x01\x68\x8a\xc0\xed\xb7\xa1\x72\x48\x29\x82\x3f\x5c\x75\xad\xe4\x6e\x24\xb5\xf4\x59\xfa\xb0\x81\x51\xab\x80\x89\x5e\x41\x17\x84\x90\x10\x41\x90\xda\x30\x45\x36\x2d\xe4\xe8\x8c\xba\xbd\xc9\x23\xda\xbe\x86\xac\x88\xe3\x6e\xdc\xb6\xbc\x61\x27\x31\x75\x72\x3e\x9e\xb4\xff\x09\x00\x00\xff\xff\xc0\x0d\x4a\x1d\xe7\x1a\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
