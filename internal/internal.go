package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcf\x6e\x1c\xb9\xd1\xbf\xcf\x53\xd4\x37\xc0\xb7\x98\x59\x69\x47\xd2\x1e\x12\x60\xb5\x1d\xc0\x72\xd6\x16\x16\x5e\xdb\x91\x94\xe4\x20\xcc\x81\xd3\x5d\x33\x43\xab\x9b\x6c\x93\xec\x91\x46\x83\x01\x82\xe4\x94\xd3\x02\x09\xf2\x00\x01\x72\x48\x2e\xb9\x24\x97\x5c\xf2\x36\x36\x36\x6f\x11\x14\xc9\xee\x66\xb3\x5b\xb6\x9c\x5c\xe2\xc3\xee\x88\xac\x3f\xbf\xaa\xfa\xb1\x8a\xec\xa3\x23\x50\x68\x2a\x25\x80\x29\xc5\xb6\x90\xa3\x58\x99\xf5\x88\x0b\x43\x3f\x27\x4c\x6c\xaf\xe7\xc0\xa6\xbb\xfd\x68\x14\x8b\xa6\xac\xb4\x72\x29\x2b\x63\x39\xb7\x2e\xcb\xed\x64\xb1\x35\x78\x3d\x87\x4c\x9b\x43\xf0\xbf\xb5\x4a\x23\x7b\x6b\xa6\xd7\xa9\xcc\xd0\xaa\xd1\x1f\x64\x0f\xb4\x95\x2a\x15\x17\x26\xb7\x48\x1a\xfb\x4b\xa9\x0a\x66\x34\xb0\x34\x95\x2a\xe3\x62\x05\x46\x02\x03\xb7\x0c\xba\xc4\x94\x2f\x39\x2a\x60\x22\x83\x5b\xc5\x0d\x6a\x12\xd0\x86\x89\x8c\xa9\x0c\x64\x65\xca\xca\xcc\x9c\xe9\xe5\x44\x1b\x45\x26\x9c\xf6\x21\x90\xa3\xd9\x6c\xf6\x9f\xf8\x72\xe1\x68\x30\x6b\x04\x85\xba\xca\x0d\xc9\x3b\xfb\xb3\x91\xf7\xa3\x1f\xe5\x16\x6a\xbf\x95\xb6\x3e\xd7\x08\x19\x2e\x59\x95\x9b\x66\x67\x29\x15\x70\xa3\x41\x96\xa8\x98\xc8\xf4\xa3\xc2\x9d\x74\xfc\x30\xad\x51\x99\x6f\xde\x56\x2c\x77\x09\x3e\x71\x40\xd8\x97\x35\x8c\x54\x6e\x50\x19\x1f\x03\x99\xa5\x22\x3a\x02\xcc\x46\xbe\xa0\x46\x9e\x6d\x0d\x3e\xa1\xb5\x3a\x2a\x5b\xbb\x56\xbd\x55\x72\xc8\x3a\x09\x31\xf2\xd2\xfe\xa8\xb9\xb2\x20\xdd\x34\x67\x5a\x83\xdb\x38\xab\x78\x9e\xa1\xda\x8d\x00\xa0\x26\xd1\xa2\x5a\x42\x02\xd7\xc7\xf3\xdd\xfe\x74\x64\x37\x8e\x8e\x80\x95\x25\x8a\x0c\x52\x29\x0c\x0a\x9b\x84\x45\xb5\x3c\x04\x6e\x3a\x95\x71\x14\x07\xb9\x04\x6d\x15\x89\x74\x36\x6d\x1e\x46\x1b\x82\xdd\x0e\x9c\x1a\x2c\x4a\x48\xba\xf1\x4e\x4f\x1b\x29\xe7\x7e\x62\x7d\x92\x68\xb0\xe5\x89\x4e\x47\x2a\xd8\xd9\xdb\xff\x46\xe8\x17\x1f\xc7\xbd\x98\x35\xc0\x7f\x49\xc0\x09\x8e\x0e\xd2\x37\x88\x68\x31\x0c\x67\xd1\x60\xb1\xff\x5b\x29\x79\x3b\x21\xc3\x22\x30\xc3\x97\x30\x11\xf0\x13\x38\x9e\x42\xbb\xe8\x51\xdf\xae\x51\x10\x3c\x85\xc0\x35\x08\x69\x00\x85\xac\x56\x6b\xd0\x25\x4b\x09\xf4\xd2\xcc\x3a\x3a\x64\x8c\x5a\xc6\xa2\x5a\x4e\xe1\x0b\x87\x81\x7e\x7e\x0d\x22\x36\x1f\xa4\x5e\xe0\xed\x99\x2b\x79\xad\x70\x08\x5f\x7e\x5e\xdb\x39\x10\x96\x07\xb1\xae\xed\x40\x4e\xf3\x90\x52\x3a\xed\x8b\x38\x1e\x39\x99\xee\xee\xbe\xf9\x6b\x5f\x17\xc9\xe7\xc8\x13\xc4\xd3\x25\xc8\x93\x4f\x6b\x4b\xe8\xc6\xe5\x7e\xb4\x1f\x75\x38\xad\x77\xa1\xa9\x37\x92\x0b\xcf\xbb\xeb\x39\x60\x8e\x85\x3e\xac\xf7\x34\x96\x51\x29\x28\x03\x56\x66\x0a\x49\xd2\x2f\x8a\x47\x31\x1e\xb7\xf1\xec\x3f\xa0\x7f\xf2\x80\xbe\x95\xb8\x3e\x9e\x0f\x59\x89\x0f\xc6\x42\xc7\xc7\x02\x43\xf6\x5b\x3e\x41\xe2\x6a\xad\xa7\xf0\x79\x07\xc3\x17\x27\x81\x28\x35\x35\xcb\x3f\x9e\x1c\x9f\x02\x87\xaf\xa1\x95\x3c\x05\x7e\x70\x10\xa3\xad\xb3\x04\x89\x47\xcc\xe7\xdd\x3a\x3e\x08\x31\x62\x03\x01\x14\x70\x50\x83\xfc\x60\xd8\x9d\xbe\x04\x7a\x01\x49\x77\x69\x12\xa8\xeb\xc5\xcc\x1e\x2a\x11\xae\xf9\xde\xcf\x95\x36\x0d\xf0\x30\xd5\x7a\x31\x0b\x5b\x92\x15\x9c\xfa\x46\xd7\x1a\xb8\x9e\x83\xc2\x82\x71\xd1\xd8\x38\xf9\xaa\x4d\xd7\xbc\x93\xd5\x7e\x52\x9d\xaa\xcf\x6a\x94\xd4\xae\xfb\x6e\x35\x83\x00\x14\x24\x1e\x41\x2f\xed\x91\x09\xf5\xe1\x84\xd6\xf6\x90\xd2\xa1\x17\xb3\xfa\x6c\xf5\x5a\x96\x42\xe3\xd3\x60\x8f\x54\xd3\x36\x35\x8c\x37\x63\xea\x9c\xd4\x29\xa9\x8d\xca\x25\x30\x3f\x72\xc6\x6c\x3c\xf2\x9d\xd0\xdf\x53\xdc\x94\xdb\x44\xd7\x90\x6f\x2f\x5f\xbd\xf4\x48\xea\xd9\x44\x4b\x9d\xab\x87\x13\x7a\x5b\xa1\xda\xc2\x2d\x37\x6b\x28\x99\x59\x8f\x48\x82\x36\x9e\xa3\xa9\xc7\xc7\x1b\x2d\x45\x73\x86\x49\xc8\x1a\x20\x0b\xe7\x57\x57\xaf\x21\xe7\x0b\xfa\x7d\x81\xba\x94\x42\xa3\x15\x1f\x3d\x73\x57\x03\xeb\xd4\xdd\xa0\x32\xec\xd8\x68\xfe\x20\x71\x3f\x62\x2f\x50\x5b\x0b\x6b\x53\xe4\xb5\x85\xf3\xab\xef\x5e\x7c\xc4\x02\x89\xd7\x31\xd1\x06\x4c\x14\xe6\xcc\xf0\x0d\xda\x3f\x35\x14\x6c\x0b\xb2\xe0\x74\x0f\x64\xf6\xde\xa3\x73\xa6\xd7\xd3\x3a\x33\x3f\xa3\x14\xbc\x66\x66\x3d\x89\x63\x6c\x12\xea\xc6\x96\x23\xf9\x86\xe5\x15\xda\xd3\x4d\x6b\x82\x15\x48\x73\xba\x28\xa5\x40\x61\xa8\x58\xb4\x6c\xd3\xda\xdc\x0b\x9e\x49\x55\xfc\x82\xd4\x26\x43\xf8\x6f\x70\xfb\x5f\x7a\x7b\xfd\xea\xf2\xaa\xf6\xf5\x5a\x6a\xf3\x89\xfe\x40\xe1\xdb\x0a\xb5\x01\xc5\x6e\x61\x21\xb3\x6d\x6d\xeb\xc2\xad\x9f\xc9\x6c\xdb\xcb\x8d\x1b\x01\xe7\xc6\x94\x4f\xe9\x92\x72\x67\x3a\x63\x80\xc4\x1c\xe3\x23\x0a\x78\xb6\xc6\xc7\x85\x58\x00\x89\x13\xde\x04\x67\x25\xe4\x91\x33\xe0\x42\xb1\xac\x09\xaf\x1e\x11\x4f\x9c\x1b\xe8\xf9\x21\xae\x40\x02\x9b\x9e\x07\xab\x1f\x7a\xb0\xac\x0a\x3d\x78\x0b\x6f\x1b\xb6\x0c\x98\xa7\x3b\x55\x4b\x27\x9b\xab\xde\xb9\x2f\x4f\x07\x26\xf0\x32\xae\x98\x2d\x52\x6c\x7e\x03\x49\xc0\x25\x87\x93\x04\x7b\x3e\x36\x43\x3e\xca\x21\x66\x3c\xe8\xa7\xcb\xa3\x47\xf8\xb2\x5d\x70\xd4\x69\x81\x2d\x7b\xfa\x3e\x88\x67\x90\x74\x28\x36\x9c\x2f\x12\x6c\xaf\x1e\x47\x47\x70\xc6\xe9\x81\x22\x2b\x83\xa3\xb5\x31\xe5\x39\x13\x59\xde\xc4\x53\xa0\x59\xcb\x2c\x6a\x14\xcb\x4a\xa4\x30\x09\xb8\x3a\x85\xb5\xd5\xf2\xb0\xa8\x71\xf8\xc7\xd9\x98\x34\x92\xf1\x41\x80\x25\xd0\x83\xd4\xdc\x41\x12\xae\xd4\x8d\xdd\xd9\x9b\xa4\xe6\x6e\x7a\xea\x60\x5e\x54\x02\x08\x1f\x68\x54\x1b\x54\x33\x0b\xf6\xa2\xaa\x6f\x47\xc0\xb2\x4c\xd5\xe7\xf0\x72\xab\x0d\x16\x20\x35\xb0\x92\x8f\x9a\x91\xf8\x1c\xcd\xab\xcb\x27\x6a\xa5\x27\x24\xe8\xf5\x9e\xca\xa2\x60\x22\xab\xcd\x50\x4b\x68\xc2\xa5\xe7\x90\x5a\x91\xb0\xbd\x4d\x3f\xe3\x6d\x62\x96\x3c\xc7\x97\xa1\xac\xed\x2c\x87\xf6\x46\x53\xa2\x2a\x48\xe9\x02\x0b\xb9\xe9\x69\x04\xbe\x9f\xa3\xb9\xcd\x26\x4d\xff\xd7\x1d\xd8\xfe\x52\x68\xd7\x76\xcd\x4b\xe6\x39\x1a\x2b\xa0\x56\x7a\x16\xb0\xe3\x7a\x0e\xab\x20\xba\xb8\xe8\x41\xe4\x03\x67\x30\x7d\x44\x0a\x62\x8b\x75\xda\x9c\x30\x89\x84\x86\x69\xfa\x1a\x83\xc2\x70\x29\xbe\xb2\xf9\xa0\x37\x80\x7b\xab\xa6\xbc\x60\xb9\x95\xba\xfd\xf4\xa4\x36\x30\xda\x82\xb4\x4a\x5e\xda\x4a\x46\x68\x94\x2d\x85\x0e\xba\x3e\xa9\x8d\x5c\x40\xc3\x55\x6a\x5c\xf9\x32\x36\x3b\x3d\xd3\x6e\xc8\x30\x50\x52\x1a\xcc\xdc\xd0\x24\x27\x90\x4a\xa5\xec\x1c\xaf\x3f\x0f\x90\xfb\xb4\x52\x8a\x86\x4d\xc6\x15\xa6\x46\xd2\x5c\x0b\x6a\xb1\xf2\x94\x18\xa8\x20\xad\x9f\x76\x6e\x38\x3f\x65\x06\x03\x2e\x3d\x75\x96\xaf\x78\xd1\x84\x63\xee\x9b\x5c\xe6\x6c\x2b\x2b\x63\xc9\x46\xf9\xfc\xb9\xe0\x77\xad\x54\x30\x83\xc8\x28\x99\xd8\x45\xb0\x1e\x67\x7d\x00\x77\xa8\x48\x1a\x5e\x34\x4c\x23\x01\xaa\x22\x40\xb1\x25\x0b\xd8\xdc\x47\x29\x78\x2a\x8b\x92\xe7\xa8\x82\x93\x0e\x59\x55\x94\x4f\x2e\xaf\x26\x0d\xbd\xb3\xf0\xd0\xd1\xee\xe5\xb6\x58\xc8\x3c\x16\xf0\x09\xf8\x46\x18\xb5\x75\xee\x69\xee\xdd\xe0\xf6\xd0\x32\xcb\x39\xb6\xbb\x20\xf0\xce\x04\x7f\xdb\x9b\xe0\x8d\x9f\x93\x87\xb5\x4c\x10\xc3\x0d\x6e\x93\x9b\xb6\x17\x5b\x7b\x49\x30\x36\xc9\x5e\x22\xda\xd0\x1c\x92\xef\x58\xb9\x6b\x9d\x5c\xcf\xc1\xb0\x45\x8e\xf4\xd6\x3d\xf9\x51\xf3\xae\xa5\xdc\x69\x7e\x8f\xc9\xb1\xbf\xff\x96\x95\xfb\x98\x43\xc0\x1d\x22\xf2\x16\x80\x39\x3a\x02\x23\x33\x09\xa9\x92\x5a\xcb\x0d\xaa\x6f\x39\xc2\xfb\xdf\xfe\xe5\xdd\x5f\xff\x11\x3c\x07\x27\x84\x39\x19\x8f\xa7\x43\x8f\xc0\xc1\x17\xa4\xff\x46\x47\xe9\x84\xc4\x7d\xae\xeb\x8e\x38\xfb\xd2\xf0\x5b\x56\xea\xff\xdd\x87\x0f\x8a\x6a\x0a\xad\x9c\xcb\x1f\x19\xb1\x5b\x9d\x27\x04\xbd\x53\x11\xfe\x2f\x01\xc1\xf3\x08\x9a\x53\x33\x58\x94\xee\x57\x02\xd8\x7d\x7a\xd8\x37\x64\xbb\xef\x8d\x0c\x7c\x5b\xb0\x37\x1f\x47\xdb\x73\xa6\xd7\x75\x34\x8d\xea\xac\x1b\x57\x88\xad\xa3\x16\x84\xfa\xd9\x67\x54\x10\x5a\xea\x5a\xe9\x3b\xa7\x7f\xad\x8c\xa3\x0a\x04\x0c\x8c\xff\xc5\x15\xe9\x57\xa6\x67\x15\x42\x14\x2d\x97\x87\x35\xeb\x1a\x40\xe2\xc9\x6e\x89\xe5\x9b\x2d\xc6\xef\x3f\x7e\x8f\x07\x07\xc1\x83\x74\x0f\x98\x6b\xec\x7f\x1e\x7a\xf7\xfd\xaf\x7f\xf8\xd5\x6f\xe0\x4d\x76\x73\x32\xfb\x31\xfc\xeb\xf7\xff\xfc\xe1\x8f\x7f\x7e\xf7\xa7\xbf\xbf\xff\xfe\x77\xef\xff\xf6\x87\x8f\xfb\x77\xee\xa9\x7c\xc3\xfe\xdb\x50\xc2\xab\x1b\x9d\x86\x15\x36\xc7\xa3\xf3\xf9\xe4\x7f\x94\xef\x96\xb3\x68\x8b\x34\xcc\xfa\x07\xb8\x8a\x03\x1c\x25\x7e\x7a\x12\xda\x6d\x22\xe5\x03\x7c\x1d\xe0\x65\xfd\xf9\x67\x36\xc0\xc5\x2e\x63\x28\x12\x8c\x78\xd5\xfd\xd2\x14\x40\xec\x9c\x92\xe0\x98\xe0\xc0\xf1\x78\x08\xc2\x7e\x80\x63\x5e\x56\xf0\x3c\x06\xe1\xc9\x40\x89\x5b\xa1\xb9\xe4\xf7\x38\x30\x70\x89\x48\xc1\xa8\xa1\x59\xf3\x82\x8b\x1b\xcc\x5e\x70\x6d\x7c\x7f\x76\x0b\x2f\x65\x86\xed\xb8\x08\x90\xb5\xdb\xc1\xbc\x68\x17\x27\xf1\xe3\xcd\x3d\x4e\x3b\xcf\x29\x5b\xf6\xa4\x0d\xa2\x9d\x0d\x2d\x98\x5d\xec\xcc\x3e\x75\x69\xce\x6a\xf3\xc0\x88\x60\x59\xd6\xf3\x4e\x65\xd9\x50\xe2\x3f\xe1\x08\x04\x4e\xe9\x1d\x18\xc4\x16\xbe\x3a\xc9\xb2\xff\xa2\x35\x44\xe0\xfa\x63\x57\xde\xa5\x14\xc1\xef\xae\xba\x56\xb2\xeb\x49\xcd\x7c\x96\x3e\x6e\xa0\xd7\x2a\x60\xa0\x57\xd0\x05\x21\x24\x44\x10\xa4\x36\x4c\x91\x4d\x0b\x39\x3a\xa3\x6e\x6f\xf0\x88\xd6\xaf\x21\x2b\xe2\xb8\xdb\xfb\x6c\xe6\x0c\x3b\x89\xa1\x93\xf3\xe9\xa4\xfd\x77\x00\x00\x00\xff\xff\x33\x4d\x32\x95\xc2\x1b\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
