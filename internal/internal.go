package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _internal_internal_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internal_internal_go() ([]byte, error) {
	return bindata_read(
		_internal_internal_go,
		"internal/internal.go",
	)
}

var _internal_internal_gs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\x1c\x37\x12\xbe\xcf\x53\xd4\x0e\xb0\x46\x0b\x16\x46\xeb\x3d\xec\x02\x2b\xf4\xc1\xd6\xda\x12\x0c\xff\x68\x25\x6d\x72\x10\x74\xa0\xa6\x6b\x66\x68\x75\x93\x2d\xb2\x7a\xa4\x91\x20\x20\x48\x4e\x39\x19\x48\x90\x07\x08\x90\x43\x72\xc9\x25\xb9\xe4\x92\xb7\xb1\xe1\xbc\x45\x50\x24\xbb\x9b\xdd\xd3\x82\xa5\xe4\x12\x1f\x0c\x0d\xf9\xd5\x57\x7f\x1f\x8b\xcd\xad\x2d\x30\x48\x95\x51\x20\x8c\x11\x2b\xc8\x51\xcd\x69\x31\x92\x8a\xf8\xcf\x44\xa8\xd5\xf1\x09\x88\x8d\xeb\x9b\xd1\xa8\x85\x2e\x84\x5d\x4c\x75\x86\x0e\xc6\x3f\x18\x07\xd6\xa1\x4a\x23\x15\xe5\xce\xb2\xb1\x9b\x69\x53\x08\xb2\x20\xa6\x53\x6d\x32\xa9\xe6\x40\x1a\x04\xf8\x65\xb0\x25\x4e\xe5\x4c\xa2\x01\xa1\x32\xb8\x30\x92\xd0\x32\xc0\x92\x50\x99\x30\x19\xe8\x8a\xca\x8a\x26\x9e\x7a\x96\x58\x32\x4c\xe1\xad\x37\x81\x1d\x4d\x26\x93\x3f\xe2\xcb\xa7\x63\x81\x16\x08\x06\x6d\x95\x13\xe3\x3d\xff\x64\x14\xfc\xd8\x3b\xb9\x85\xda\x6f\x65\x9d\xcf\x05\x42\x86\x33\x51\xe5\xd4\xec\xcc\xb4\x01\x49\x16\x74\x89\x46\xa8\xcc\xde\x29\xdd\xa4\xe3\x47\x58\x8b\x86\x9e\x9e\x57\x22\xf7\x05\x7e\xe4\x03\x11\xff\xac\xc3\x10\x65\x89\xcc\x3d\x5e\x8e\x99\x94\xe3\x40\x95\x81\x9e\x81\x08\x1d\x1e\x8b\xf1\xc8\xa3\xea\xee\x7a\x8e\x65\xaf\xc9\xcf\x0f\x5f\xbf\x0a\xb5\xa8\x4b\xc1\x4b\x9d\xc6\x7a\xd0\x79\x85\x66\x05\x17\x92\x16\x50\x0a\x5a\x8c\x18\xc1\x1b\xbb\x48\x75\xd5\xde\x58\xad\x36\x03\x9b\x03\x39\x02\x66\xd8\x3b\x3a\xda\x87\x5c\x9e\xf2\xdf\x07\x68\x4b\xad\x2c\x3a\xf8\xe8\x99\x2f\xbc\x73\xca\x42\x63\xc5\x75\x38\x9a\x1f\x0c\x67\x42\x4f\xe1\x18\x16\x54\xe4\x35\xc3\xde\xd1\xcb\x17\x1f\x61\x60\x78\x9d\x13\x6f\x40\x62\x30\x17\x24\x97\xe8\x7e\x5a\x28\xc4\x0a\x74\x21\xf9\x54\x08\xa7\x2a\x9b\x0b\xbb\xd8\xa8\x2b\xf3\x3f\x2e\xc1\xbe\xa0\x45\xd2\xcf\xb1\x29\xa8\x97\xd9\x4c\x1a\x4b\xb0\x14\x79\x85\x4e\x10\xbc\xa6\x44\x81\x19\x4c\x75\x51\x6a\x85\x8a\xb8\x59\xbc\xec\xca\xda\xc8\xf0\x99\x36\xc5\x27\x6c\x96\x0c\xc5\x7f\x86\xab\x3f\xe9\x6d\xff\xf5\xe1\x51\xed\x6b\x5f\x5b\xba\xa7\x3f\x30\x78\x5e\xa1\x25\x30\xe2\x02\x4e\x75\xb6\xaa\xb9\x0e\xfc\xfa\x13\x9d\xad\xd6\x6a\x33\xcd\x85\xb5\xb0\x47\x54\xee\x68\x45\x78\x49\xd7\x23\x00\x88\x1b\xb4\xed\x16\x7a\x12\x08\x6a\x75\x5b\x11\x9e\x55\x00\xa9\x07\x2f\x37\xb6\x9b\xed\x58\x47\x9e\xc0\xa7\xe2\x54\xe3\x61\x37\xee\xff\x9e\x4e\xbc\x1b\x58\xf3\xc3\x5a\x81\x14\x96\x6b\x1e\x9c\x7d\xec\xc1\xa9\x2a\xf6\x10\x18\xce\x1b\xb5\x0c\xd0\x97\x90\x46\x72\x72\xb5\x6a\x3d\x85\x62\x97\x35\x69\xcc\x3a\xeb\x77\xcc\x35\xa9\x4f\xbf\x84\x34\xd2\x92\x8f\x93\x81\x6b\x3e\x96\x43\x3e\xca\x21\x65\xdc\xea\xa7\xab\xa3\x3b\xf8\xe2\xff\x3a\xfe\x4c\xa4\x9e\x75\x1f\xac\x33\x48\x3b\x12\x1b\xae\x17\x03\xeb\x74\xdc\x98\x78\x22\x79\xfc\xeb\x8a\x70\xb4\x20\x2a\xf7\x84\xca\xf2\x26\x9f\x02\x69\xa1\xb3\xde\xa0\x98\x55\x6a\x0a\x49\xa4\xd5\x0d\x58\x38\xab\x10\x16\x0f\x8e\x70\xf5\x8d\xd9\x22\x1d\x3f\x8c\x62\x89\xec\x60\x4a\x97\x90\xc6\x2b\x49\x00\x79\xbe\x64\x4a\x97\x1b\xdb\x3e\xcc\x83\x4a\x01\xc7\x07\x16\xcd\x12\xcd\xc4\x05\x7b\x50\xa9\x3a\x52\x91\x65\xa6\x3e\x87\x87\x2b\x4b\x58\x80\xb6\x20\x4a\x19\x4e\xdf\xf1\x09\xec\x22\xbd\x3e\x7c\x6c\xe6\x36\x61\x60\xb0\xdb\xd1\x45\x21\x54\x56\xd3\xf0\x48\x68\xd2\xe5\xcb\xc6\xcc\x19\xfc\x29\xdf\x4d\xcf\x64\x5b\x98\x99\xcc\xf1\x55\x8c\x75\x93\x65\x13\xf8\xcc\x94\x68\x0a\x36\x3a\xc0\x42\x2f\xd7\x2c\x9a\x71\x6f\x3b\x51\xfa\x01\xe0\x23\xbf\x1e\xd5\x75\xdc\x45\x72\x00\x33\xb7\x93\x48\x0c\xc7\x27\x30\x8f\x92\xe9\xf7\x38\x4a\x74\xe0\xc8\x4d\xef\x90\x71\x9f\xb1\xae\x92\x07\x33\x24\x26\xe6\xcb\x96\x08\x15\x49\xad\xfe\xe3\xd2\x07\x69\xc3\xc5\x3f\x95\x85\xc8\x1d\xea\xe2\xfe\x35\x6c\xc2\x68\xeb\xdf\x1a\x05\xb4\x43\xf6\xa2\x31\xae\xf2\x36\x1a\xf2\x6c\x36\xf2\x09\x0d\x37\xa5\x71\x15\xba\xd6\xec\xb4\x87\x85\x9b\xf6\x5f\x41\x58\x4b\x67\x17\x69\xa7\x32\x06\x15\x1d\xc9\xa2\xa1\xa4\xab\x26\x9f\x5c\xac\x74\x45\xae\xe1\x9c\xd3\xff\x95\xbc\x6c\x51\xd1\xd8\x67\x52\xa6\xe8\xcc\xfc\xf9\x5d\xd9\x07\xba\x1f\x1b\xb2\x45\x80\xc6\x55\xe2\x80\xaa\x5e\x40\x7d\x26\x17\x30\x5d\xf5\x4a\xb0\xa3\x8b\x52\xe6\xfc\xdd\xd8\x1c\x2e\xc8\xaa\xa2\x7c\x7c\x78\x94\x34\x12\xcb\x30\x3a\x63\xbc\x7b\xb8\x2a\x4e\x75\xde\x07\x84\x02\x3c\x55\x64\x56\xde\x3d\x5f\x35\x67\xb8\xda\x74\xdd\xf5\x8e\xdd\x2e\x28\xbc\xa4\xe8\xb7\xfb\xf8\x3a\x0b\x57\xd3\x66\x8d\x89\x72\x38\xc3\x55\x7a\xd6\x8e\x3f\xc7\x97\x46\x37\x15\xf3\xa5\xaa\x4d\xcd\x47\xf2\x52\x94\xd7\xad\x93\xe3\x13\x20\x71\x9a\x23\xa4\x70\xfc\xe8\x5f\x27\xd7\x37\xdb\x4d\xed\xac\xbc\xc2\xf4\x1f\xdb\xfe\xa4\x96\x95\xff\x3a\xe5\xc0\x7d\x44\xec\x2d\x0a\x66\x6b\x0b\x48\x67\x1a\xa6\x46\x5b\xab\x97\x68\x9e\x4b\x84\xf7\x5f\xfe\xf0\xee\xc7\x5f\x1a\x8c\x9c\x25\x1c\x73\x3a\x1e\x47\x86\x6d\x37\xda\xc8\x6f\x5a\x93\xf0\xe8\xe0\x72\x42\xea\xdf\x1f\xdd\x5b\x85\x11\x32\x6c\x39\xd4\xdf\xdd\x63\xc6\x65\xb5\x01\x2d\xce\xd7\x8f\x49\xdc\xd6\xb1\x3c\x89\x38\x66\x90\x20\xfc\x2d\x05\x25\xf3\x5e\x68\xde\x8c\xb0\x28\xfd\x5f\x29\xe0\x76\x07\xc0\x9f\x5a\x49\xbb\x1f\x48\xa0\xcb\x52\x07\x3a\xf5\xb2\xdd\x13\x76\x51\x67\xd3\x98\x4e\xba\x79\xc5\xb1\x75\xcc\xa2\x54\x1f\x3c\xe0\x86\xf0\x52\x97\x65\xdd\x39\xff\x6b\x31\x5e\x2a\x10\x29\xb0\xff\xaf\xdf\x91\xf5\xce\xac\xb1\x42\x1c\x45\xab\xe5\x61\xcb\xba\x07\x90\x06\xb1\x3b\x61\x85\x81\x87\xbd\x32\xb0\x12\x1f\x3e\x0c\x4a\x74\x5c\x80\xb9\xc5\x5e\x8d\xb7\xb6\xe0\xdd\xdb\xcf\x3f\x7c\xf6\x05\xbc\xc9\xce\x1e\x4d\xfe\x0d\xbf\x7d\xfd\xeb\x87\x6f\xbf\x7f\xf7\xdd\xcf\xef\xdf\x7e\xf5\xfe\xa7\x6f\x3e\xee\xdf\xbb\xe7\xf6\x0d\xfb\x6f\x53\x89\xbf\x96\xf8\x34\xcc\xb1\x39\x1e\x51\xf1\xff\xb2\x7a\x77\x9a\x45\xd7\xa4\x61\xd5\xdf\xa2\x55\x1c\xd0\x28\xeb\x33\x88\xd0\x6d\xb3\x28\x6f\xd1\xeb\x80\x2e\xc3\x1c\xc6\xc9\x80\x16\xbb\x8a\xe1\x4c\xb0\xa7\xab\x9b\xce\x09\x8e\x42\xec\x9c\x92\xe8\x98\xe0\xc0\xf1\xb8\x2d\x84\x9b\x01\x8d\x05\xac\x92\x79\x3f\x88\x20\x06\x2e\xdc\x1c\xe9\x50\x5e\xe1\xc0\x67\x0b\x0b\x29\xba\x6a\xf8\xae\x79\x21\xd5\x19\x66\x2f\xa4\xa5\x30\x9f\xfd\xc2\x2b\x9d\x61\x7b\x5d\x44\x91\xb5\xdb\xd1\x7d\xd1\x2e\x26\xfd\xf7\x92\x7f\x0f\x76\x5e\x30\xae\xed\x69\x9b\x44\x7b\x37\xb4\xc1\x5c\xf7\x9d\xb9\xd7\x25\xdf\xb3\x96\x6e\xb9\x22\x44\x96\xad\x79\xe7\xb6\x2c\xb9\xf0\xf7\x38\x02\x91\x53\x7e\x7a\x45\xb9\xc5\x0f\x3d\x66\xf6\x2f\xde\x74\x48\xc0\x61\x0b\xf2\xae\xa4\x38\xfc\xee\xaa\x1f\x25\xd7\x6b\xa8\x49\xa8\xd2\xc7\x09\xd6\x46\x05\x0c\xcc\x0a\xfe\x40\x88\x05\x11\x25\x69\x49\x18\xe6\x74\x21\xf7\xce\xa8\xdf\x1b\x3c\xa2\xf5\x03\xc4\x41\xbc\x76\xfb\x63\x2b\x10\x7b\xc4\xd0\xc9\xb9\xbf\x68\x7f\x0f\x00\x00\xff\xff\xfb\xca\x6d\x79\x43\x14\x00\x00")

func internal_internal_gs() ([]byte, error) {
	return bindata_read(
		_internal_internal_gs,
		"internal/internal.gs",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"internal/internal.go": internal_internal_go,
	"internal/internal.gs": internal_internal_gs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"internal": &_bintree_t{nil, map[string]*_bintree_t{
		"internal.go": &_bintree_t{internal_internal_go, map[string]*_bintree_t{}},
		"internal.gs": &_bintree_t{internal_internal_gs, map[string]*_bintree_t{}},
	}},
}}
